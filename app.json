[{"name":"app.R","content":"library(shiny)\nlibrary(timaR)\n\n# Check if runs in Docker environment or not\ni_am_a_whale <- file.exists(\"/.dockerenv\")\nif (i_am_a_whale) {\n  options(shiny.host = \"0.0.0.0\")\n} else {\n  options(shiny.host = \"127.0.0.1\")\n}\noptions(shiny.port = 3838)\noptions(shiny.maxRequestSize = 2000 * 1024^2)\n\n#' @title Label mandatory\n#'\n#' @description This function adds an asterisk to mandatory inputs\n#'\n#' @param label Label\n#'\n#' @return NULL\n#'\n#' @export\n#'\n#' @examples NULL\nlabel_mandatory <- function(label) {\n  shiny::tagList(\n    label,\n    shiny::span(\"*\", class = \"mandatory_star\")\n  )\n}\n\napp_css <-\n  \".mandatory_star { color: red; }\n     .shiny-input-container { margin-top: 25px; }\n     #submit_msg { margin-left: 15px; }\n     #error { color: red; }\n     body { background: #fcfcfc; }\n     #header { margin: -20px -15px 0; padding: 15px 15px 10px; }\n    \"\n\nui <- shiny::fluidPage(\n  shinyjs::useShinyjs(),\n  shinyjs::inlineCSS(rules = app_css),\n  title = \"Taxonomically Informed Metabolite Annotation\",\n  shiny::div(\n    id = \"header\",\n    shiny::h1(\"Taxonomically Informed Metabolite Annotation\"),\n    shiny::h4(\n      \"This app helps performing TIMA as described in the\",\n      shiny::a(\n        href = \"https://taxonomicallyinformedannotation.github.io/tima-r/\",\n        \"following documentation\"\n      )\n    ),\n    shiny::strong(\n      shiny::span(\"Created by \"),\n      shiny::a(\"Adriano Rutz\", href = \"https://adafede.github.io/\"),\n      shiny::HTML(\"&bull;\"),\n      shiny::a(\"Main publication\",\n        href = \"https://doi.org/10.3389/fpls.2019.01329\"\n      ),\n      shiny::HTML(\"&bull;\"),\n      shiny::span(\"Code\"),\n      shiny::a(\n        \"on GitHub\",\n        href = \"https://github.com/taxonomicallyinformedannotation/tima-r/\"\n      )\n    )\n  ),\n  shiny::fluidPage(shiny::div(\n    id = \"params\",\n    shiny::navlistPanel(\n      widths = c(4, 5),\n      \"Parameters\",\n      shiny::tabPanel(\n        title = \"Files\",\n        shiny::h3(\"Required files\"),\n        shiny::h5(\"They SHOULD be located in `data/source`\"),\n        shiny::div(\n          shiny::fileInput(\n            inputId = \"fil_spe_raw\",\n            label = label_mandatory(\"MGF file\"),\n            accept = \".mgf\"\n          )\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"The MGF file containing your spectra.\",\n              \"Should be located in `data/source`.\",\n              \"Reason therefore is to find it in the future.\"\n              # \"If you have a GNPS job ID, the spectra will be stored there.\"\n            )\n          ),\n        shiny::fileInput(\n          inputId = \"fil_fea_raw\",\n          label = label_mandatory(\"Features table\"),\n          accept = c(\n            \".csv\",\n            \".tsv\",\n            \".csv.gz\",\n            \".tsv.gz\",\n            \".csv.zip\",\n            \".tsv.zip\"\n          )\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"The csv or tsv file containing your features\",\n              \"Should be located in `data/source`.\",\n              \"Reason therefore is to find it in the future.\"\n              # \"If you have a GNPS job ID, the spectra will be stored there.\"\n            )\n          ),\n        shiny::fileInput(\n          inputId = \"fil_met_raw\",\n          label = \"Metadata table (mandatory if no taxon name)\",\n          accept = c(\n            \".csv\",\n            \".tsv\",\n            \".csv.gz\",\n            \".tsv.gz\",\n            \".csv.zip\",\n            \".tsv.zip\"\n          )\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"The csv or tsv file containing the metadata of your experiment.\",\n              \"Should be located in `data/source`.\",\n              \"Reason therefore is to find it in the future.\",\n              # \"If you have a GNPS job ID, the spectra will be stored there.\",\n              \"Do not forget to change the `name` in the corresponding tab.\"\n            )\n          ),\n        shiny::fileInput(\n          inputId = \"fil_ann_raw_sir\",\n          label = \"SIRIUS project space (optional)\",\n          accept = c(\n            \".zip\"\n          )\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"The compressed directory containing the SIRIUS project space.\",\n              \"Should be located in `data/interim`.\",\n              \"Reason therefore is to find it in the future.\"\n            )\n          ),\n        shiny::selectInput(\n          inputId = \"too_sir_ver\",\n          label = \"SIRIUS version\",\n          choices = c(5, 6),\n          selected = 6\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"The SIRIUS version used.\",\n              \"We highly recommend 6, the default.\"\n            )\n          ),\n        shiny::textInput(\n          inputId = \"fil_pat\",\n          label = label_mandatory(\"Pattern to identify your job locally\"),\n          value = \"example\"\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Name of your job.\",\n              \"All intermediate steps will use this pattern.\",\n              \"For example, the corresponding SIRIUS results will be named:\",\n              \"`yourPattern_sirius`.\"\n            )\n          )\n      ),\n      shiny::tabPanel(\n        title = \"Annotations\",\n        shiny::h3(\"Annotations-related parameters\"),\n        shiny::sliderInput(\n          inputId = \"ann_can_fin\",\n          label = \"Number of final candidates\",\n          min = 1,\n          max = 500,\n          value = 3,\n          step = 1,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Number of final candidates to consider.\",\n              \"For 12 candidates, with 10, only the first 10 will be kept.\",\n              \"This can end to more than n candidates, if some are ex aequo.\"\n            )\n          ),\n        shiny::checkboxInput(\n          inputId = \"ann_ms1only\",\n          label = \"Erase MS2 results and keep MS1 only\",\n          value = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Option to erase MS2 results.\",\n              \"Usually not needed, for benchmarking mainly.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"ann_thr_con\",\n          label = \"Minimal consistency score (chemical) to consider a class\",\n          min = 0,\n          max = 1,\n          value = 0.0,\n          step = 0.05,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Minimal consistency score (chemical) to consider a class.\",\n              \"Everything below will be considered as not consistent.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"ann_thr_ms1_bio\",\n          label = \"Minimal biological score to keep MS1 only annotation\",\n          min = 0,\n          max = 1,\n          value = 0.0,\n          step = 0.05,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Minimal biological score to keep an MS1 candaidate.\",\n              \"Everything below will be discarded (see below).\",\n              \"Check the sub-scores and weights in the `weights` panel.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"ann_thr_ms1_che\",\n          label = \"Minimal chemical score to keep MS1 only annotation\",\n          min = 0,\n          max = 1,\n          value = 0.0,\n          step = 0.1,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Minimal chemical score to keep an MS1 candaidate.\",\n              \"Everything below will be discarded (see below).\",\n              \"Check the sub-scores and weights in the `weights` panel.\"\n            )\n          ),\n        shiny::selectInput(\n          inputId = \"ann_thr_ms1_con\",\n          label = \"Condition to be used to retain candidates\",\n          choices = c(\"AND\", \"OR\"),\n          selected = \"OR\"\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"If an MS1 candidate has a bio score of 1, a chem score of 0.25\",\n              \"the above thresholds set at 0.3 and 0.3 respectively\",\n              \"keeps it if the condition is `OR` but discard it if `AND`.\"\n            )\n          ),\n        shiny::checkboxInput(\n          inputId = \"ann_ms2_app\",\n          label = \"Perform matching without precursor? (can be very long)\",\n          value = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Corresponds to variable dereplication.\",\n              \"Then, precurors masses are disregarded during matching.\",\n              \"Allows to find (incorrect) analogs.\",\n              \"Takes a lot of time.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"ann_thr_ms2_sim\",\n          label = \"Minimal similarity score (annotation)\",\n          min = 0,\n          max = 1,\n          step = 0.05,\n          value = 0.0,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Minimum similarity score between spectra.\",\n              \"To keep MS2 annotation.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"edg_thr_ms2_sim\",\n          label = \"Minimal similarity score (edges)\",\n          min = 0.5,\n          max = 1,\n          step = 0.05,\n          value = 0.7,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Minimum similarity score between spectra.\",\n              \"To keep MS2 similarity edge.\"\n            )\n          )\n      ),\n      shiny::tabPanel(\n        title = \"MS\",\n        shiny::h3(\"MS-related parameters\"),\n        shiny::selectInput(\n          inputId = \"ms_pol\",\n          label = \"Polarity used\",\n          choices = c(\"pos\", \"neg\"),\n          selected = \"pos\"\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\"Polarity of the MS experiment.\")\n          ),\n        shiny::sliderInput(\n          inputId = \"ms_thr_ms1_int\",\n          label = \"Intensity threshold for MS1\",\n          min = 0,\n          max = 1E6,\n          value = 1E5,\n          step = 1E4,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"MS1 intensity threshold.\",\n              \"Features below this threshold will not be annotated.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"ms_thr_ms2_int\",\n          label = \"Intensity threshold for MS2\",\n          min = 0,\n          max = 1E4,\n          value = 5,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"MS2 intensity threshold.\",\n              \"Fragments below this threshold will be removed from spectra.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"ms_tol_mas_ppm_ms1\",\n          label = \"Relative mass tolerance for MS1 in ppm\",\n          min = 0.1,\n          max = 20,\n          value = 10,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\"Mass tolerance (in ppm) used for MS1 annotation.\")\n          ),\n        shiny::sliderInput(\n          inputId = \"ms_tol_mas_dal_ms1\",\n          label = \"Absolute mass tolerance for MS1 in Dalton\",\n          min = 0.005,\n          max = 0.02,\n          value = 0.01,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\"Mass tolerance (in Da) used for MS1 annotation.\")\n          ),\n        shiny::sliderInput(\n          inputId = \"ms_tol_mas_ppm_ms2\",\n          label = \"Relative mass tolerance for MS2 in ppm\",\n          min = 0.1,\n          max = 20,\n          value = 10,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\"Mass tolerance (in ppm) used for MS2 annotation.\")\n          ),\n        shiny::sliderInput(\n          inputId = \"ms_tol_mas_dal_ms2\",\n          label = \"Absolute mass tolerance for MS2 in Dalton\",\n          min = 0.005,\n          max = 0.02,\n          value = 0.01,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\"Mass tolerance (in Da) used for MS2 annotation.\")\n          ),\n        shiny::sliderInput(\n          inputId = \"ms_tol_rt_min\",\n          label = \"Retention time tolerance in minutes\",\n          min = 0.01,\n          max = 0.20,\n          value = 0.05,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Retention time tolerance (minutes) used for adducts attribution\",\n              \"and annotation if an experimental library is provided.\",\n              \"If no experimental library is given, does not impact results.\"\n            )\n          ),\n        shiny::checkboxGroupInput(\n          inputId = \"ms_add_pos\",\n          label = \"List of adducts to be used in positive\",\n          choices = list(\n            \"[1M+(H)3]3+\",\n            \"[1M+(H)2(Na)1]3+\",\n            \"[1M+(H)1(Na)2]3+\",\n            \"[1M+(Na)3]3+\",\n            \"[1M+(H)2]2+\",\n            \"[1M+(H)1(Na)1]2+\",\n            \"[1M+(Mg)1]2+\",\n            \"[1M+(H)1(K)1]2+\",\n            \"[1M+(Ca)1]2+\",\n            \"[1M+(Na)2]2+\",\n            \"[1M+(Fe)1]2+\",\n            \"[1M+(H)1]1+\",\n            \"[1M+(H)4(N)1]1+\",\n            \"[1M+(Na)1]1+\",\n            \"[1M+(K)1]1+\",\n            \"[1M+(Cu)1]1+\",\n            \"[2M+(Mg)1]2+\",\n            \"[2M+(Ca)1]2+\",\n            \"[2M+(Fe)1]2+\",\n            \"[2M+(H)1]1+\",\n            \"[2M+(H)4(N)1]1+\",\n            \"[2M+(Na)1]1+\",\n            \"[2M+(K)1]1+\"\n          ),\n          selected = list(\n            \"[1M+(H)2]2+\",\n            \"[1M+(H)1]1+\",\n            \"[1M+(H)4(N)1]1+\",\n            \"[1M+(Na)1]1+\",\n            \"[2M+(H)1]1+\"\n          )\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Choose wisely.\",\n              \"If a very important adduct everyone should have is missing,\",\n              \"please open an issue at:\",\n              as.character(\n                shiny::tags$a(\n                  \"https://github.com/taxonomicallyinformedannotation/tima-r/issues\",\n                  href =\n                    \"https://github.com/taxonomicallyinformedannotation/tima-r/issues\"\n                )\n              )\n            )\n          ),\n        shiny::checkboxGroupInput(\n          inputId = \"ms_add_neg\",\n          label = \"List of adducts to be used in negative\",\n          choices = list(\n            \"[1M-(H)3]3-\",\n            \"[1M-(H)2]2-\",\n            \"[1M-(H)1]1-\",\n            \"[1M+(F)1]1-\",\n            \"[1M+(Na)1-(H)2]1-\",\n            \"[1M+(Cl)1]1-\",\n            \"[1M+(K)1-(H)2]1-\",\n            \"[1M+(Br)1]1-\",\n            \"[2M-(H)1]1-\",\n            \"[3M-(H)1]1-\"\n          ),\n          selected = list(\n            \"[1M-(H)2]2-\",\n            \"[1M-(H)1]1-\",\n            \"[2M-(H)1]1-\"\n          )\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Choose wisely.\",\n              \"If a very important adduct everyone should have is missing,\",\n              \"please open an issue at:\",\n              as.character(\n                shiny::tags$a(\n                  \"https://github.com/taxonomicallyinformedannotation/tima-r/issues\",\n                  href =\n                    \"https://github.com/taxonomicallyinformedannotation/tima-r/issues\"\n                )\n              )\n            )\n          ),\n        shiny::checkboxGroupInput(\n          inputId = \"ms_clu_pos\",\n          label = \"List of clusters to be used in positive\",\n          choices = list(\n            \"H2O\", # (water)\n            # \"CH4O\", # (methanol)\n            \"C2H3N\", # (acetonitrile)\n            # \"C2H7N\", # (ethylamine)\n            # \"C2H6O\", # (ethanol)\n            \"NaCl\" # (sodium chloride)\n            # \"C3H8O\", # (isopropanol)\n            # \"C2H6OS\" # (dmso)\n          ),\n          selected = list(\n            \"H2O\", # (water)\n            # \"CH4O\", # (methanol)\n            \"C2H3N\" # (acetonitrile)\n            # \"C2H7N\", # (ethylamine)\n            # \"C2H6O\", # (ethanol)\n            # \"NaCl\", # (sodium chloride)\n            # \"C3H8O\", # (isopropanol)\n            # \"C2H6OS\" # (dmso)\n          )\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Choose wisely.\",\n              \"If a very important cluster everyone should have is missing,\",\n              \"please open an issue at:\",\n              as.character(\n                shiny::tags$a(\n                  \"https://github.com/taxonomicallyinformedannotation/tima-r/issues\",\n                  href =\n                    \"https://github.com/taxonomicallyinformedannotation/tima-r/issues\"\n                )\n              )\n            )\n          ),\n        shiny::checkboxGroupInput(\n          inputId = \"ms_clu_neg\",\n          label = \"List of clusters to be used in negative\",\n          choices = list(\n            \"H2O\", # (water)\n            \"CH2O2\", # (formic)\n            \"NaCl\", # (sodium chloride)\n            \"C2H4O2\", # (acetic)\n            \"H2PO4\", # (phosphoric)\n            \"C2HF3O2\" # (tfa)\n          ),\n          selected = list(\n            \"H2O\", # (water)\n            \"CH2O2\", # (formic)\n            # \"NaCl\", # (sodium chloride)\n            # \"C2H4O2\", # (acetic)\n            \"H2PO4\" # (phosphoric)\n            # \"C2HF3O2\" # (tfa)\n          )\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Choose wisely.\",\n              \"If a very important cluster everyone should have is missing,\",\n              \"please open an issue at:\",\n              as.character(\n                shiny::tags$a(\n                  \"https://github.com/taxonomicallyinformedannotation/tima-r/issues\",\n                  href =\n                    \"https://github.com/taxonomicallyinformedannotation/tima-r/issues\"\n                )\n              )\n            )\n          )\n      ),\n      shiny::tabPanel(\n        title = \"Organisms\",\n        shiny::h3(\"Organisms-related parameters\"),\n        shiny::textInput(\n          inputId = \"org_tax\",\n          label = \"OPTIONAL. Force all features to be attributed to a taxon\n          (e.g. Gentiana lutea)\",\n          value = NULL\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"You have to input the scientific name of your taxon.\",\n              \"Will be used for the weighting of your annotations\",\n              \"Example: Gentiana lutea\",\n              \"All features will be attributed to this source.\",\n              \"For finer attribution,\n              you need to provide a metadata file in the `Files` panel.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"org_can\",\n          label = \"Number of organisms to keep per feature\",\n          min = 1,\n          max = 5,\n          value = 1,\n          step = 1,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Only has impact if you provided a metadata file in the\n              `Files` panel.\",\n              \"In this case,\n              it will take the intensity matrix of your features\",\n              \"and attribute the n organisms where the highest intensity\",\n              \"was observed as source to your features.\",\n              \"Useful when your experiment contains\n              different biological sources.\",\n              \"As the organisms where the measured intensity\n              is the highest are also the ones\",\n              \"with higher likelihood of the\n              corresponding compounds being isolated,\",\n              \"the number of organisms can be kept low.\"\n            )\n          ),\n        shiny::checkboxInput(\n          inputId = \"org_fil_mod\",\n          label = \"Filter library to restrict it to a\n          portion of organisms only\",\n          value = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"If you want, you can restrict your\n              structure-organism pairs library\",\n              \"to given taxa only.\",\n              \"We do not advise doing so, but you are free to.\"\n            )\n          ),\n        shiny::selectInput(\n          inputId = \"org_fil_lev\",\n          label = \"Level at which the library will be filtered\",\n          choices = c(\n            \"domain\",\n            \"phylum\",\n            \"class\",\n            \"order\",\n            \"family\",\n            \"tribe\",\n            \"genus\",\n            \"species\",\n            \"varietas\"\n          ),\n          selected = \"phylum\"\n        ),\n        shiny::textInput(\n          inputId = \"org_fil_val\",\n          label = \"Value to be applied for filtering\",\n          value = \"Streptophyta\"\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"You can also provide multiple values.\",\n              \"Example, if you want to get a bitter library:\",\n              \"`Simaroubaceae|Gentianaceae`\"\n            )\n          )\n      ),\n      shiny::tabPanel(\n        title = \"Names\",\n        shiny::h3(\"Variable names parameters\"),\n        shiny::textInput(\n          inputId = \"names_features\",\n          label = \"Name of \\\"feature IDs\\\" variable in the input\",\n          value = \"row ID\"\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Name of the `feature id` column in your features file.\",\n              \"The default corresponds to the default in MZmine.\",\n              \"If using SLAW, please input 'slaw_id'\"\n            )\n          ),\n        shiny::textInput(\n          inputId = \"names_filename\",\n          label = \"Name of \\\"filename\\\" variable in the input\",\n          value = \"filename\"\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Name of the `file name` column in your metadata file.\",\n              \"The default is filename.\",\n              \"If using Sequencer, please input 'Sample Name'\"\n            )\n          ),\n        shiny::checkboxInput(\n          inputId = \"names_extension\",\n          label = \"The file(s) extension is present in the sample name\",\n          value = TRUE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Uncheck the box if you removed the files extensions\",\n              \"of your file in the features file\",\n              \"The default corresponds to the default in MZmine.\"\n            )\n          ),\n        shiny::textInput(\n          inputId = \"names_precursor\",\n          label = \"Name of \\\"precursor m/z\\\" variable in the input\",\n          value = \"row m/z\"\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Name of the `precursor m/z` column in your features file.\",\n              \"The default corresponds to the default in MZmine.\",\n              \"If using SLAW, please input 'mz'\"\n            )\n          ),\n        shiny::textInput(\n          inputId = \"names_rt\",\n          label = \"Name of \\\"retention time\\\" variable in the feature table\",\n          value = \"row retention time\"\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Name of the `retention time` column in your features file.\",\n              \"The default corresponds to the default in MZmine.\",\n              \"If using SLAW, please input 'rt'\",\n              \"Assumed to be in minutes.\"\n            )\n          ),\n        shiny::textInput(\n          inputId = \"names_rt_2\",\n          label = \"Name of \\\"retention time\\\" variable in the rt library\",\n          value = \"rt\"\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Name of the `retention time` column in your rt library file.\"\n            )\n          ),\n        shiny::textInput(\n          inputId = \"names_source\",\n          label = \"Name of \\\"source IDs\\\" variable in the input\",\n          value = \"CLUSTERID1\"\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Name of the `source id` column in your edges file.\",\n              \"The default corresponds to the default in GNPS.\"\n            )\n          ),\n        shiny::textInput(\n          inputId = \"names_target\",\n          label = \"Name of \\\"target IDs\\\" variable in the input\",\n          value = \"CLUSTERID2\"\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Name of the `target id` column in your edges file.\",\n              \"The default corresponds to the default in GNPS.\"\n            )\n          ),\n        shiny::textInput(\n          inputId = \"names_taxon\",\n          label = \"Name of \\\"taxon name\\\" variable in the input\",\n          value = \"ATTRIBUTE_species\"\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Name of the `taxon name` column in your edges file.\",\n              \"The default corresponds to the default in GNPS.\"\n            )\n          )\n      ),\n      shiny::tabPanel(\n        title = \"Weights\",\n        shiny::h3(\"Weights-related parameters\"),\n        shiny::sliderInput(\n          inputId = \"wei_glo_bio\",\n          label = \"Weight for the biological part\",\n          min = 0,\n          max = 1,\n          value = 0.500,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Weight attributed to the biological score.\",\n              \"Depends on the organism you are studying,\n              and how specialized its metabolome is.\",\n              \"Also depends if you favor novelty over previous knowledge.\",\n              \"We advise this value to be high.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_glo_che\",\n          label = \"Weight for the chemical part\",\n          min = 0,\n          max = 1,\n          value = 0.166,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Weight attributed to the chemical score.\",\n              \"We advise this value to be low.\",\n              \"Current chemical taxonomies do not perform well.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_glo_spe\",\n          label = \"Weight for the spectral part\",\n          min = 0,\n          max = 1,\n          value = 0.333,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Weight attributed to the spectral score.\",\n              \"Depends on the quality of your spectra.\",\n              \"We advise this value to be medium to high.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_01\",\n          label = \"Score for a biological domain match\",\n          min = 0,\n          max = 1,\n          value = 0.100,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `domain` match.\",\n              \"We advise this value to be the lowest.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_02\",\n          label = \"Score for a biological kingdom match\",\n          min = 0,\n          max = 1,\n          value = 0.200,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `kingdom` match.\",\n              \"We advise this value to be higher than the one of `domain`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_03\",\n          label = \"Score for a biological phylum match\",\n          min = 0,\n          max = 1,\n          value = 0.300,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `phylum` match.\",\n              \"We advise this value to be higher than the one of `kingdom`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_04\",\n          label = \"Score for a biological class match\",\n          min = 0,\n          max = 1,\n          value = 0.400,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `class` match.\",\n              \"We advise this value to be higher than the one of `phylum`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_05\",\n          label = \"Score for a biological order match\",\n          min = 0,\n          max = 1,\n          value = 0.500,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `order` match.\",\n              \"We advise this value to be higher than the one of `class`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_06\",\n          label = \"Score for a biological infraorder match\",\n          min = 0,\n          max = 1,\n          value = 0.550,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `infraorder` match.\",\n              \"We advise this value to be higher than the one of `order`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_07\",\n          label = \"Score for a biological family match\",\n          min = 0,\n          max = 1,\n          value = 0.600,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `family` match.\",\n              \"We advise this value to be higher than the one of `infraorder`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_08\",\n          label = \"Score for a biological subfamily match\",\n          min = 0,\n          max = 1,\n          value = 0.650,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `subfamily` match.\",\n              \"We advise this value to be higher than the one of `family`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_09\",\n          label = \"Score for a biological tribe match\",\n          min = 0,\n          max = 1,\n          value = 0.700,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `tribe` match.\",\n              \"We advise this value to be higher than the one of `subfamily`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_10\",\n          label = \"Score for a biological subtribe match\",\n          min = 0,\n          max = 1,\n          value = 0.750,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `subtribe` match.\",\n              \"We advise this value to be higher than the one of `tribe`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_11\",\n          label = \"Score for a biological genus match\",\n          min = 0,\n          max = 1,\n          value = 0.800,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `genus` match.\",\n              \"We advise this value to be higher than the one of `subtribe`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_12\",\n          label = \"Score for a biological subgenus match\",\n          min = 0,\n          max = 1,\n          value = 0.850,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `subgenus` match.\",\n              \"We advise this value to be higher than the one of `genus`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_13\",\n          label = \"Score for a biological species match\",\n          min = 0,\n          max = 1,\n          value = 0.900,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `species` match.\",\n              \"We advise this value to be higher than the one of `subgenus`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_14\",\n          label = \"Score for a biological subspecies match\",\n          min = 0,\n          max = 1,\n          value = 0.950,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `subspecies` match.\",\n              \"We advise this value to be higher than the one of `species`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_bio_15\",\n          label = \"Score for a biological variety match\",\n          min = 0,\n          max = 1,\n          value = 1.000,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `variety` match.\",\n              \"We advise this value to be higher than the one of `subspecies`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_che_11\",\n          label = \"Score for a (classyfire) chemical kingdom match\",\n          min = 0,\n          max = 1,\n          value = 0.250,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `kingdom (classyfire)` match.\",\n              \"We advise this value to be the lowest.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_che_12\",\n          label = \"Score for a (classyfire) chemical superclass match\",\n          min = 0,\n          max = 1,\n          value = 0.500,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `superclass (classyfire)` match.\",\n              \"We advise this value to be higher\n              than the one of `kingdom (classyfire)`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_che_13\",\n          label = \"Score for a (classyfire) chemical class match\",\n          min = 0,\n          max = 1,\n          value = 0.750,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `class (classyfire)` match.\",\n              \"We advise this value to be higher\n              than the one of `superclass (classyfire)`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_che_14\",\n          label = \"Score for a (classyfire) chemical parent match\",\n          min = 0,\n          max = 1,\n          value = 1.000,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `parent (classyfire)` match.\",\n              \"We advise this value to be higher\n              than the one of `class (classyfire)`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_che_21\",\n          label = \"Score for a (NPC) chemical pathway match\",\n          min = 0,\n          max = 1,\n          value = 0.333,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `pathway (npclassifier)` match.\",\n              \"We advise this value to be the lowest.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_che_22\",\n          label = \"Score for a (NPC) chemical superclass match\",\n          min = 0,\n          max = 1,\n          value = 0.666,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `superclass (npclassifier)` match.\",\n              \"We advise this value to be higher\n              than the one of `pathway (npclassifier)`.\"\n            )\n          ),\n        shiny::sliderInput(\n          inputId = \"wei_che_23\",\n          label = \"Score for a (NPC) chemical class match\",\n          min = 0,\n          max = 1,\n          value = 1.000,\n          step = 0.001,\n          ticks = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Score for a `class (npclassifier)` match.\",\n              \"We advise this value to be higher\n              than the one of `superclass (npclassifier)`.\"\n            )\n          )\n      ),\n      shiny::tabPanel(\n        title = \"Options\",\n        shiny::h3(\"Options parameters\"),\n        shiny::checkboxInput(\n          inputId = \"compounds_names\",\n          label = \"Compound names\",\n          value = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"If ticked, compounds names will be reported.\",\n              \"This will require much more memory,\n              as they are the longest strings.\"\n            )\n          ),\n        shiny::checkboxInput(\n          inputId = \"nitrogen_rule\",\n          label = \"Nitrogen rule\",\n          value = TRUE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"If ticked, apply Nitrogen rule.\",\n              \"This assumes no radical fragmentation.\"\n            )\n          ),\n        shiny::checkboxInput(\n          inputId = \"remove_ties\",\n          label = \"Remove ties\",\n          value = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"If checked, only one of the candidates with the exact same score will be kept randomly.\",\n              \"Not adivsed, but here for convenience.\"\n            )\n          ),\n        shiny::checkboxInput(\n          inputId = \"summarise\",\n          label = \"Summarise results to one row per feature\",\n          value = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"If checked, the output will be a Cytoscape-ready table,\",\n              \"with multiple candidates per line, separated by pipes (|).\",\n              \"If unchecked, will output multiple lines per features\n              (one per candidate).\"\n            )\n          ),\n        shiny::checkboxInput(\n          inputId = \"force\",\n          label = \"Do not use it!\",\n          value = FALSE\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Really, do not use it.\",\n              \"Corresponds to a `--force` parameter,\n              allowing for crazy things that can crash.\",\n              \"Really, do not use it.\"\n            )\n          )\n      ),\n      shiny::tabPanel(\n        title = \"GNPS (optional)\",\n        shiny::h3(\"GNPS parameters\"),\n        shiny::textInput(\n          inputId = \"gnps_id\",\n          label = \"GNPS job ID\",\n          value = NULL\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\n              \"Your GNPS job ID.\",\n              \"If you provide one, all files will be taken from there.\",\n              \"You still need to provide a path for\n              where we will store the files,\",\n              \"in case your GNPS job gets deleted for you to find them back.\",\n              \"Annotations will also be downloaded.\"\n            )\n          ),\n        shiny::selectInput(\n          inputId = \"gnps_workflow\",\n          label = \"Workflow used within GNPS\",\n          choices = c(\"classical\", \"fbmn\"),\n          selected = \"fbmn\"\n        ) |>\n          shinyhelper::helper(\n            type = \"inline\",\n            content = c(\"We advise `fbmn`,\n                        but we also support `classical` jobs.\")\n          )\n      )\n    )\n  )),\n  shiny::fluidPage(\n    shiny::div(\n      id = \"form\",\n      shiny::actionButton(\n        inputId = \"save\",\n        label = \"Save parameters\",\n        class = \"btn-primary\"\n      ),\n      shinyjs::hidden(\n        shiny::span(id = \"save_msg\", \"Saving parameters...\"),\n        shiny::div(\n          id = \"error\",\n          shiny::div(\n            shiny::br(),\n            shiny::tags$b(\"Error: \"),\n            shiny::span(id = \"error_msg\")\n          )\n        )\n      ),\n      shiny::actionButton(\n        inputId = \"launch\",\n        label = \"Launch job\",\n        class = \"btn-primary\"\n      ),\n    ),\n    shinyjs::hidden(\n      shiny::div(\n        id = \"thankyou_msg\",\n        shiny::h3(\"Thanks, your parameters were saved successfully!\")\n      )\n    ),\n    shinyjs::hidden(\n      shiny::div(\n        id = \"job_msg\",\n        shiny::h3(\"Job is running!\")\n      )\n    )\n  )\n)\n\n# save the results to a file\nsave_input <- function(input) {\n  paths_data_source <- parse_yaml_paths()$data$source$path\n  paths_data_interim_annotations <-\n    parse_yaml_paths()$data$interim$annotations$path\n  ## safety\n  create_dir(paths_data_source)\n\n  list <- load_yaml_files()\n\n  yamls_params <- list$yamls_params\n  yaml_files <- list$yaml_files\n  yaml_names <- list$yaml_names\n\n  ## This allows to keep files correctly placed in `data/source` clean\n  prefil_fea_raw <- shiny::isolate(input$fil_fea_raw)\n  prefil_spe_raw <- shiny::isolate(input$fil_spe_raw)\n  prefil_met_raw <- shiny::isolate(input$fil_met_raw)\n  prefil_sir_raw <- shiny::isolate(input$fil_ann_raw_sir)\n\n  prefil_fea_raw_1 <- file.path(paths_data_source, prefil_fea_raw[[1]])\n  prefil_spe_raw_1 <- file.path(paths_data_source, prefil_spe_raw[[1]])\n  if (!is.null(prefil_met_raw)) {\n    prefil_met_raw_1 <- file.path(paths_data_source, prefil_met_raw[[1]])\n  }\n  if (!is.null(prefil_sir_raw)) {\n    prefil_sir_raw_1 <-\n      file.path(paths_data_interim_annotations, prefil_sir_raw[[1]])\n  }\n\n  if (!file.exists(prefil_fea_raw_1)) {\n    fs::file_copy(path = prefil_fea_raw[[4]], new_path = file.path(prefil_fea_raw_1), overwrite = TRUE)\n  }\n  if (!file.exists(prefil_spe_raw_1)) {\n    fs::file_copy(path = prefil_spe_raw[[4]], new_path = file.path(prefil_spe_raw_1), overwrite = TRUE)\n  }\n  if (!is.null(prefil_met_raw)) {\n    if (!file.exists(prefil_met_raw_1)) {\n      fs::file_copy(path = prefil_met_raw[[4]], new_path = file.path(prefil_met_raw_1), overwrite = TRUE)\n    }\n  } else {\n    prefil_met_raw_1 <- NULL\n  }\n  if (!is.null(prefil_sir_raw)) {\n    if (!file.exists(prefil_sir_raw_1)) {\n      ## safety\n      create_dir(paths_data_interim_annotations)\n      fs::file_copy(path = prefil_sir_raw[[4]], new_path = file.path(prefil_sir_raw_1), overwrite = TRUE)\n    }\n  } else {\n    prefil_sir_raw_1 <- NULL\n  }\n\n  fil_fea_raw <- prefil_fea_raw_1\n  fil_spe_raw <- prefil_spe_raw_1\n  fil_met_raw <- prefil_met_raw_1\n  fil_sir_raw <- prefil_sir_raw_1\n\n  fil_pat <- shiny::isolate(input$fil_pat)\n\n  gnps_job_id <- shiny::isolate(input$gnps_id)\n  if (gnps_job_id == \"\") {\n    gnps_job_id <- NULL\n  }\n\n  org_tax <- shiny::isolate(input$org_tax)\n  if (org_tax == \"\") {\n    org_tax <- NULL\n  }\n\n  log_debug(x = \"Changing parameters ...\")\n  log_debug(x = \"... Small\")\n  yaml_small <- yamls_params[[\"inst/params/prepare_params\"]]\n  yaml_small$files$pattern <-\n    fil_pat\n  yaml_small$files$features$raw <-\n    fil_fea_raw\n  yaml_small$files$metadata$raw <-\n    fil_met_raw\n  yaml_small$files$annotations$raw$sirius <-\n    fil_sir_raw\n  yaml_small$files$spectral$raw <-\n    fil_spe_raw\n  yaml_small$ms$polarity <-\n    shiny::isolate(input$ms_pol)\n  yaml_small$organisms$taxon <-\n    org_tax\n  yaml_small$options$summarise <-\n    shiny::isolate(input$summarise)\n  create_dir(\"inst/params\")\n  yaml::write_yaml(\n    x = yaml_small,\n    file = parse_yaml_paths()$params$prepare_params\n  )\n\n  log_debug(x = \"... Advanced\")\n  yaml_advanced <- yamls_params[[\"inst/params/prepare_params_advanced\"]]\n  yaml_advanced$annotations$candidates$final <-\n    shiny::isolate(input$ann_can_fin)\n  yaml_advanced$annotations$ms1only <-\n    shiny::isolate(input$ann_ms1only)\n  yaml_advanced$annotations$ms2approx <-\n    shiny::isolate(input$ann_ms2_app)\n  yaml_advanced$annotations$thresholds$consistency <-\n    shiny::isolate(input$ann_thr_con)\n  yaml_advanced$annotations$thresholds$ms1$biological <-\n    shiny::isolate(input$ann_thr_ms1_bio)\n  yaml_advanced$annotations$thresholds$ms1$chemical <-\n    shiny::isolate(input$ann_thr_ms1_che)\n  yaml_advanced$annotations$thresholds$ms1$condition <-\n    shiny::isolate(input$ann_thr_ms1_con)\n  yaml_advanced$annotations$thresholds$ms2$similarity$annotation <-\n    shiny::isolate(input$ann_thr_ms2_sim)\n  yaml_advanced$annotations$thresholds$ms2$similarity$edges <-\n    shiny::isolate(input$edg_thr_ms2_sim)\n  yaml_advanced$files$pattern <-\n    fil_pat\n  yaml_advanced$files$annotations$raw$spectral$gnps <-\n    yaml_advanced$files$annotations$raw$spectral$gnps |> replace_id()\n  yaml_advanced$files$annotations$raw$spectral$spectral <-\n    yaml_advanced$files$annotations$raw$spectral$spectral |> replace_id()\n  # yaml_advanced$files$annotations$raw$sirius <-\n  #   yaml_advanced$files$annotations$raw$sirius |> replace_id()\n  yaml_advanced$files$annotations$raw$sirius <- fil_sir_raw\n  yaml_advanced$files$annotations$prepared$canopus <-\n    yaml_advanced$files$annotations$prepared$canopus |> replace_id()\n  yaml_advanced$files$annotations$prepared$formula <-\n    yaml_advanced$files$annotations$prepared$formula |> replace_id()\n  yaml_advanced$files$annotations$prepared$structural$gnps <-\n    yaml_advanced$files$annotations$prepared$structural$gnps |> replace_id()\n  yaml_advanced$files$annotations$prepared$structural$ms1 <-\n    yaml_advanced$files$annotations$prepared$structural$ms1 |> replace_id()\n  yaml_advanced$files$annotations$prepared$structural$sirius <-\n    yaml_advanced$files$annotations$prepared$structural$sirius |> replace_id()\n  yaml_advanced$files$annotations$prepared$structural$spectral <-\n    yaml_advanced$files$annotations$prepared$structural$spectral |> replace_id()\n  yaml_advanced$files$annotations$filtered <-\n    yaml_advanced$files$annotations$filtered |> replace_id()\n  # yaml_advanced$files$annotations$processed <-\n  #   yaml_advanced$files$annotations$processed |> replace_id()\n  yaml_advanced$files$features$raw <-\n    fil_fea_raw\n  yaml_advanced$files$features$prepared <-\n    yaml_advanced$files$features$prepared |> replace_id()\n  # TODO\n  # yaml_advanced$files$libraries$adducts$neg <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$adducts$pos <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$adducts$prepared <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$raw$closed <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$raw$ecmdb <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$raw$hmdb <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$raw$lotus <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$prepared$closed <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$prepared$ecmdb <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$prepared$hmdb <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$prepared$lotus <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$prepared$rt <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$prepared$spectral <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$merged$keys <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$merged$organisms$names <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$merged$organisms$taxonomies$ott <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$merged$structures$stereo <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$merged$structures$metadata <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$merged$structures$names <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$merged$structures$taxonomies$cla <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$sop$merged$structures$taxonomies$npc <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$spectral$exp$neg <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$spectral$exp$pos <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$spectral$exp$raw <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$spectral$is$neg <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$spectral$is$pos <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$spectral$is$raw <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$temporal$exp$csv <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$temporal$exp$mgf$pos <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$temporal$exp$mgf$neg <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$temporal$is$csv <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$temporal$is$mgf$pos <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$temporal$is$mgf$neg <-\n  #   shiny::isolate(input$todo)\n  # yaml_advanced$files$libraries$temporal$prepared <-\n  #   shiny::isolate(input$todo)\n  yaml_advanced$files$networks$spectral$edges$raw$ms1 <-\n    yaml_advanced$files$networks$spectral$edges$raw$ms1 |> replace_id()\n  yaml_advanced$files$networks$spectral$edges$raw$spectral <-\n    yaml_advanced$files$networks$spectral$edges$raw$spectral |> replace_id()\n  yaml_advanced$files$networks$spectral$edges$prepared <-\n    yaml_advanced$files$networks$spectral$edges$prepared |> replace_id()\n  yaml_advanced$files$networks$spectral$components$raw <-\n    yaml_advanced$files$networks$spectral$components$raw |> replace_id()\n  yaml_advanced$files$networks$spectral$components$prepared <-\n    yaml_advanced$files$networks$spectral$components$prepared |> replace_id()\n  yaml_advanced$files$metadata$raw <-\n    fil_met_raw\n  yaml_advanced$files$metadata$prepared <-\n    yaml_advanced$files$metadata$prepared |> replace_id()\n  yaml_advanced$files$spectral$raw <-\n    fil_spe_raw\n  yaml_advanced$gnps$id <-\n    gnps_job_id\n  yaml_advanced$gnps$workflow <-\n    shiny::isolate(input$gnps_workflow)\n  yaml_advanced$ms$adducts$neg <-\n    shiny::isolate(input$ms_add_neg)\n  yaml_advanced$ms$adducts$pos <-\n    shiny::isolate(input$ms_add_pos)\n  yaml_advanced$ms$clusters$neg <-\n    shiny::isolate(input$ms_clu_neg)\n  yaml_advanced$ms$clusters$pos <-\n    shiny::isolate(input$ms_clu_pos)\n  yaml_advanced$ms$polarity <-\n    shiny::isolate(input$ms_pol)\n  yaml_advanced$ms$thresholds$ms1$intensity <-\n    shiny::isolate(input$ms_thr_ms1_int)\n  yaml_advanced$ms$thresholds$ms2$intensity <-\n    shiny::isolate(input$ms_thr_ms2_int)\n  yaml_advanced$ms$tolerances$mass$ppm$ms1 <-\n    shiny::isolate(input$ms_tol_mas_ppm_ms1)\n  yaml_advanced$ms$tolerances$mass$ppm$ms2 <-\n    shiny::isolate(input$ms_tol_mas_ppm_ms2)\n  yaml_advanced$ms$tolerances$mass$dalton$ms1 <-\n    shiny::isolate(input$ms_tol_mas_dal_ms1)\n  yaml_advanced$ms$tolerances$mass$dalton$ms2 <-\n    shiny::isolate(input$ms_tol_mas_dal_ms2)\n  yaml_advanced$ms$tolerances$rt$minutes <-\n    shiny::isolate(input$ms_tol_rt_min)\n  yaml_advanced$names$extension <-\n    shiny::isolate(input$names_extension)\n  yaml_advanced$names$features <-\n    shiny::isolate(input$names_features)\n  yaml_advanced$names$filename <-\n    shiny::isolate(input$names_filename)\n  # TODO\n  # yaml_advanced$names$inchikey <-\n  #   shiny::isolate(input$names_inchikey)\n  # TODO\n  # yaml_advanced$names$mgf$collision_energy <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$compound_id <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$exact_mass <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$inchi <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$inchi_no_stereo <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$inchikey <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$inchikey_no_stereo <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$molecular_formula <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$name <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$polarity <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$retention_time <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$smiles <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$smiles_no_stereo <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$spectrum_id <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$splash <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$synonyms <-\n  #   shiny::isolate(input$names_mgf_x)\n  # yaml_advanced$names$mgf$xlogp <-\n  #   shiny::isolate(input$names_mgf_x)\n  yaml_advanced$names$precursor <-\n    shiny::isolate(input$names_precursor)\n  yaml_advanced$names$rt$features <-\n    shiny::isolate(input$names_rt)\n  yaml_advanced$names$rt$library <-\n    shiny::isolate(input$names_rt_2)\n  # TODO\n  # yaml_advanced$names$smiles <-\n  #   shiny::isolate(input$names_smiles)\n  yaml_advanced$names$source <-\n    shiny::isolate(input$names_source)\n  yaml_advanced$names$target <-\n    shiny::isolate(input$names_target)\n  yaml_advanced$names$taxon <-\n    shiny::isolate(input$names_taxon)\n  yaml_advanced$organisms$candidates <-\n    shiny::isolate(input$org_can)\n  yaml_advanced$organisms$filter$mode <-\n    shiny::isolate(input$org_fil_mod)\n  yaml_advanced$organisms$filter$level <-\n    shiny::isolate(input$org_fil_lev)\n  yaml_advanced$organisms$filter$value <-\n    shiny::isolate(input$org_fil_val)\n  yaml_advanced$organisms$taxon <-\n    org_tax\n  # TODO\n  # yaml_advanced$tools$metadata <-\n  #   shiny::isolate(input$too_x)\n  # yaml_advanced$tools$networks$spectral$components <-\n  #   shiny::isolate(input$too_x)\n  # yaml_advanced$tools$networks$spectral$edges <-\n  #   shiny::isolate(input$too_x)\n  yaml_advanced$tools$sirius$version <-\n    shiny::isolate(input$too_sir_ver)\n  # yaml_advanced$tools$taxonomies$biological <-\n  #   shiny::isolate(input$too_x)\n  # yaml_advanced$tools$taxonomies$chemical <-\n  #   shiny::isolate(input$too_x)\n  # TODO\n  # yaml_advanced$units$rt <-\n  #   shiny::isolate(input$uni_rt)\n  yaml_advanced$weights$global$biological <-\n    shiny::isolate(input$wei_glo_bio)\n  yaml_advanced$weights$global$chemical <-\n    shiny::isolate(input$wei_glo_che)\n  yaml_advanced$weights$global$spectral <-\n    shiny::isolate(input$wei_glo_spe)\n  yaml_advanced$weights$biological$domain <-\n    shiny::isolate(input$wei_bio_01)\n  yaml_advanced$weights$biological$kingdom <-\n    shiny::isolate(input$wei_bio_02)\n  yaml_advanced$weights$biological$phylum <-\n    shiny::isolate(input$wei_bio_03)\n  yaml_advanced$weights$biological$class <-\n    shiny::isolate(input$wei_bio_04)\n  yaml_advanced$weights$biological$order <-\n    shiny::isolate(input$wei_bio_05)\n  yaml_advanced$weights$biological$infraorder <-\n    shiny::isolate(input$wei_bio_06)\n  yaml_advanced$weights$biological$family <-\n    shiny::isolate(input$wei_bio_07)\n  yaml_advanced$weights$biological$subfamily <-\n    shiny::isolate(input$wei_bio_08)\n  yaml_advanced$weights$biological$tribe <-\n    shiny::isolate(input$wei_bio_09)\n  yaml_advanced$weights$biological$subtribe <-\n    shiny::isolate(input$wei_bio_10)\n  yaml_advanced$weights$biological$genus <-\n    shiny::isolate(input$wei_bio_11)\n  yaml_advanced$weights$biological$subgenus <-\n    shiny::isolate(input$wei_bio_12)\n  yaml_advanced$weights$biological$species <-\n    shiny::isolate(input$wei_bio_13)\n  yaml_advanced$weights$biological$subspecies <-\n    shiny::isolate(input$wei_bio_14)\n  yaml_advanced$weights$biological$variety <-\n    shiny::isolate(input$wei_bio_15)\n  yaml_advanced$weights$chemical$cla$kingdom <-\n    shiny::isolate(input$wei_che_11)\n  yaml_advanced$weights$chemical$npc$pathway <-\n    shiny::isolate(input$wei_che_21)\n  yaml_advanced$weights$chemical$cla$superclass <-\n    shiny::isolate(input$wei_che_12)\n  yaml_advanced$weights$chemical$npc$superclass <-\n    shiny::isolate(input$wei_che_22)\n  yaml_advanced$weights$chemical$cla$class <-\n    shiny::isolate(input$wei_che_13)\n  yaml_advanced$weights$chemical$npc$class <-\n    shiny::isolate(input$wei_che_23)\n  yaml_advanced$weights$chemical$cla$parent <-\n    shiny::isolate(input$wei_che_14)\n  yaml_advanced$options$compounds_names <-\n    shiny::isolate(input$compounds_names)\n  yaml_advanced$options$nitrogen_rule <-\n    shiny::isolate(input$nitrogen_rule)\n  yaml_advanced$options$force <-\n    shiny::isolate(input$force)\n  yaml_advanced$options$remove_ties <-\n    shiny::isolate(input$remove_ties)\n  yaml_advanced$options$summarise <-\n    shiny::isolate(input$summarise)\n\n  if (!is.null(prefil_met_raw)) {\n    yamls_params$prepare_taxa$files$metadata$raw <- fil_met_raw\n  }\n  if (!is.null(gnps_job_id)) {\n    yamls_params$prepare_taxa$files$metadata$raw <-\n      file.path(paths_data_source, paste0(gnps_job_id, \"_metadata.tsv\"))\n  }\n\n  yaml::write_yaml(\n    x = yaml_advanced,\n    file = parse_yaml_paths()$params$prepare_params_advanced\n  )\n}\n\nserver <- function(input, output, session) {\n  ## Observe helpers\n  shinyhelper::observe_helpers()\n\n  ## Mandatory fields\n  fields_mandatory <- c(\"fil_fea_raw\", \"fil_spe_raw\", \"fil_pat\")\n\n  ## Enable the Submit button when all mandatory fields are filled out\n  shiny::observe(x = {\n    mandatory_filled <-\n      vapply(\n        X = fields_mandatory,\n        FUN = function(x) {\n          ## TODO improve\n          suppressWarnings(any(\n            !is.null(input[[x]]),\n            input[[x]] != \"\"\n          ))\n        },\n        FUN.VALUE = logical(1)\n      )\n    mandatory_filled <- all(mandatory_filled)\n\n    shinyjs::toggleState(id = \"save\", condition = mandatory_filled)\n    shinyjs::toggleState(id = \"launch\", condition = input$save >= 1)\n  })\n\n  ## Special check for taxon name\n  iv <- shinyvalidate::InputValidator$new()\n  iv$add_rule(\"org_tax\", function(taxon) {\n    if (!grepl(pattern = \"^[[:upper:]]\", x = taxon, perl = TRUE)) {\n      \"Please provide your taxon name with capital letter\"\n    }\n  })\n  iv$add_rule(\"org_tax\", function(taxon) {\n    if (is.na(rotl::tnrs_match_names(\n      names = taxon,\n      do_approximate_matching = FALSE\n    )$ott_id)) {\n      \"Taxon not found in Open Tree of Life\"\n    }\n  })\n  iv$enable()\n\n  ## When the Save button is clicked, save the response\n  shiny::observeEvent(\n    eventExpr = input$save,\n    handlerExpr = {\n      ## User-experience stuff\n      shinyjs::show(\"save_msg\")\n      shinyjs::enable(\"launch\")\n      shinyjs::hide(\"error\")\n\n      ## Save the data (show an error message in case of error)\n      tryCatch(\n        expr = {\n          save_input(input = input)\n          shinyjs::show(\"thankyou_msg\")\n        },\n        error = function(err) {\n          shinyjs::html(\"error_msg\", err$message)\n          shinyjs::show(\n            id = \"error\",\n            anim = TRUE,\n            animType = \"fade\"\n          )\n        },\n        finally = {\n          shinyjs::enable(\"save\")\n          shinyjs::enable(\"launch\")\n          shinyjs::hide(\"save_msg\")\n          shinyjs::hide(\"error\")\n        }\n      )\n    }\n  )\n\n  shiny::observeEvent(\n    eventExpr = input$launch,\n    handlerExpr = {\n      shinyjs::show(\"job_msg\")\n      shinyjs::hide(\"thankyou_msg\")\n      shinyjs::hide(\"error\")\n      shinyjs::hide(\"params\")\n      shinyjs::hide(\"form\")\n      tryCatch(expr = {\n        targets::tar_watch(\n          host = \"127.0.0.1\",\n          port = 3839,\n          display = \"graph\",\n          displays = c(\"summary\", \"graph\"),\n          level_separation = 300,\n          degree_from = 8,\n          outdated = FALSE,\n          targets_only = TRUE,\n          supervise = TRUE,\n          verbose = TRUE,\n          exclude = c(\n            \"yaml_paths\",\n            \"benchmark_ann_fil_ms1_neg\",\n            \"benchmark_ann_fil_ms1_pos\",\n            \"benchmark_ann_fil_spe_neg\",\n            \"benchmark_ann_fil_spe_pos\",\n            \"benchmark_ann_fil_spe_ms1_neg\",\n            \"benchmark_ann_fil_spe_ms1_pos\",\n            \"benchmark_ann_ms1_neg\",\n            \"benchmark_ann_ms2_pos\",\n            \"benchmark_ann_ms1_pre_neg\",\n            \"benchmark_ann_ms1_pre_pos\",\n            \"benchmark_ann_pre_ms1_ms2_b_c_neg\",\n            \"benchmark_ann_pre_ms1_ms2_b_c_pos\",\n            \"benchmark_ann_pre_ms1_ms2_b_neg\",\n            \"benchmark_ann_pre_ms1_ms2_b_pos\",\n            \"benchmark_ann_pre_ms2_b_c_neg\",\n            \"benchmark_ann_pre_ms2_b_c_pos\",\n            \"benchmark_ann_pre_ms2_b_neg\",\n            \"benchmark_ann_pre_ms2_b_pos\",\n            \"benchmark_ann_sir_pre\",\n            \"benchmark_ann_sir_pre_can\",\n            \"benchmark_ann_sir_pre_for\",\n            \"benchmark_ann_sir_pre_str\",\n            \"benchmark_ann_spe_neg\",\n            \"benchmark_ann_spe_pos\",\n            \"benchmark_ann_spe_pre_neg\",\n            \"benchmark_ann_spe_pre_pos\",\n            \"benchmark_com_neg\",\n            \"benchmark_com_pos\",\n            \"benchmark_com_pre_neg\",\n            \"benchmark_com_pre_pos\",\n            \"benchmark_converted\",\n            \"benchmark_copy\",\n            \"benchmark_def_ann_mas\",\n            \"benchmark_def_ann_spe\",\n            \"benchmark_def_cre_edg_com\",\n            \"benchmark_def_cre_edg_spe\",\n            \"benchmark_def_fil_ann\",\n            \"benchmark_def_pre_ann_sir\",\n            \"benchmark_def_pre_ann_spe\",\n            \"benchmark_def_pre_fea_com\",\n            \"benchmark_def_pre_fea_edg\",\n            \"benchmark_def_wei_ann\",\n            \"benchmark_edg_pre_neg\",\n            \"benchmark_edg_pre_pos\",\n            \"benchmark_edg_spe_neg\",\n            \"benchmark_edg_spe_pos\",\n            \"benchmark_file\",\n            \"benchmark_files_neg\",\n            \"benchmark_files_pos\",\n            \"benchmark_path_copy\",\n            \"benchmark_path_export\",\n            \"benchmark_path_mgf_neg\",\n            \"benchmark_path_mgf_pos\",\n            \"benchmark_path_url\",\n            \"benchmark_prepared\",\n            \"benchmark_pre_meta_neg\",\n            \"benchmark_pre_meta_pos\",\n            \"benchmark_pre_mgf_neg\",\n            \"benchmark_pre_mgf_pos\",\n            \"benchmark_taxed_neg\",\n            \"benchmark_taxed_pos\",\n            \"benchmark_wei_par\",\n            \"paths\",\n            \"paths_data_interim_libraries_adducts_path\",\n            \"paths_data_source_benchmark_copy\",\n            \"paths_data_source_benchmark_mgf_neg\",\n            \"paths_data_source_benchmark_mgf_pos\",\n            \"paths_data_source_benchmark_set\",\n            \"paths_data_source_libraries_sop_ecmdb\",\n            \"paths_data_source_libraries_sop_hmdb\",\n            \"paths_data_source_libraries_sop_lotus\",\n            \"paths_data_source_libraries_spectra_is_lotus_pos\",\n            \"paths_data_source_libraries_spectra_is_lotus_neg\",\n            \"paths_data_source_spectra\",\n            # \"paths_gnps_example_id\",\n            \"paths_interim_a\",\n            \"paths_interim_f\",\n            \"paths_source\",\n            \"paths_test_mode\",\n            \"paths_urls_benchmarking_set\",\n            \"paths_urls_ecmdb_metabolites\",\n            \"paths_urls_hmdb_structures\",\n            \"paths_urls_lotus_doi\",\n            \"paths_urls_lotus_pattern\",\n            \"paths_urls_massbank_file\",\n            \"paths_urls_massbank_url\",\n            \"paths_urls_massbank_version\",\n            \"paths_urls_examples_spectra_mini\",\n            \"paths_urls_examples_spectral_lib_pos\",\n            \"paths_urls_examples_spectral_lib_neg\",\n            \"par_def_ann_mas\",\n            \"par_def_ann_spe\",\n            \"par_def_cre_com\",\n            \"par_def_cre_edg_spe\",\n            \"par_def_fil_ann\",\n            \"par_def_pre_ann_gnp\",\n            \"par_def_pre_ann_sir\",\n            \"par_def_pre_ann_spe\",\n            \"par_def_pre_fea_com\",\n            \"par_def_pre_fea_edg\",\n            \"par_def_pre_fea_tab\",\n            \"par_def_pre_lib_add\",\n            \"par_def_pre_lib_rt\",\n            \"par_def_pre_lib_sop_clo\",\n            \"par_def_pre_lib_sop_ecm\",\n            \"par_def_pre_lib_sop_hmd\",\n            \"par_def_pre_lib_sop_lot\",\n            \"par_def_pre_lib_sop_mer\",\n            \"par_def_pre_lib_spe\",\n            \"par_def_pre_tax\",\n            \"par_def_wei_ann\",\n            \"par_fin_par\",\n            \"par_fin_par2\",\n            \"par_pre_par\",\n            \"par_pre_par2\",\n            \"par_usr_ann_mas\",\n            \"par_usr_ann_spe\",\n            \"par_usr_cre_com\",\n            \"par_usr_cre_edg_spe\",\n            \"par_usr_fil_ann\",\n            \"par_usr_pre_ann_gnp\",\n            \"par_usr_pre_ann_sir\",\n            \"par_usr_pre_ann_spe\",\n            \"par_usr_pre_fea_com\",\n            \"par_usr_pre_fea_edg\",\n            \"par_usr_pre_fea_tab\",\n            \"par_usr_pre_lib_add\",\n            \"par_usr_pre_lib_rt\",\n            \"par_usr_pre_lib_sop_clo\",\n            \"par_usr_pre_lib_sop_ecm\",\n            \"par_usr_pre_lib_sop_hmd\",\n            \"par_usr_pre_lib_sop_lot\",\n            \"par_usr_pre_lib_sop_mer\",\n            \"par_usr_pre_lib_spe\",\n            \"par_usr_pre_tax\",\n            \"par_usr_wei_ann\",\n            \"par_ann_mas\",\n            \"par_ann_spe\",\n            \"par_cre_com\",\n            \"par_cre_edg_spe\",\n            \"par_fil_ann\",\n            \"par_pre_ann_gnp\",\n            \"par_pre_ann_sir\",\n            \"par_pre_ann_spe\",\n            \"par_pre_fea_com\",\n            \"par_pre_fea_edg\",\n            \"par_pre_fea_tab\",\n            \"par_pre_lib_add\",\n            \"par_pre_lib_rt\",\n            \"par_pre_lib_sop_clo\",\n            \"par_pre_lib_sop_ecm\",\n            \"par_pre_lib_sop_hmd\",\n            \"par_pre_lib_sop_lot\",\n            \"par_pre_lib_sop_mer\",\n            \"par_pre_lib_spe\",\n            \"par_pre_tax\",\n            \"par_wei_ann\",\n            \".Random.seed\"\n          )\n        )\n        targets::tar_make(\n          names = targets::matches(\"^ann_pre$\"),\n          garbage_collection = TRUE,\n          reporter = \"verbose_positives\"\n        )\n      }, finally = {\n        shiny::stopApp()\n      })\n      process <-\n        shiny::reactiveValues(status = targets::tar_active())\n      shiny::observe({\n        shiny::invalidateLater(millis = 5000)\n        process$status <- targets::tar_active()\n      })\n\n      shiny::observeEvent(\n        eventExpr = process$status,\n        handlerExpr = {\n          message(\"Job finished\")\n          shiny::stopApp()\n        }\n      )\n    }\n  )\n}\nurl <- \"<http://127.0.0.1:3838>\"\nlog_debug(\"Please, open:\", url, \"on your favorite browser, but not Edge.\")\nshinyApp(\n  ui = ui,\n  server = server,\n  onStart = function() {\n    if (i_am_a_whale) {\n      message(\"I\\'m inside the matrix ;(\")\n      setwd(dir = \"..\")\n    } else {\n      cache <- fs::path_home(\".tima\")\n      fs::dir_create(cache)\n      message(\"Working in \", cache)\n      setwd(dir = cache)\n    }\n  }\n)\n","type":"text"},{"name":"CITATION","content":"citHeader(\"To cite timaR in publications use:\")\n\ncitEntry(\n  entry    = \"Article\",\n  title    = \"Taxonomically Informed Scoring Enhances Confidence in Natural Products Annotation\",\n  author   = personList(\n    person(given = \"Adriano\", family = \"Rutz\"),\n    person(given = \"Miwa\", family = \"Dounoue-Kubo\"),\n    person(given = \"Simon\", family = \"Ollivier\"),\n    person(given = \"Jonathan\", family = \"Bisson\"),\n    person(given = \"Mohsen\", family = \"Bagheri\"),\n    person(given = \"Tongchai\", family = \"Saesong\"),\n    person(given = \"Samad Nejad\", family = \"Ebrahimi\"),\n    person(given = \"Kornkanok\", family = \"Ingkaninan\"),\n    person(given = \"Jean-Luc\", family = \"Wolfender\"),\n    person(given = \"Pierre-Marie\", family = \"Allard\")),\n  journal  = \"Frontiers in Plant Science\",\n  year     = \"2019\",\n  volume   = \"10\",\n  url      = \"https://doi.org/10.3389/fpls.2019.01329\",\n  textVersion = paste(\n  \" Adriano Rutz; Miwa Dounoue-Kubo; Simon Ollivier; et al. (25 October 2019). Taxonomically Informed Scoring Enhances Confidence in Natural Products Annotation. Frontiers in Plant Science. 10: 1329. doi:10.3389/FPLS.2019.01329. ISSN 1664-462X. PMC 6824209. PMID 31708947. Wikidata Q91218352.\"\n  )\n)\n","type":"text"},{"name":"WORDLIST","content":"Adducts\nApocynaceae\nCarolin\nCFM\nCLI\nCMD\nCSI\nClassyfire\nCodecov\nCompoundDb\nCytoscape\nDOI\nECMDB\nFingerId\nGNPS\nGentianaceae\nHMDB\nISDB\nInChI\nInChIKey\nLifecycle\nMatchForwardReverseParam\nMassBank\nMassbank\nMGF\nMegaLinter\nMsCoreUtils\nMSP\nMZmine\nNPC\nNPClassifier\nOTT\nParam\nParams\nPeakData\nPre\nProgressor\nROTL\nReproducibility\nRforMassSpectrometry\nStravs\nSummarise\nTIMA\nTaxize\nTaxonomically\nWaystation\nYAML\nZenodo\nadduct\nadducts\napi\nase\nata\naxonomically\nbenchmarking\nbioconductor\ncanopus\ncli\ncsv\ndr\netabolite\nfastverse\nfbmn\ngithub\ngnps\ngsub\ngui\nhttps\nilico\ninbo\ninborutils\nio\njscpd\nlapply\nmetabo\nmgf\nmslevel\nmzs\nnavdist\nndotproduct\nneuclidean\nnformed\nnnotation\nnspectraangle\nott\nparallelization\nparams\npblapply\npbmclapply\npos\npre\nrenv\nreproducibility\nsanitization\nsilico\nsirius\nsqlite\nsummarise\ntaxo\ntidytable\ntidyverse\ntl\nusedist\nworkspaces\nxlogp\nyaml\n️\n","type":"text"},{"name":"extdata/adducts.tsv","content":"adduct\tmass\nH+ (proton)\t1.00728\nH4N+ (ammonium)\t18.03383\nF- (fluorine)\t18.99895\nNa+ (sodium)\t22.98922\nMg++ (magnesium)\t23.98449\nCl- (chlorine)\t34.96940\nK+ (potassium)\t38.96316\nCa++ (calcium)\t39.96204\nFe++ (iron)\t55.93439\nCu+ (copper)\t62.92905\nBr- (bromine)\t78.91889","type":"text"},{"name":"extdata/clusters.tsv","content":"cluster\tmass\nH2O (water)\t18.01056\nCH4O (methanol)\t32.02621\nC2H3N (acetonitrile)\t41.02655\nC2H7N (ethylamine)\t45.05785\nC2H6O (ethanol)\t46.04187\nCH2O2 (formic)\t46.00548\nNaCl (sodium chloride)\t57.95862\nC2H4O2 (acetic)\t60.02113\nC3H8O (isopropanol)\t60.05751\nC2H6OS (dmso)\t78.01394\nH2PO4 (phosphoric)\t96.96907\nC2HF3O2 (tfa)\t113.99286","type":"text"},{"name":"extdata/neutral_losses.tsv","content":"loss\tmass\nHN\t15.01090\nCH3\t15.02348\nO\t15.99491\nH3N (ammonia)\t17.02655\nH2O (water)\t18.01056\nCHN\t27.01090\nCO\t27.99491\nC2H4 (2xCH2)\t28.03130\nC2H5 (CH2-CH3)\t29.03913\nCH2O\t30.01056\nH5ON (H2O-H3N)\t35.03711\nH4O2 (2xH2O)\t36.02113\nC2H2O\t42.01056\nCHON\t43.00581\nCO2\t43.98983\nCHO2\t44.99765\nH6O3 (3xH2O)\t54.03169\nC2O2 (2xCO)\t55.98983\nCH6O3 (combination)\t66.03170\nH8O4 (4xH2O)\t72.04226\nC2H2O3 (CH2O-CO2)\t74.00039\nC3H6O2 (CH3-CH2-COOH)\t74.03678\nC3O3 (3xCO)\t83.98474\nC4H9NO (combination)\t87.06841\nC2O4 (2xCO2)\t87.97966\nC3H4O3 (pyruvic)\t88.01604\nC4H8O2 (butyric)\t88.05243\nC3H7NO2 (alanine)\t89.04768\nC3H6O3 (sugar)\t90.03169\nH2O4S (sulfuric)\t97.96738\nH3O4P (phosphoric)\t97.97690\nC5H10O2 (valeric)\t102.06808\nC3H4O4 (malonic)\t104.01096\nC2H2O5 (CO2-CO2-H2O)\t105.99022\nC3H8O4 (combination)\t108.04226\nC5H9NO2 (proline)\t115.06333\nC4O4H6 (CO2-CO2-CH3-CH3)\t118.02661\nC4H8O4 (sugar)\t120.04226\nC2H4O6 (CO2-CO2-H2O-H2O)\t124.00079\nC6H6O3 (HRF)\t126.03169\nC5H8O4 (pentose-H2O)\t132.04226\nC8H8O2 (RDA-1)\t136.05243\nC6H8O4 (HRF)\t144.04226\nC9H6O2 (coumaroyl)\t146.03678\nC6H10O4 (methylpentose/desoxyhexose-H2O)\t146.05791\nC9H8O2 (cinnamoyl)\t148.05243\nC7H4O4 (galloyl)\t152.01096\nC8H8O3 (RDA-2)\t152.04734\nC9H6O3 (caffeoyl)\t162.03169\nC6H10O5 (hexose-H2O)\t162.05282\nC8H8O4 (RDA-3)\t168.04226\nC8H10O4 (RDA-2-H2O)\t170.05791\nC6H8O6 (glucuronic-H2O)\t176.032090\nC10H8O3 (feruloyl)\t176.04734\nC6H13NO5 (hexose-H2N)\t179.07937\nC6H12O6 (hexose)\t180.06339\nC7H12O6 (quinoyl)\t192.06339\nC6H15NO6 (hexose-H2N-H2O)\t197.08994\nC6H14O7 (hexose-H2O)\t198.07395\nC8H12O6 (acetylhexose-H2O)\t204.06339\nC11H10O4 (sinapoyl)\t206.05791\nC16H30O (pamitoyl)\t238.22967\nC9H12O8 (malonylhexose)\t248.05322\nC13H14O6 (benzoylhexose)\t266.07904\nC12H20O8 (2xmethylpentose/desoxyhexose-H2O)\t292.11582\nC15H16O7 (coumaroylhexose)\t308.08960\nC13H14O9 (galloylhexose)\t314.06378\nC15H16O8 (caffeoylhexose)\t324.08452\nC12H20O10 (2xhexose-H2O)\t324.10565\nC16H18O8 (feruloylhexose)\t338.10017\nC17H20O9 (sinapoylhexose)\t368.11073\nC18H30O15 (3xhexose-H2O)\t486.15847","type":"text"},{"name":"extdata/paths.yaml","content":"---\nbase_dir: ./\ndata:\n  path: data\n  interim:\n    path: data/interim\n    annotations:\n      path: data/interim/annotations\n      example_sirius:\n        v5: data/interim/annotations/example_sirius_5.zip\n        v6: data/interim/annotations/example_sirius_6.zip\n    features:\n      path: data/interim/features\n    libraries:\n      path: data/interim/libraries\n      adducts:\n        path: data/interim/libraries/adducts\n        neg: data/interim/libraries/adducts/neg.tsv.gz\n        pos: data/interim/libraries/adducts/pos.tsv.gz\n      sop:\n        path: data/interim/libraries/sop\n        closed: data/interim/libraries/sop/closed_prepared.tsv.gz\n        hmdb: data/interim/libraries/sop/hmdb_prepared.tsv.gz\n        hmdb_minimal: data/interim/libraries/sop/hmdb_minimal.tsv.gz\n        lotus: data/interim/libraries/sop/lotus_prepared.tsv.gz\n        merged:\n          path: data/interim/libraries/sop/merged\n          keys: data/interim/libraries/sop/merged/keys.tsv.gz\n          organisms:\n            path: data/interim/libraries/sop/merged/organisms\n            names: data/interim/libraries/sop/merged/organisms/names.tsv.gz\n            taxonomies:\n              path: data/interim/libraries/sop/merged/organisms/taxonomies\n              ott: data/interim/libraries/sop/merged/organisms/taxonomies/ott.tsv.gz\n          structures:\n            path: data/interim/libraries/sop/merged/structures\n            stereo: data/interim/libraries/sop/merged/structures/stereo.tsv.gz\n            metadata: data/interim/libraries/sop/merged/structures/metadata.tsv.gz\n            names: data/interim/libraries/sop/merged/structures/names.tsv.gz\n            taxonomies:\n              path: data/interim/libraries/sop/merged/structures/taxonomies\n              cla: data/interim/libraries/sop/merged/structures/taxonomies/classyfire.tsv.gz\n              npc: data/interim/libraries/sop/merged/structures/taxonomies/npc.tsv.gz\n      spectra:\n        path: data/interim/libraries/spectra\n        exp:\n          path: data/interim/libraries/spectra/exp\n          mona:\n            pos: data/interim/libraries/spectra/exp/mona_pos.rds\n            neg: data/interim/libraries/spectra/exp/mona_neg.rds\n        is:\n          path: data/interim/libraries/spectra/is\n          hmdb:\n            pos: data/interim/libraries/spectra/is/hmdb_pos.rds\n            neg: data/interim/libraries/spectra/is/hmdb_neg.rds\n          lotus:\n            pos: data/interim/libraries/spectra/is/lotus_pos.rds\n            neg: data/interim/libraries/spectra/is/lotus_neg.rds\n    params:\n      path: data/interim/params\n    taxa:\n      path: data/interim/taxa\n  processed:\n    path: data/processed\n  source:\n    path: data/source\n    features: data/source/example_features.csv\n    metadata: data/source/example_metadata.tsv\n    spectra: data/source/example_spectra.mgf\n    benchmark:\n      path: data/source/benchmark\n      cleaned: data/interim/benchmark/cleaned_libraries_matchms/results_library_cleaning/cleaned_spectra.mgf\n      mgf:\n        neg: data/interim/benchmark/benchmark_neg.mgf\n        pos: data/interim/benchmark/benchmark_pos.mgf\n      zip: data/source/benchmark/cleaned_libraries_matchms.zip\n    libraries:\n      path: data/source/libraries\n      rt:\n        path: data/source/libraries/rt\n        example_mini: data/source/libraries/rt/example_lib_mini_rt.tsv\n      sop:\n        path: data/source/libraries/sop\n        closed: ../lotus-processor/data/processed/230224_closed_metadata.csv.gz\n        ecmdb: data/source/libraries/sop/ecmdb.json.zip\n        hmdb: data/source/libraries/sop/hmdb/structures.zip\n        lotus: data/source/libraries/sop/lotus.csv.gz\n      spectra:\n        path: data/source/libraries/spectra\n        exp:\n          path: data/source/libraries/spectra/exp\n          mona_lcmsms: data/source/libraries/spectra/exp/MoNA-export-LC-MS-MS_Spectra.sdf\n          with_rt: data/source/libraries/spectra/exp/spectral_lib_mini_with_rt.mgf\n        is:\n          hmdb: data/source/libraries/spectra/is/hmdb_predicted_msms_spectra.zip\n          lotus:\n            pos: data/source/libraries/spectra/is/isdb_pos.mgf\n            neg: data/source/libraries/spectra/is/isdb_neg.mgf\ndoc:\n  path: doc\nimg:\n  path: img\ninst:\n  path: inst\n  extdata:\n    path: inst/extdata\n    adducts: inst/extdata/adducts.tsv\n    neutral_losses: inst/extdata/neutral_losses.tsv\n  scripts:\n    path: inst/scripts\n    docopt:\n      path: inst/scripts/docopt\ngnps:\n  example: 41c6068e905d482db5698ad81d145d7c\n  example2: 958d60d32e0c43bc9a06798b744f41c7\nparams:\n  path: inst/params\n  default:\n    path: inst/params/default\n    annotate:\n      masses: inst/params/default/annotate_masses.yaml\n      spectra: inst/params/default/annotate_spectra.yaml\n    create:\n      components: inst/params/default/create_components.yaml\n      edges:\n        spectra: inst/params/default/create_edges_spectra.yaml\n    filter:\n      annotations: inst/params/default/filter_annotations.yaml\n    prepare:\n      features:\n        components: inst/params/default/prepare_features_components.yaml\n        edges: inst/params/default/prepare_features_edges.yaml\n        tables: inst/params/default/prepare_features_tables.yaml\n      libraries:\n        adducts: inst/params/default/prepare_libraries_adducts.yaml\n        rt: inst/params/default/prepare_libraries_rt.yaml\n        sop:\n          closed: inst/params/default/prepare_libraries_sop_closed.yaml\n          ecmdb: inst/params/default/prepare_libraries_sop_ecmdb.yaml\n          hmdb: inst/params/default/prepare_libraries_sop_hmdb.yaml\n          lotus: inst/params/default/prepare_libraries_sop_lotus.yaml\n          merged: inst/params/default/prepare_libraries_sop_merged.yaml\n        spectra: inst/params/default/prepare_libraries_spectra.yaml\n      annotations:\n        gnps: inst/params/default/prepare_annotations_gnps.yaml\n        sirius: inst/params/default/prepare_annotations_sirius.yaml\n        spectra: inst/params/default/prepare_annotations_spectra.yaml\n      taxa: inst/params/default/prepare_taxa.yaml\n    weight:\n      annotations: inst/params/default/weight_annotations.yaml\n  prepare_params: inst/params/prepare_params.yaml\n  prepare_params_advanced: inst/params/prepare_params_advanced.yaml\n  user:\n    path: inst/params/user\n    annotate:\n      masses: inst/params/user/annotate_masses.yaml\n      spectra: inst/params/user/annotate_spectra.yaml\n    create:\n      components: inst/params/user/create_components.yaml\n      edges:\n        spectra: inst/params/user/create_edges_spectra.yaml\n    filter:\n      annotations: inst/params/user/filter_annotations.yaml\n    prepare:\n      features:\n        components: inst/params/user/prepare_features_components.yaml\n        edges: inst/params/user/prepare_features_edges.yaml\n        tables: inst/params/user/prepare_features_tables.yaml\n      libraries:\n        adducts: inst/params/user/prepare_libraries_adducts.yaml\n        rt: inst/params/user/prepare_libraries_rt.yaml\n        sop:\n          closed: inst/params/user/prepare_libraries_sop_closed.yaml\n          ecmdb: inst/params/user/prepare_libraries_sop_ecmdb.yaml\n          hmdb: inst/params/user/prepare_libraries_sop_hmdb.yaml\n          lotus: inst/params/user/prepare_libraries_sop_lotus.yaml\n          merged: inst/params/user/prepare_libraries_sop_merged.yaml\n        spectra: inst/params/user/prepare_libraries_spectra.yaml\n      annotations:\n        gnps: inst/params/user/prepare_annotations_gnps.yaml\n        sirius: inst/params/user/prepare_annotations_sirius.yaml\n        spectra: inst/params/user/prepare_annotations_spectra.yaml\n      taxa: inst/params/user/prepare_taxa.yaml\n    weight:\n      annotations: inst/params/user/weight_annotations.yaml\ntests:\n  mode: no\n  path: tests\nurls:\n  benchmarking_set: https://zenodo.org/records/10160791/files/cleaned_libraries_matchms.zip?download=1\n  examples:\n    features: https://github.com/taxonomicallyinformedannotation/tima-example-files/raw/main/example_features.csv\n    lib_mini:\n      rt: https://github.com/taxonomicallyinformedannotation/tima-example-files/raw/main/example_lib_mini_rt.tsv\n    metadata: https://github.com/taxonomicallyinformedannotation/tima-example-files/raw/main/example_metadata.tsv\n    sirius:\n      v5: https://github.com/taxonomicallyinformedannotation/tima-example-files/raw/main/example_sirius_5.zip\n      v6: https://github.com/taxonomicallyinformedannotation/tima-example-files/raw/main/example_sirius_6.zip\n    spectra: https://github.com/taxonomicallyinformedannotation/tima-example-files/raw/main/example_spectra.mgf\n    spectra_mini: https://github.com/taxonomicallyinformedannotation/tima-example-files/raw/main/example_spectra_mini.mgf\n    spectra_ms1: https://github.com/taxonomicallyinformedannotation/tima-example-files/raw/main/example_spectra_ms1.mgf\n    spectral_lib:\n      neg: https://github.com/taxonomicallyinformedannotation/tima-example-files/raw/main/lotus_neg.rds\n      pos: https://github.com/taxonomicallyinformedannotation/tima-example-files/raw/main/lotus_pos.rds\n    spectral_lib_mini:\n      neg: https://github.com/taxonomicallyinformedannotation/tima-example-files/raw/main/spectral_lib_mini_neg.mgf\n      pos: https://github.com/taxonomicallyinformedannotation/tima-example-files/raw/main/spectral_lib_mini_pos.mgf\n      with_rt: https://github.com/taxonomicallyinformedannotation/tima-example-files/raw/main/spectral_lib_mini_with_rt.mgf\n  ecmdb:\n    metabolites: https://ecmdb.ca/download/ecmdb.json.zip\n  hmdb:\n    metabolites: https://hmdb.ca/system/downloads/current/hmdb_metabolites.zip\n    spectra:\n      predicted: https://hmdb.ca/system/downloads/current/spectral_data/spectra_xml/hmdb_predicted_msms_spectra.zip\n    structures: https://hmdb.ca/system/downloads/current/structures.zip\n  lotus:\n    doi: 10.5281/zenodo.5794106\n    pattern: frozen_metadata.csv.gz\n    metadata_doi: 10.5281/zenodo.6378223\n    metadata_pattern:\n      organisms: organism_metadata.tsv.gz\n      references: reference_metadata.tsv.gz\n      structures: structure_metadata.tsv.gz\n  lotus_isdb:\n    doi: 10.5281/zenodo.5607185\n    pattern:\n      pos: isdb_pos.mgf\n      neg: isdb_neg.mgf\n  massbank:\n    file: MassBank_NIST.msp\n    url: https://github.com/MassBank/MassBank-data/releases/download\n    version: 2024.06\n","type":"text"},{"name":"params/default/annotate_masses.yaml","content":"---\n#' Files.\nfiles:\n  #' Annotations files.\n  annotations:\n    #' List of prepared annotations.\n    prepared:\n      #' List of prepared structural annotations.\n      structural:\n        #' Prepared MS1 structural annotations. STRING\n        ms1: data/interim/annotations/example_ms1Prepared.tsv.gz\n\n  #' Features files.\n  features:\n    #' Prepared features file. STRING\n    prepared: data/interim/features/example_features.tsv.gz\n\n  #' Libraries files.\n  libraries:\n    #' Adducts libraries.\n    adducts:\n      #' Negative adducts. STRING\n      neg: data/interim/libraries/adducts/neg.tsv.gz\n\n      #' Positive adducts. STRING\n      pos: data/interim/libraries/adducts/pos.tsv.gz\n\n      #' Prepared adducts library. STRING\n      prepared: library\n\n    #' Structure organism pairs libraries.\n    sop:\n      #' Merged structure organism pairs library.\n      merged:\n        #' Merged structure organism pairs library keys. STRING\n        keys: data/interim/libraries/sop/merged/keys.tsv.gz\n\n        #' Structures libraries.\n        structures:\n          #' Structures stereo. STRING\n          stereo: data/interim/libraries/sop/merged/structures/stereo.tsv.gz\n\n          #' Structures metadata. STRING\n          metadata: data/interim/libraries/sop/merged/structures/metadata.tsv.gz\n\n          #' Structures names. STRING\n          names: data/interim/libraries/sop/merged/structures/names.tsv.gz\n\n          #' Structures taxonomies.\n          taxonomies:\n            #' Classyfire structures taxonomy. STRING\n            cla: data/interim/libraries/sop/merged/structures/taxonomies/classyfire.tsv.gz\n\n            #' NPClassifier structures taxonomy. STRING\n            npc: data/interim/libraries/sop/merged/structures/taxonomies/npc.tsv.gz\n\n  #' Networks files.\n  networks:\n    #' Spectral networks files.\n    spectral:\n      #' Edges files.\n      edges:\n        #' Raw edges file.\n        raw:\n          #' Raw ms1 edges file. STRING\n          ms1: data/interim/features/example_edgesMasses.tsv\n\n#' MS related parameters.\nms:\n  #' List of adducts to be used.\n  adducts:\n    #' List of adducts to be used in negative. STRING\n    neg:\n      - \"[1M-(H)3]3-\"\n      - \"[1M-(H)2]2-\"\n      - \"[1M-(H)1]1-\"\n      - \"[1M+(F)1]1-\"\n      - \"[1M+(Na)1-(H)2]1-\"\n      - \"[1M+(Cl)1]1-\"\n      - \"[1M+(K)1-(H)2]1-\"\n      - \"[1M+(Br)1]1-\"\n      - \"[2M-(H)1]1-\"\n      - \"[3M-(H)1]1-\"\n\n    #' List of adducts to be used in positive. STRING\n    pos:\n      - \"[1M+(H)3]3+\"\n      - \"[1M+(H)2(Na)1]3+\"\n      - \"[1M+(H)1(Na)2]3+\"\n      - \"[1M+(Na)3]3+\"\n      - \"[1M+(H)2]2+\"\n      - \"[1M+(H)1(Na)1]2+\"\n      - \"[1M+(Mg)1]2+\"\n      - \"[1M+(H)1(K)1]2+\"\n      - \"[1M+(Ca)1]2+\"\n      - \"[1M+(Na)2]2+\"\n      - \"[1M+(Fe)1]2+\"\n      - \"[1M+(H)1]1+\"\n      - \"[1M+(H)4(N)1]1+\"\n      - \"[1M+(Na)1]1+\"\n      - \"[1M+(K)1]1+\"\n      - \"[1M+(Cu)1]1+\"\n      - \"[2M+(Mg)1]2+\"\n      - \"[2M+(Ca)1]2+\"\n      - \"[2M+(Fe)1]2+\"\n      - \"[2M+(H)1]1+\"\n      - \"[2M+(H)4(N)1]1+\"\n      - \"[2M+(Na)1]1+\"\n      - \"[2M+(K)1]1+\"\n\n  #' List of clusters to be used.\n  clusters:\n    #' List of clusters to be used in negative. STRING\n    neg:\n      - H2O # (water)\n      - CH2O2 # (formic)\n      - NaCl # (sodium chloride)\n      - C2H4O2 # (acetic)\n      - H2PO4 # (phosphoric)\n      - C2HF3O2 # (tfa)\n\n    #' List of clusters to be used in positive. STRING\n    pos:\n      - H2O # (water)\n      # - CH4O # (methanol)\n      - C2H3N # (acetonitrile)\n      # - C2H7N # (ethylamine)\n      # - C2H6O # (ethanol)\n      - NaCl # (sodium chloride)\n      # - C3H8O # (isopropanol)\n      # - C2H6OS # (dmso)\n\n  #' Polarity used. Must be \"pos\" or \"neg\". STRING\n  polarity: pos\n\n  #' Tolerances.\n  tolerances:\n    #' For mass.\n    mass:\n      #' Relative in ppm.\n      ppm:\n        #' Relative mass tolerance for MS1 in ppm. FLOAT\n        ms1: 10\n\n      #' Absolute in Dalton.\n      dalton:\n        #' Absolute mass tolerance for MS1 in Dalton. FLOAT\n        ms1: 0.01\n\n    #' For retention time.\n    rt:\n      #' Retention time tolerance in minutes. FLOAT\n      minutes: 0.05\n\n  #' Thresholds related parameters.\n  thresholds:\n    #' MS1 related parameters.\n    ms1:\n      #' Intensity threshold for MS1. INTEGER\n      intensity: 1000000\n\n#' Names of the different variables in the input files.\nnames:\n  #' Name of \"source IDs\" variable in the input. STRING\n  source: CLUSTERID1\n\n  #' Name of \"target IDs\" variable in the input. STRING\n  target: CLUSTERID2\n\n#' Options.\noptions:\n  #' Do not use it. BOOLEAN\n  force: no\n\n  #' Nitrogen rule. BOOLEAN\n  nitrogen_rule: yes\n","type":"text"},{"name":"params/default/annotate_spectra.yaml","content":"---\n#' Annotations related parameters.\nannotations:\n  #' Perform approximative matching without precursor matching? BOOLEAN\n  ms2approx: no\n\n  #' Thresholds related parameters.\n  thresholds:\n    #' MS2 annotation related parameters.\n    ms2:\n      #' For similarity.\n      similarity:\n        #' For annotation. FLOAT\n        annotation: 0.0\n\n#' Files.\nfiles:\n  #' Annotations files.\n  annotations:\n    #' Raw annotations files.\n    raw:\n      #' List of spectral matching results.\n      spectral:\n        #' Spectral spectral matching results. STRING\n        spectral: data/interim/annotations/example_spectralMatches.tsv.gz\n\n  #' Libraries files.\n  libraries:\n    #' Spectral libraries. STRING\n    spectral:\n      #' Experimental libraries\n      exp:\n        #' List of negative experimental spectral libraries. STRING\n        neg:\n          - data/interim/libraries/spectra/exp/massbank_neg.rds\n\n        #' List of positive experimental spectral libraries. STRING\n        pos:\n          - data/interim/libraries/spectra/exp/massbank_pos.rds\n\n      #' In silico libraries\n      is:\n        #' List of negative in silico spectral libraries. STRING\n        neg:\n          - data/interim/libraries/spectra/is/lotus_neg.rds\n\n        #' List of positive in silico spectral libraries. STRING\n        pos:\n          - data/interim/libraries/spectra/is/lotus_pos.rds\n\n  #' Spectral files. STRING\n  spectral:\n    #' Raw spectral file. STRING\n    raw: data/source/example_spectra.mgf\n\n#' MS related parameters.\nms:\n  #' Thresholds related parameters.\n  thresholds:\n    #' MS2 related parameters.\n    ms2:\n      #' Intensity threshold for MS2. INTEGER\n      intensity: 5\n\n  #' Polarity used. Must be \"pos\" or \"neg\". STRING\n  polarity: pos\n\n  #' Tolerances.\n  tolerances:\n    #' For mass.\n    mass:\n      #' Relative in ppm.\n      ppm:\n        #' Relative mass tolerance for MS2 in ppm. FLOAT\n        ms2: 10\n\n      #' Absolute in Dalton.\n      dalton:\n        #' Absolute mass tolerance for MS2 in Dalton. FLOAT\n        ms2: 0.01\n","type":"text"},{"name":"params/default/create_components.yaml","content":"---\n#' Files.\nfiles:\n  #' Networks files.\n  networks:\n    #' Spectral networks files.\n    spectral:\n      #' Edges files.\n      edges:\n        #' Prepared edges file. STRING\n        prepared: data/interim/features/example_edges.tsv\n\n      #' Components files.\n      components:\n        #' Raw components file. STRING\n        raw: data/interim/features/example_components.tsv\n","type":"text"},{"name":"params/default/create_edges_spectra.yaml","content":"---\n#' Annotations related parameters.\nannotations:\n  #' Thresholds related parameters.\n  thresholds:\n    #' MS2 annotation related parameters.\n    ms2:\n      #' For similarity.\n      similarity:\n        #' For edges. FLOAT\n        edges: 0.7\n\n#' Files.\nfiles:\n  #' Networks files.\n  networks:\n    #' Spectral networks files.\n    spectral:\n      #' Edges files.\n      edges:\n        #' Raw edges file.\n        raw:\n          #' Raw spectral edges file. STRING\n          spectral: data/interim/features/example_edgesSpectra.tsv\n\n  #' Spectral files. STRING\n  spectral:\n    #' Raw spectral file. STRING\n    raw: data/source/example_spectra.mgf\n\n#' MS related parameters.\nms:\n  #' Thresholds related parameters.\n  thresholds:\n    #' MS2 related parameters.\n    ms2:\n      #' Intensity threshold for MS2. INTEGER\n      intensity: 5\n\n  #' Tolerances.\n  tolerances:\n    #' For mass.\n    mass:\n      #' Relative in ppm.\n      ppm:\n        #' Relative mass tolerance for MS2 in ppm. FLOAT\n        ms2: 10\n\n      #' Absolute in Dalton.\n      dalton:\n        #' Absolute mass tolerance for MS2 in Dalton. FLOAT\n        ms2: 0.01\n\n#' Names of the different variables in the input files.\nnames:\n  #' Name of \"source IDs\" variable in the input. STRING\n  source: CLUSTERID1\n\n  #' Name of \"target IDs\" variable in the input. STRING\n  target: CLUSTERID2\n","type":"text"},{"name":"params/default/filter_annotations.yaml","content":"---\n#' Files.\nfiles:\n  #' Annotations files.\n  annotations:\n    #' List of filtered annotations. STRING\n    filtered:\n      - data/interim/annotations/example_annotationsFiltered.tsv.gz\n\n    #' List of prepared annotations.\n    prepared:\n      #' List of prepared structural annotations.\n      structural:\n        #' Prepared GNPS structural annotations. STRING\n        gnps: data/interim/annotations/example_gnpsPrepared.tsv.gz\n        #' Prepared MS1 structural annotations. STRING\n        ms1: data/interim/annotations/example_ms1Prepared.tsv.gz\n        #' Prepared SIRIUS structural annotations. STRING\n        sirius: data/interim/annotations/example_siriusPrepared.tsv.gz\n        #' Prepared SPECTRAL structural annotations. STRING\n        spectral: data/interim/annotations/example_spectralMatchesPrepared.tsv.gz\n\n  #' Features files.\n  features:\n    #' Prepared features file. STRING\n    prepared: data/interim/features/example_features.tsv.gz\n\n  #' Libraries files.\n  libraries:\n    #' Temporal libraries. STRING\n    temporal:\n      #' List of prepared temporal libraries. STRING\n      prepared:\n        - data/interim/libraries/rt/prepared.tsv.gz\n\n#' MS related parameters.\nms:\n  #' Tolerances.\n  tolerances:\n    #' For retention time.\n    rt:\n      #' Retention time tolerance in minutes. FLOAT\n      minutes: 0.05\n\n#' Options.\noptions:\n  #' Nitrogen rule. BOOLEAN\n  nitrogen_rule: yes\n","type":"text"},{"name":"params/default/prepare_annotations_gnps.yaml","content":"---\n#' Files.\nfiles:\n  #' Annotations files.\n  annotations:\n    #' Raw annotations files.\n    raw:\n      #' List of spectral matching annotations.\n      spectral:\n        #' GNPS spectral matching annotations. STRING\n        gnps: data/interim/annotations/example_gnps.tsv\n\n    #' List of prepared annotations.\n    prepared:\n      #' List of prepared structural annotations.\n      structural:\n        #' Prepared GNPS structural annotations. STRING\n        gnps: data/interim/annotations/example_gnpsPrepared.tsv.gz\n\n  #' Libraries files.\n  libraries:\n    #' Structure organism pairs libraries.\n    sop:\n      #' Merged structure organism pairs library.\n      merged:\n        #' Structures libraries.\n        structures:\n          #' Structures stereo. STRING\n          stereo: data/interim/libraries/sop/merged/structures/stereo.tsv.gz\n\n          #' Structures metadata. STRING\n          metadata: data/interim/libraries/sop/merged/structures/metadata.tsv.gz\n\n          #' Structures names. STRING\n          names: data/interim/libraries/sop/merged/structures/names.tsv.gz\n\n          #' Structures taxonomies.\n          taxonomies:\n            #' Classyfire structures taxonomy. STRING\n            cla: data/interim/libraries/sop/merged/structures/taxonomies/classyfire.tsv.gz\n\n            #' NPClassifier structures taxonomy. STRING\n            npc: data/interim/libraries/sop/merged/structures/taxonomies/npc.tsv.gz\n","type":"text"},{"name":"params/default/prepare_annotations_sirius.yaml","content":"---\n#' Files.\nfiles:\n  #' Annotations files.\n  annotations:\n    #' Raw annotations files.\n    raw:\n      #' Directory containing the sirius annotations. STRING\n      sirius: data/interim/annotations/example_sirius\n\n    #' List of prepared annotations.\n    prepared:\n      #' List of prepared canopus annotations. STRING\n      canopus: data/interim/annotations/example_canopusPrepared.tsv.gz\n\n      #' List of prepared formula annotations. STRING\n      formula: data/interim/annotations/example_formulaPrepared.tsv.gz\n\n      #' List of prepared structural annotations.\n      structural:\n        #' Prepared SIRIUS structural annotations. STRING\n        sirius: data/interim/annotations/example_siriusPrepared.tsv.gz\n\n  #' Libraries files.\n  libraries:\n    #' Structure organism pairs libraries.\n    sop:\n      #' Merged structure organism pairs library.\n      merged:\n        #' Structures libraries.\n        structures:\n          #' Structures stereo. STRING\n          stereo: data/interim/libraries/sop/merged/structures/stereo.tsv.gz\n\n          #' Structures metadata. STRING\n          metadata: data/interim/libraries/sop/merged/structures/metadata.tsv.gz\n\n          #' Structures names. STRING\n          names: data/interim/libraries/sop/merged/structures/names.tsv.gz\n\n          #' Structures taxonomies.\n          taxonomies:\n            #' Classyfire structures taxonomy. STRING\n            cla: data/interim/libraries/sop/merged/structures/taxonomies/classyfire.tsv.gz\n\n            #' NPClassifier structures taxonomy. STRING\n            npc: data/interim/libraries/sop/merged/structures/taxonomies/npc.tsv.gz\n\n#' Tools used for each step.\ntools:\n  #' Sirius.\n  sirius:\n    #' Sirius version.\n    #' Currently only 5 or 6 supported. INTEGER\n    version: 6\n  #' Taxonomies related parameters.\n  taxonomies:\n    #' Chemical taxonomy used for matching.\n    #' Currently only \"npc\" or supported. STRING\n    chemical: npc\n","type":"text"},{"name":"params/default/prepare_annotations_spectra.yaml","content":"---\n#' Files.\nfiles:\n  #' Annotations files.\n  annotations:\n    #' Raw annotations files.\n    raw:\n      #' List of spectral matching annotations.\n      spectral:\n        #' Spectral spectral matching annotations. STRING\n        spectral: data/interim/annotations/example_spectralMatches.tsv.gz\n\n    #' List of prepared annotations.\n    prepared:\n      #' List of prepared structural annotations.\n      structural:\n        #' Prepared spectral structural annotations. STRING\n        spectral: data/interim/annotations/example_spectralMatchesPrepared.tsv.gz\n\n  #' Libraries files.\n  libraries:\n    #' Structure organism pairs libraries.\n    sop:\n      #' Merged structure organism pairs library.\n      merged:\n        #' Structures libraries.\n        structures:\n          #' Structures stereo. STRING\n          stereo: data/interim/libraries/sop/merged/structures/stereo.tsv.gz\n\n          #' Structures metadata. STRING\n          metadata: data/interim/libraries/sop/merged/structures/metadata.tsv.gz\n\n          #' Structures names. STRING\n          names: data/interim/libraries/sop/merged/structures/names.tsv.gz\n\n          #' Structures taxonomies.\n          taxonomies:\n            #' Classyfire structures taxonomy. STRING\n            cla: data/interim/libraries/sop/merged/structures/taxonomies/classyfire.tsv.gz\n\n            #' NPClassifier structures taxonomy. STRING\n            npc: data/interim/libraries/sop/merged/structures/taxonomies/npc.tsv.gz\n","type":"text"},{"name":"params/default/prepare_features_components.yaml","content":"---\n#' Files.\nfiles:\n  #' Networks files.\n  networks:\n    #' Spectral networks files.\n    spectral:\n      #' Components files.\n      components:\n        #' Raw components file. STRING\n        raw: data/interim/features/example_components.tsv\n\n        #' Prepared components file. STRING\n        prepared: data/interim/features/example_componentsPrepared.tsv\n","type":"text"},{"name":"params/default/prepare_features_edges.yaml","content":"---\n#' Files.\nfiles:\n  #' Networks files.\n  networks:\n    #' Spectral networks files.\n    spectral:\n      #' Edges files.\n      edges:\n        #' Raw edges file.\n        raw:\n          #' Raw ms1 edges file. STRING\n          ms1: data/interim/features/example_edgesMasses.tsv\n\n          #' Raw spectral edges file. STRING\n          spectral: data/interim/features/example_edgesSpectra.tsv\n\n        #' Prepared edges file. STRING\n        prepared: data/interim/features/example_edges.tsv\n\n#' Names of the different variables in the input files.\nnames:\n  #' Name of \"source IDs\" variable in the input. STRING\n  source: CLUSTERID1\n\n  #' Name of \"target IDs\" variable in the input. STRING\n  target: CLUSTERID2\n","type":"text"},{"name":"params/default/prepare_features_tables.yaml","content":"---\n#' Files.\nfiles:\n  #' Features files.\n  features:\n    #' Raw features file. STRING\n    raw: data/source/example_features.csv\n\n    #' Prepared features file. STRING\n    prepared: data/interim/features/example_features.tsv.gz\n\n#' Names of the different variables in the input files.\nnames:\n  #' Name of \"feature IDs\" variable in the input. STRING\n  features: row ID\n\n  #' Name of \"precursor m/z\" variable in the input. STRING\n  precursor: row m/z\n\n  #' Name of \"retention time\" variable.\n  rt: \n    #' Name of \"retention time\" variable in the feature table. STRING\n    features: row retention time\n","type":"text"},{"name":"params/default/prepare_libraries_adducts.yaml","content":"---\n#' Files.\nfiles:\n  #' Libraries files.\n  libraries:\n    #' Adducts libraries.\n    adducts:\n      #' Negative adducts. STRING\n      neg: data/interim/libraries/adducts/neg.tsv.gz\n\n      #' Positive adducts. STRING\n      pos: data/interim/libraries/adducts/pos.tsv.gz\n\n      #' Prepared adducts library. STRING\n      prepared: library\n\n    #' Structure organism pairs libraries.\n    sop:\n      #' Merged structure organism pairs library.\n      merged:\n        #' Structures libraries.\n        structures:\n          #' Structures metadata. STRING\n          metadata: data/interim/libraries/sop/merged/structures/metadata.tsv.gz\n","type":"text"},{"name":"params/default/prepare_libraries_rt.yaml","content":"---\n#' Files.\nfiles:\n  #' Libraries files.\n  libraries:\n    #' Structure organism pairs libraries.\n    sop:\n      #' List of prepared structure organism pairs libraries.\n      prepared:\n        #' RT prepared structure organism pairs libraries. STRING\n        rt: data/interim/libraries/sop/rt_prepared.tsv.gz\n\n    #' Temporal libraries. STRING\n    temporal:\n      #' List of experimental temporal libraries.\n      exp:\n        #' List of experimental temporal libraries (CSV). STRING\n        csv: ~\n\n        #' List of experimental temporal libraries (MGF).\n        mgf:\n          #' List of negative experimental temporal libraries (MGF). STRING\n          neg: [ ]\n\n          #' List of positive experimental temporal libraries (MGF). STRING\n          pos: [ ]\n\n      #' List of in silico temporal libraries.\n      is:\n        #' List of in silico temporal libraries (CSV). STRING\n        csv: ~\n\n        #' List of in silico temporal libraries (MGF).\n        mgf:\n          #' List of negative in silico temporal libraries (MGF). STRING\n          neg: [ ]\n\n          #' List of positive in silico temporal libraries (MGF). STRING\n          pos: [ ]\n\n      #' List of prepared temporal libraries. STRING\n      prepared:\n        - data/interim/libraries/rt/prepared.tsv.gz\n\n#' Names of the different variables in the input files.\nnames:\n  #' Name of \"InChIKey\" variable in the input. STRING\n  inchikey: inchikey\n\n  #' Name of fields present in the MGF.\n  mgf:\n    #' Name of \"InChIKey\" in MGF. STRING\n    inchikey: ~\n\n    #' Name of \"retention time\" in MGF. STRING\n    retention_time: RTINSECONDS\n\n    #' Name of \"SMILES\" in MGF. STRING\n    smiles: SMILES\n\n  #' Name of \"retention time\" variable.\n  rt: \n    #' Name of \"retention time\" variable in the library. STRING\n    library: rt\n\n  #' Name of \"SMILES\" variable in the input. STRING\n  smiles: smiles\n\n#' Units of the different variables in the input files.\nunits:\n  #' Unit of the \"retention time\" variable in the input files.\n  #' Must be \"seconds\" or \"minutes\". STRING\n  rt: seconds\n","type":"text"},{"name":"params/default/prepare_libraries_sop_closed.yaml","content":"---\n#' Files.\nfiles:\n  #' Libraries files.\n  libraries:\n    #' Structure organism pairs libraries.\n    sop:\n      #' Raw structure organism pairs libraries.\n      raw:\n        #' Closed structure organism pairs library. STRING\n        closed: ../lotus-processor/data/processed/230106_closed_metadata.csv.gz\n\n      #' List of prepared structure organism pairs libraries.\n      prepared:\n        #' Closed prepared structure organism pairs library. STRING\n        closed: data/interim/libraries/sop/closed_prepared.tsv.gz\n","type":"text"},{"name":"params/default/prepare_libraries_sop_ecmdb.yaml","content":"---\n#' Files.\nfiles:\n  #' Libraries files.\n  libraries:\n    #' Structure organism pairs libraries.\n    sop:\n      #' Raw structure organism pairs libraries.\n      raw:\n        #' ECMDB structure organism pairs library. STRING\n        ecmdb: data/source/libraries/sop/ecmdb.json.zip\n\n      #' List of prepared structure organism pairs libraries.\n      prepared:\n        #' ECMDB prepared structure organism pairs library. STRING\n        ecmdb: data/interim/libraries/sop/ecmdb_prepared.tsv.gz\n","type":"text"},{"name":"params/default/prepare_libraries_sop_hmdb.yaml","content":"---\n#' Files.\nfiles:\n  #' Libraries files.\n  libraries:\n    #' Structure organism pairs libraries.\n    sop:\n      #' Raw structure organism pairs libraries.\n      raw:\n        #' HMDB structure organism pairs library. STRING\n        hmdb: data/source/libraries/sop/hmdb/structures.zip\n\n      #' List of prepared structure organism pairs libraries.\n      prepared:\n        #' HMDB prepared structure organism pairs library. STRING\n        hmdb: data/interim/libraries/sop/hmdb_prepared.tsv.gz\n","type":"text"},{"name":"params/default/prepare_libraries_sop_lotus.yaml","content":"---\n#' Files.\nfiles:\n  #' Libraries files.\n  libraries:\n    #' Structure organism pairs libraries.\n    sop:\n      #' Raw structure organism pairs libraries.\n      raw:\n        #' Lotus raw structure organism pairs library. STRING\n        lotus: data/source/libraries/sop/lotus.csv.gz\n\n      #' List of prepared structure organism pairs libraries.\n      prepared:\n        #' Lotus prepared structure organism pairs library. STRING\n        lotus: data/interim/libraries/sop/lotus_prepared.tsv.gz\n","type":"text"},{"name":"params/default/prepare_libraries_sop_merged.yaml","content":"---\n#' Files.\nfiles:\n  #' Libraries files.\n  libraries:\n    #' Structure organism pairs libraries.\n    sop:\n      #' List of prepared structure organism pairs libraries.\n      prepared:\n        #' Closed prepared structure organism pairs library. STRING\n        closed: data/interim/libraries/sop/closed_prepared.tsv.gz\n        #' ECMDB prepared structure organism pairs library. STRING\n        ecmdb: data/interim/libraries/sop/ecmdb_prepared.tsv.gz\n        #' HMDB prepared structure organism pairs library. STRING\n        hmdb: data/interim/libraries/sop/hmdb_prepared.tsv.gz\n        #' Lotus prepared structure organism pairs library. STRING\n        lotus: data/interim/libraries/sop/lotus_prepared.tsv.gz\n        #' RT prepared structure organism pairs library. STRING\n        rt: data/interim/libraries/sop/rt_prepared.tsv.gz\n        #' Spectral prepared structure organism pairs library. STRING\n        spectral: data/interim/libraries/sop/spectral_prepared.tsv.gz\n\n      #' Merged structure organism pairs library.\n      merged:\n        #' Merged structure organism pairs library keys. STRING\n        keys: data/interim/libraries/sop/merged/keys.tsv.gz\n\n        #' Organisms libraries.\n        organisms:\n          #' Organisms names. STRING\n          names: data/interim/libraries/sop/merged/organisms/names.tsv.gz\n\n          #' Organisms taxonomies.\n          taxonomies:\n            #' OTT organisms taxonomy. STRING\n            ott: data/interim/libraries/sop/merged/organisms/taxonomies/ott.tsv.gz\n\n        #' Structures libraries.\n        structures:\n          #' Structures stereo. STRING\n          stereo: data/interim/libraries/sop/merged/structures/stereo.tsv.gz\n\n          #' Structures metadata. STRING\n          metadata: data/interim/libraries/sop/merged/structures/metadata.tsv.gz\n\n          #' Structures names. STRING\n          names: data/interim/libraries/sop/merged/structures/names.tsv.gz\n\n          #' Structures taxonomies.\n          taxonomies:\n            #' Classyfire structures taxonomy. STRING\n            cla: data/interim/libraries/sop/merged/structures/taxonomies/classyfire.tsv.gz\n\n            #' NPClassifier structures taxonomy. STRING\n            npc: data/interim/libraries/sop/merged/structures/taxonomies/npc.tsv.gz\n\n#' Organisms related parameters.\norganisms:\n  #' Organisms filter related parameters.\n  filter:\n    #' Filter library to restrict it to a portion of organisms only. BOOLEAN\n    mode: no\n\n    #' Level at which the library will be filtered.\n    #' Must be one of \"domain\", \"phylum\", \"class\", \"order\",\n    #' \"family\", \"tribe\", \"genus\", \"species\", \"varietas\" . STRING\n    level: phylum\n\n    #' Value to be applied for filtering.\n    #' \"OR\" can be used as \"|\".\n    # Example: \"Simaroubaceae|Gentianaceae\". STRING\n    value: Streptophyta\n","type":"text"},{"name":"params/default/prepare_libraries_spectra.yaml","content":"---\n#' Files.\nfiles:\n  #' Libraries files.\n  libraries:\n    #' Structure organism pairs libraries.\n    sop:\n      #' List of prepared structure organism pairs libraries.\n      prepared:\n        #' Spectral prepared structure organism pairs library. STRING\n        spectral: data/interim/libraries/sop/spectral_prepared.tsv.gz\n    #' Spectral libraries. STRING\n    spectral:\n      #' Experimental libraries\n      exp:\n        #' List of negative experimental spectral libraries. STRING\n        neg:\n          - data/interim/libraries/spectra/exp/massbank_neg.rds\n\n        #' List of positive experimental spectral libraries. STRING\n        pos:\n          - data/interim/libraries/spectra/exp/massbank_pos.rds\n\n        #' List of raw experimental spectral libraries. STRING\n        raw:\n          - data/source/libraries/spectra/exp/spectral_lib_mini_with_rt.mgf\n\n      #' In silico libraries\n      is:\n        #' List of negative in silico spectral libraries. STRING\n        neg:\n          - data/interim/libraries/spectra/is/lotus_neg.rds\n\n        #' List of positive in silico spectral libraries. STRING\n        pos:\n          - data/interim/libraries/spectra/is/lotus_pos.rds\n\n        #' List of raw in silico spectral libraries. STRING\n        raw:\n          - data/source/libraries/spectra/is/lotus_neg.rds\n          - data/source/libraries/spectra/is/lotus_pos.rds\n\n#' Names of the different variables in the input files.\nnames:\n  #' Name of fields present in the MGF.\n  mgf:\n    #' Name of \"collision energy\" in MGF. STRING\n    collision_energy: ~\n\n    #' Name of \"compound ID\" in MGF. STRING\n    compound_id: SPECTRUMID\n\n    #' Name of \"exact mass\" in MGF. STRING\n    exact_mass: EXACTMASS\n\n    #' Name of \"InChI\" in MGF. STRING\n    inchi: INCHI\n\n    #' Name of \"InChI without stereo\" in MGF. STRING\n    inchi_no_stereo: ~\n\n    #' Name of \"InChIKey\" in MGF. STRING\n    inchikey: ~\n\n    #' Name of \"InChIKey without stereo\" in MGF. STRING\n    inchikey_no_stereo: ~\n\n    #' Name of \"molecular formula\" in MGF. STRING\n    molecular_formula: ~\n\n    #' Name of \"name\" in MGF. STRING\n    name: ~\n\n    #' Name of \"polarity\" in MGF. STRING\n    polarity: IONMODE\n\n    #' Name of \"SMILES\" in MGF. STRING\n    smiles: SMILES\n\n    #' Name of \"SMILES without stereo\" in MGF. STRING\n    smiles_no_stereo: ~\n\n    #' Name of \"spectrum ID\" in MGF. STRING\n    spectrum_id: ~\n\n    #' Name of \"SPLASH\" in MGF. STRING\n    splash: ~\n\n    #' Name of \"synonyms\" in MGF. STRING\n    synonyms: ~\n\n    #' Name of \"xlogP\" in MGF. STRING\n    xlogp: ~\n","type":"text"},{"name":"params/default/prepare_taxa.yaml","content":"---\n#' Files.\nfiles:\n  #' Features files.\n  features:\n    #' Raw features file. STRING\n    raw: data/source/example_features.csv\n\n  #' Metadata files.\n  metadata:\n    #' The path to the file containing your metadata.\n    #' Must be formatted accordingly.\n    #' If your experiment contains a single taxon, you can provide it below instead. STRING\n    raw: data/source/example_metadata.tsv\n\n    #' Taxonomically informed features file. STRING\n    prepared: data/interim/taxa/example_taxed.tsv.gz\n\n  #' Libraries files.\n  libraries:\n    #' Structure organism pairs libraries.\n    sop:\n      #' Merged structure organism pairs library.\n      merged:\n        #' Organisms libraries.\n        organisms:\n          #' Organisms taxonomies.\n          taxonomies:\n            #' OTT organisms taxonomy. STRING\n            ott: data/interim/libraries/sop/merged/organisms/taxonomies/ott.tsv.gz\n\n#' Names of the different variables in the input files.\nnames:\n  #' The file(s) extension is present in the sample name. BOOLEAN\n  extension: yes\n\n  #' Name of \"feature IDs\" variable in the input. STRING\n  features: row ID\n\n  #' Name of \"filename\" variable in the input. STRING\n  filename: filename\n\n  #' Name of the \"taxon name\" variable in the input. STRING\n  taxon: ATTRIBUTE_species\n\n#' Organisms related parameters.\norganisms:\n  #' Number of organisms to keep per feature. INTEGER\n  candidates: 1\n\n  #' OPTIONAL. If your experiment contains a single taxon, its scientific name.\n  #' Else, you will need to provide a metadata file above.\n  #' If you provide both, this one will have priority.\n  #' Example: \"Homo sapiens\". STRING\n  taxon: ~\n","type":"text"},{"name":"params/default/weight_annotations.yaml","content":"---\n#' Annotations related parameters.\nannotations:\n  #' Number of candidates to keep per feature.\n  candidates:\n    #' Number of final candidates. INTEGER\n    final: 3\n\n  #' Erase MS2 results and keep MS1 only. BOOLEAN\n  ms1only: no\n\n  #' Thresholds related parameters.\n  thresholds:\n    #' Minimal consistency score (chemical) to consider a class. FLOAT\n    consistency: 0.0\n\n    #' MS1 annotation related parameters.\n    ms1:\n      #' Minimal biological score to keep MS1 only annotation. FLOAT\n      biological: 0.0\n\n      #' Minimal chemical score to keep MS1 only annotation. FLOAT\n      chemical: 0.0\n\n      #' Condition to be used to retain candidates.\n      #' Must be \"OR\" or \"AND\".\n      #' Example: Minimum 0.3 biological AND 0.3 chemical. STRING\n      condition: OR\n\n#' Files.\nfiles:\n  #' Pattern to identify the files. STRING\n  pattern: example\n\n  #' Annotations files.\n  annotations:\n    #' List of filtered annotations. STRING\n    filtered:\n      - data/interim/annotations/example_annotationsFiltered.tsv.gz\n\n    #' List of prepared annotations.\n    prepared:\n      #' List of prepared canopus annotations. STRING\n      canopus: data/interim/annotations/example_canopusPrepared.tsv.gz\n\n      #' List of prepared formula annotations. STRING\n      formula: data/interim/annotations/example_formulaPrepared.tsv.gz\n\n    #' Final results file. STRING\n    processed: annotations.tsv\n\n  #' Libraries files.\n  libraries:\n    #' Structure organism pairs libraries.\n    sop:\n      #' Merged structure organism pairs library.\n      merged:\n        #' Merged structure organism pairs library keys. STRING\n        keys: data/interim/libraries/sop/merged/keys.tsv.gz\n\n        #' Organisms libraries.\n        organisms:\n          #' Organisms taxonomies.\n          taxonomies:\n            #' OTT organisms taxonomy. STRING\n            ott: data/interim/libraries/sop/merged/organisms/taxonomies/ott.tsv.gz\n\n        #' Structures libraries.\n        structures:\n          #' Structures stereo. STRING\n          stereo: data/interim/libraries/sop/merged/structures/stereo.tsv.gz\n\n  #' Networks files.\n  networks:\n    #' Spectral networks files.\n    spectral:\n      #' Components files.\n      components:\n        #' Prepared edges file. STRING\n        prepared: data/interim/features/example_componentsPrepared.tsv\n\n      #' Edges files.\n      edges:\n        #' Prepared edges file. STRING\n        prepared: data/interim/features/example_edges.tsv\n\n  #' Metadata files.\n  metadata:\n    #' Taxonomically informed features file. STRING\n    prepared: data/interim/taxa/example_taxed.tsv.gz\n\n#' Weights to apply to each part of the final score.\nweights:\n  #' Global weights.\n  global:\n    #' Weight for the biological part. FLOAT\n    biological: 0.500\n\n    #' Weight for the chemical part. FLOAT\n    chemical: 0.166\n\n    #' Weight for the spectral part. FLOAT\n    spectral: 0.333\n\n  #' Weights for the biological part.\n  biological:\n    #' Score for a biological domain match. FLOAT\n    domain: 0.10\n\n    #' Score for a biological kingdom match. FLOAT\n    kingdom: 0.20\n\n    #' Score for a biological phylum match. FLOAT\n    phylum: 0.30\n\n    #' Score for a biological class match. FLOAT\n    class: 0.40\n\n    #' Score for a biological order match. FLOAT\n    order: 0.50\n\n    #' Score for a biological infraorder match. FLOAT\n    infraorder: 0.55\n\n    #' Score for a biological family match. FLOAT\n    family: 0.60\n\n    #' Score for a biological subfamily match. FLOAT\n    subfamily: 0.65\n\n    #' Score for a biological tribe match. FLOAT\n    tribe: 0.70\n\n    #' Score for a biological subtribe match. FLOAT\n    subtribe: 0.75\n\n    #' Score for a biological genus match. FLOAT\n    genus: 0.80\n\n    #' Score for a biological subgenus match. FLOAT\n    subgenus: 0.85\n\n    #' Score for a biological species match. FLOAT\n    species: 0.90\n\n    #' Score for a biological subspecies match. FLOAT\n    subspecies: 0.95\n\n    #' Score for a biological variety match. FLOAT\n    variety: 1.00\n\n  #' Weights for the chemical part.\n  chemical:\n    #' Score for a classyfire match.\n    cla:\n      #' Score for a chemical kingdom match. FLOAT\n      kingdom: 0.25\n\n      #' Score for a chemical superclass match. FLOAT\n      superclass: 0.50\n\n      #' Score for a chemical class match. FLOAT\n      class: 0.75\n\n      #' Score for a chemical parent match. FLOAT\n      parent: 1.00\n\n    #' Score for a NPClassifier match.\n    npc:\n      #' Score for a chemical kingdom match. FLOAT\n      pathway: 0.333\n\n      #' Score for a chemical superclass match. FLOAT\n      superclass: 0.666\n\n      #' Score for a chemical class match. FLOAT\n      class: 1.000\n\n#' Options.\noptions:\n  #' Report compounds names. Can be very large. BOOLEAN\n  compounds_names: no\n\n  #' Do not use it. BOOLEAN\n  force: no\n\n  #' Remove ties. BOOLEAN\n  remove_ties: no\n\n  #' Summarise results to one row per feature. BOOLEAN\n  summarise: no\n","type":"text"},{"name":"params/prepare_params.yaml","content":"---\nfiles:\n  #' The pattern identifying your whole job. You can put whatever you want. STRING\n  pattern: example\n  features:\n    #' The path to the file containing your features' intensities.\n    #' Can be generated by MZMine3 or SLAW. STRING\n    raw: data/source/example_features.csv\n  metadata:\n    #' The path to the file containing your metadata.\n    #' Must be formatted accordingly.\n    #' If your experiment contains a single taxon, you can provide it below instead. STRING\n    raw: data/source/example_metadata.tsv\n  spectral:\n    #' The path to the file containing your features' spectra.\n    #' Can contain MS1 and/or MS2 spectra. STRING\n    raw: data/source/example_spectra.mgf\n  #' Annotations files.\n  annotations:\n    raw:\n      #' Directory containing the sirius annotations. STRING\n      sirius: data/interim/annotations/example_sirius.zip\nms:\n  #' The polarity used. Must be either \"pos\" or \"neg\". STRING\n  polarity: pos\norganisms:\n  #' OPTIONAL. If your experiment contains a single taxon, its scientific name.\n  #' Else, you will need to provide a metadata file above.\n  #' If you provide both, this one will have priority.\n  #' Example: \"Homo sapiens\". STRING\n  taxon: ~\noptions:\n  #' Do you want to summarize all candidates per feature to a single row? BOOLEAN\n  summarise: no\n","type":"text"},{"name":"params/prepare_params_advanced.yaml","content":"---\n#' Annotations related parameters.\nannotations:\n  #' Number of candidates to keep per feature.\n  candidates:\n    #' Number of final candidates. INTEGER\n    final: 3\n\n  #' Erase MS2 results and keep MS1 only. BOOLEAN\n  ms1only: no\n\n  #' Perform approximative matching without precursor matching? BOOLEAN\n  ms2approx: no\n\n  #' Thresholds related parameters.\n  thresholds:\n    #' Minimal consistency score (chemical) to consider a class. FLOAT\n    consistency: 0.0\n\n    #' MS1 annotation related parameters.\n    ms1:\n      #' Minimal biological score to keep MS1 only annotation. FLOAT\n      biological: 0.0\n\n      #' Minimal chemical score to keep MS1 only annotation. FLOAT\n      chemical: 0.0\n\n      #' Condition to be used to retain candidates.\n      #' Must be \"OR\" or \"AND\".\n      #' Example: Minimum 0.3 biological AND 0.3 chemical. STRING\n      condition: OR\n\n    #' MS2 annotation related parameters.\n    ms2:\n      #' For similarity.\n      similarity:\n        #' For annotation. FLOAT\n        annotation: 0.0\n\n        #' For edges. FLOAT\n        edges: 0.7\n\n#' Files.\nfiles:\n  #' Pattern to identify the files. STRING\n  pattern: example\n\n  #' Annotations files.\n  annotations:\n    #' Raw annotations files.\n    raw:\n      #' List of spectral matching annotations.\n      spectral:\n        #' GNPS spectral matching annotations. STRING\n        gnps: data/interim/annotations/example_gnps.tsv\n\n        #' Spectral spectral matching annotations. STRING\n        spectral: data/interim/annotations/example_spectralMatches.tsv.gz\n\n      #' Directory containing the sirius annotations. STRING\n      sirius: data/interim/annotations/example_sirius\n\n    #' List of filtered annotations. STRING\n    filtered: data/interim/annotations/example_annotationsFiltered.tsv.gz\n\n    #' List of prepared annotations.\n    prepared:\n      #' List of prepared canopus annotations. STRING\n      canopus: data/interim/annotations/example_canopusPrepared.tsv.gz\n\n      #' List of prepared formula annotations. STRING\n      formula: data/interim/annotations/example_formulaPrepared.tsv.gz\n\n      #' List of prepared structural annotations.\n      structural:\n        #' Prepared GNPS structural annotations. STRING\n        gnps: data/interim/annotations/example_gnpsPrepared.tsv.gz\n\n        #' Prepared MS1 structural annotations. STRING\n        ms1: data/interim/annotations/example_ms1Prepared.tsv.gz\n\n        #' Prepared SIRIUS structural annotations. STRING\n        sirius: data/interim/annotations/example_siriusPrepared.tsv.gz\n\n        #' Prepared SPECTRAL structural annotations. STRING\n        spectral: data/interim/annotations/example_spectralMatchesPrepared.tsv.gz\n\n    #' Final results file. STRING\n    processed: example_results.tsv\n\n  #' Features files.\n  features:\n    #' Raw features file. STRING\n    raw: data/source/example_features.csv\n\n    #' Prepared features file. STRING\n    prepared: data/interim/features/example_features.tsv.gz\n\n  #' Libraries files.\n  libraries:\n    #' Adducts libraries.\n    adducts:\n      #' Negative adducts. STRING\n      neg: data/interim/libraries/adducts/neg.tsv.gz\n\n      #' Positive adducts library. STRING\n      pos: data/interim/libraries/adducts/pos.tsv.gz\n\n      #' Prepared adducts library. STRING\n      prepared: library\n\n    #' Structure organism pairs libraries.\n    sop:\n      #' Raw structure organism pairs libraries.\n      raw:\n        #' Closed structure organism pairs library. STRING\n        closed: ../lotus-processor/data/processed/230106_closed_metadata.csv.gz\n\n        #' ECMDB structure organism pairs library. STRING\n        ecmdb: data/source/libraries/sop/ecmdb.json.zip\n\n        #' HMDB structure organism pairs library. STRING\n        hmdb: data/source/libraries/sop/hmdb/structures.zip\n\n        #' Lotus raw structure organism pairs library. STRING\n        lotus: data/source/libraries/sop/lotus.csv.gz\n\n      #' List of prepared structure organism pairs libraries.\n      prepared:\n        #' Closed prepared structure organism pairs library. STRING\n        closed: data/interim/libraries/sop/closed_prepared.tsv.gz\n\n        #' ECMDB prepared structure organism pairs library. STRING\n        ecmdb: data/interim/libraries/sop/ecmdb_prepared.tsv.gz\n\n        #' HMDB prepared structure organism pairs library. STRING\n        hmdb: data/interim/libraries/sop/hmdb_prepared.tsv.gz\n\n        #' Lotus prepared structure organism pairs library. STRING\n        lotus: data/interim/libraries/sop/lotus_prepared.tsv.gz\n\n        #' RT prepared structure organism pairs library. STRING\n        rt: data/interim/libraries/sop/rt_prepared.tsv.gz\n\n        #' Spectral prepared structure organism pairs library. STRING\n        spectral: data/interim/libraries/sop/spectral_prepared.tsv.gz\n\n      #' Merged structure organism pairs library.\n      merged:\n        #' Merged structure organism pairs library keys. STRING\n        keys: data/interim/libraries/sop/merged/keys.tsv.gz\n\n        #' Organisms libraries.\n        organisms:\n          #' Organisms names. STRING\n          names: data/interim/libraries/sop/merged/organisms/names.tsv.gz\n\n          #' Organisms taxonomies.\n          taxonomies:\n            #' OTT organisms taxonomy. STRING\n            ott: data/interim/libraries/sop/merged/organisms/taxonomies/ott.tsv.gz\n\n        #' Structures libraries.\n        structures:\n          #' Structures stereo. STRING\n          stereo: data/interim/libraries/sop/merged/structures/stereo.tsv.gz\n\n          #' Structures metadata. STRING\n          metadata: data/interim/libraries/sop/merged/structures/metadata.tsv.gz\n\n          #' Structures names. STRING\n          names: data/interim/libraries/sop/merged/structures/names.tsv.gz\n\n          #' Structures taxonomies.\n          taxonomies:\n            #' Classyfire structures taxonomy. STRING\n            cla: data/interim/libraries/sop/merged/structures/taxonomies/classyfire.tsv.gz\n\n            #' NPClassifier structures taxonomy. STRING\n            npc: data/interim/libraries/sop/merged/structures/taxonomies/npc.tsv.gz\n\n    #' Spectral libraries. STRING\n    spectral:\n      #' Experimental libraries\n      exp:\n        #' List of negative experimental spectral libraries. STRING\n        neg:\n          - data/interim/libraries/spectra/exp/massbank_neg.rds\n\n        #' List of positive experimental spectral libraries. STRING\n        pos:\n          - data/interim/libraries/spectra/exp/massbank_pos.rds\n\n        #' List of raw experimental spectral libraries. STRING\n        raw: data/source/libraries/spectra/exp/spectral_lib_mini_with_rt.mgf\n\n      #' In silico libraries\n      is:\n        #' List of negative in silico spectral libraries. STRING\n        neg: data/interim/libraries/spectra/is/lotus_neg.rds\n\n        #' List of positive in silico spectral libraries. STRING\n        pos: data/interim/libraries/spectra/is/lotus_pos.rds\n\n        #' List of raw in silico spectral libraries. STRING\n        raw:\n          - data/source/libraries/spectra/is/lotus_neg.rds\n          - data/source/libraries/spectra/is/lotus_pos.rds\n\n    #' Temporal libraries. STRING\n    temporal:\n      #' List of experimental temporal libraries.\n      exp:\n        #' List of experimental temporal libraries (CSV). STRING\n        csv: ~\n\n        #' List of experimental temporal libraries (MGF).\n        mgf:\n          #' List of negative experimental temporal libraries (MGF). STRING\n          neg: [ ]\n\n          #' List of positive experimental temporal libraries (MGF). STRING\n          pos: [ ]\n\n      #' List of in silico temporal libraries. STRING\n      is:\n        #' List of in silico temporal libraries (CSV). STRING\n        csv: ~\n\n        #' List of in silico temporal libraries (MGF).\n        mgf:\n          #' List of negative in silico temporal libraries (MGF). STRING\n          neg: [ ]\n\n          #' List of positive in silico temporal libraries (MGF). STRING\n          pos: [ ]\n\n      #' List of prepared temporal libraries. STRING\n      prepared:\n        - data/interim/libraries/rt/prepared.tsv.gz\n\n  #' Networks files.\n  networks:\n    #' Spectral networks files.\n    spectral:\n      #' Edges files.\n      edges:\n        #' Raw edges file.\n        raw:\n          #' Raw ms1 edges file. STRING\n          ms1: data/interim/features/example_edgesMasses.tsv\n\n          #' Raw spectral edges file. STRING\n          spectral: data/interim/features/example_edgesSpectra.tsv\n\n        #' Prepared edges file. STRING\n        prepared: data/interim/features/example_edges.tsv\n\n      #' Components files.\n      components:\n        #' Raw components file. STRING\n        raw: data/interim/features/example_components.tsv\n\n        #' Prepared components file. STRING\n        prepared: data/interim/features/example_componentsPrepared.tsv\n\n  #' Metadata files.\n  metadata:\n    #' The path to the file containing your metadata.\n    #' Must be formatted accordingly.\n    #' If your experiment contains a single taxon, you can provide it below instead. STRING\n    raw: data/source/example_metadata.tsv\n\n    #' Taxonomically informed features file. STRING\n    prepared: data/interim/taxa/example_taxed.tsv.gz\n\n  #' Spectral files.\n  spectral:\n    #' Raw spectral file. STRING\n    raw: data/source/example_spectra.mgf\n\n#' GNPS related parameters.\ngnps:\n  #' GNPS job ID. STRING\n  id: 41c6068e905d482db5698ad81d145d7c\n\n  #' Workflow used within GNPS.\n  #' Currently \"fbmn\" or \"classical\" supported. STRING\n  workflow: fbmn\n\n#' MS related parameters.\nms:\n  #' List of adducts to be used.\n  adducts:\n    #' List of adducts to be used in negative. STRING\n    neg:\n      - \"[1M-(H)3]3-\"\n      - \"[1M-(H)2]2-\"\n      - \"[1M-(H)1]1-\"\n      - \"[1M+(F)1]1-\"\n      - \"[1M+(Na)1-(H)2]1-\"\n      - \"[1M+(Cl)1]1-\"\n      - \"[1M+(K)1-(H)2]1-\"\n      - \"[1M+(Br)1]1-\"\n      - \"[2M-(H)1]1-\"\n      - \"[3M-(H)1]1-\"\n\n    #' List of adducts to be used in positive. STRING\n    pos:\n      - \"[1M+(H)3]3+\"\n      - \"[1M+(H)2(Na)1]3+\"\n      - \"[1M+(H)1(Na)2]3+\"\n      - \"[1M+(Na)3]3+\"\n      - \"[1M+(H)2]2+\"\n      - \"[1M+(H)1(Na)1]2+\"\n      - \"[1M+(Mg)1]2+\"\n      - \"[1M+(H)1(K)1]2+\"\n      - \"[1M+(Ca)1]2+\"\n      - \"[1M+(Na)2]2+\"\n      - \"[1M+(Fe)1]2+\"\n      - \"[1M+(H)1]1+\"\n      - \"[1M+(H)4(N)1]1+\"\n      - \"[1M+(Na)1]1+\"\n      - \"[1M+(K)1]1+\"\n      - \"[1M+(Cu)1]1+\"\n      - \"[2M+(Mg)1]2+\"\n      - \"[2M+(Ca)1]2+\"\n      - \"[2M+(Fe)1]2+\"\n      - \"[2M+(H)1]1+\"\n      - \"[2M+(H)4(N)1]1+\"\n      - \"[2M+(Na)1]1+\"\n      - \"[2M+(K)1]1+\"\n\n  #' List of clusters to be used.\n  clusters:\n    #' List of clusters to be used in negative. STRING\n    neg:\n      - H2O # (water)\n      - CH2O2 # (formic)\n      - NaCl # (sodium chloride)\n      - C2H4O2 # (acetic)\n      - H2PO4 # (phosphoric)\n      - C2HF3O2 # (tfa)\n\n    #' List of clusters to be used in positive. STRING\n    pos:\n      - H2O # (water)\n      # - CH4O # (methanol)\n      - C2H3N # (acetonitrile)\n      # - C2H7N # (ethylamine)\n      # - C2H6O # (ethanol)\n      - NaCl # (sodium chloride)\n      # - C3H8O # (isopropanol)\n      # - C2H6OS # (dmso)\n\n  #' Thresholds related parameters.\n  thresholds:\n    #' MS1 related parameters.\n    ms1:\n      #' Intensity threshold for MS1. INTEGER\n      intensity: 1000000\n\n    #' MS2 related parameters.\n    ms2:\n      #' Intensity threshold for MS2. INTEGER\n      intensity: 5\n\n  #' Polarity used. Must be \"pos\" or \"neg\". STRING\n  polarity: pos\n\n  #' Tolerances.\n  tolerances:\n    #' For mass.\n    mass:\n      #' Relative in ppm.\n      ppm:\n        #' Relative mass tolerance for MS1 in ppm. FLOAT\n        ms1: 10\n\n        #' Relative mass tolerance for MS2 in ppm. FLOAT\n        ms2: 10\n\n      #' Absolute in Dalton.\n      dalton:\n        #' Absolute mass tolerance for MS1 in Dalton. FLOAT\n        ms1: 0.01\n\n        #' Absolute mass tolerance for MS2 in Dalton. FLOAT\n        ms2: 0.01\n\n    #' For retention time.\n    rt:\n      #' Retention time tolerance in minutes. FLOAT\n      minutes: 0.05\n\n#' Names of the different variables in the input files.\nnames:\n  #' The file(s) extension is present in the sample name. BOOLEAN\n  extension: yes\n\n  #' Name of \"feature IDs\" variable in the input. STRING\n  features: row ID\n\n  #' Name of \"filename\" variable in the input. STRING\n  filename: filename\n\n  #' Name of \"InChIKey\" variable in the input. STRING\n  inchikey: inchikey\n\n  #' Name of fields present in the MGF.\n  mgf:\n    #' Name of \"collision energy\" in MGF. STRING\n    collision_energy: ~\n\n    #' Name of \"compound ID\" in MGF. STRING\n    compound_id: SPECTRUMID\n\n    #' Name of \"exact mass\" in MGF. STRING\n    exact_mass: EXACTMASS\n\n    #' Name of \"InChI\" in MGF. STRING\n    inchi: INCHI\n\n    #' Name of \"InChI without stereo\" in MGF. STRING\n    inchi_no_stereo: ~\n\n    #' Name of \"InChIKey\" in MGF. STRING\n    inchikey: ~\n\n    #' Name of \"InChIKey without stereo\" in MGF. STRING\n    inchikey_no_stereo: ~\n\n    #' Name of \"molecular formula\" in MGF. STRING\n    molecular_formula: ~\n\n    #' Name of \"name\" in MGF. STRING\n    name: ~\n\n    #' Name of \"polarity\" in MGF. STRING\n    polarity: IONMODE\n\n    #' Name of \"retention time\" in MGF. STRING\n    retention_time: RTINSECONDS\n\n    #' Name of \"SMILES\" in MGF. STRING\n    smiles: SMILES\n\n    #' Name of \"SMILES without stereo\" in MGF. STRING\n    smiles_no_stereo: ~\n\n    #' Name of \"spectrum ID\" in MGF. STRING\n    spectrum_id: ~\n\n    #' Name of \"SPLASH\" in MGF. STRING\n    splash: ~\n\n    #' Name of \"synonyms\" in MGF. STRING\n    synonyms: ~\n\n    #' Name of \"xlogP\" in MGF. STRING\n    xlogp: ~\n\n  #' Name of \"precursor m/z\" variable in the input. STRING\n  precursor: row m/z\n\n  #' Name of \"retention time\" variable.\n  rt:\n    #' Name of \"retention time\" variable in the feature table. STRING\n    features: row retention time\n\n    #' Name of \"retention time\" variable in the library. STRING\n    library: rt\n\n  #' Name of \"SMILES\" variable in the input. STRING\n  smiles: smiles\n\n  #' Name of \"source IDs\" variable in the input. STRING\n  source: CLUSTERID1\n\n  #' Name of \"target IDs\" variable in the input. STRING\n  target: CLUSTERID2\n\n  #' Name of the \"taxon name\" variable in the input. STRING\n  taxon: ATTRIBUTE_species\n\n#' Organisms related parameters.\norganisms:\n  #' Number of organisms to keep per feature. INTEGER\n  candidates: 1\n\n  #' Organisms filter related parameters.\n  filter:\n    #' Filter library to restrict it to a portion of organisms only. BOOLEAN\n    mode: no\n\n    #' Level at which the library will be filtered.\n    #' Must be one of \"domain\", \"phylum\", \"class\", \"order\",\n    #' \"family\", \"tribe\", \"genus\", \"species\", \"varietas\" . STRING\n    level: phylum\n\n    #' Value to be applied for filtering.\n    #' \"OR\" can be used as \"|\".\n    # Example: \"Simaroubaceae|Gentianaceae\". STRING\n    value: Streptophyta\n\n  #' OPTIONAL. If your experiment contains a single taxon, its scientific name.\n  #' Else, you will need to provide a metadata file above.\n  #' If you provide both, this one will have priority.\n  #' Example: \"Homo sapiens\". STRING\n  taxon: ~\n\n#' Tools used for each step.\ntools:\n  #' Tool used to store metadata.\n  #' Currently \"gnps\" or \"manual\" supported. STRING\n  metadata: gnps\n\n  #' Networks related parameters.\n  networks:\n    #' Spectral networks related parameters.\n    spectral:\n      #' Tool used to generate components.\n      #' Currently \"gnps\" or \"manual\" supported. STRING\n      components: gnps\n\n      #' Tool used to generate edges.\n      #' Currently \"gnps\" or \"manual\" supported. STRING\n      edges: gnps\n\n  #' Sirius.\n  sirius:\n    #' Sirius version.\n    #' Currently only 5 or 6 supported. INTEGER\n    version: 6\n\n  #' Taxonomies related parameters.\n  taxonomies:\n    #' Biological taxonomy used for matching.\n    #' Currently only \"otl\" supported. STRING\n    biological: otl\n\n    #' Chemical taxonomy used for matching.\n    #' Currently only \"npc\" or supported. STRING\n    chemical: npc\n\n#' Units of the different variables in the input files.\nunits:\n  #' Unit of the \"retention time\" variable in the input files. STRING\n  rt: seconds\n\n#' Weights to apply to each part of the final score.\nweights:\n  #' Global weights.\n  global:\n    #' Weight for the biological part. FLOAT\n    biological: 0.500\n\n    #' Weight for the chemical part. FLOAT\n    chemical: 0.166\n\n    #' Weight for the spectral part. FLOAT\n    spectral: 0.333\n\n  #' Weights for the biological part.\n  biological:\n    #' Score for a biological domain match. FLOAT\n    domain: 0.10\n\n    #' Score for a biological kingdom match. FLOAT\n    kingdom: 0.20\n\n    #' Score for a biological phylum match. FLOAT\n    phylum: 0.30\n\n    #' Score for a biological class match. FLOAT\n    class: 0.40\n\n    #' Score for a biological order match. FLOAT\n    order: 0.50\n\n    #' Score for a biological infraorder match. FLOAT\n    infraorder: 0.55\n\n    #' Score for a biological family match. FLOAT\n    family: 0.60\n\n    #' Score for a biological subfamily match. FLOAT\n    subfamily: 0.65\n\n    #' Score for a biological tribe match. FLOAT\n    tribe: 0.70\n\n    #' Score for a biological subtribe match. FLOAT\n    subtribe: 0.75\n\n    #' Score for a biological genus match. FLOAT\n    genus: 0.80\n\n    #' Score for a biological subgenus match. FLOAT\n    subgenus: 0.85\n\n    #' Score for a biological species match. FLOAT\n    species: 0.90\n\n    #' Score for a biological subspecies match. FLOAT\n    subspecies: 0.95\n\n    #' Score for a biological variety match. FLOAT\n    variety: 1.00\n\n  #' Weights for the chemical part.\n  chemical:\n    #' Score for a classyfire match.\n    cla:\n      #' Score for a chemical kingdom match. FLOAT\n      kingdom: 0.25\n\n      #' Score for a chemical superclass match. FLOAT\n      superclass: 0.50\n\n      #' Score for a chemical class match. FLOAT\n      class: 0.75\n\n      #' Score for a chemical parent match. FLOAT\n      parent: 1.00\n\n    #' Score for a NPClassifier match.\n    npc:\n      #' Score for a chemical kingdom match. FLOAT\n      pathway: 0.333\n\n      #' Score for a chemical superclass match. FLOAT\n      superclass: 0.666\n\n      #' Score for a chemical class match. FLOAT\n      class: 1.000\n\n#' Options.\noptions:\n  #' Report compounds names. Can be very large. BOOLEAN\n  compounds_names: no\n\n  #' Do not use it. BOOLEAN\n  force: no\n\n  #' Nitrogen rule. BOOLEAN\n  nitrogen_rule: yes\n\n  #' Remove ties. BOOLEAN\n  remove_ties: no\n\n  #' Summarise results to one row per feature. BOOLEAN\n  summarise: no\n","type":"text"},{"name":"pipelines/_targets.R","content":"# Created by use_targets().\n# Follow the comments below to fill in this target script.\n# Then follow the manual to check and run the pipeline:\n#   https://books.ropensci.org/targets/walkthrough.html#inspect-the-pipeline # nolint\n\n# Load packages required to define the pipeline:\nlibrary(targets)\n\n# Set target options:\ntar_option_set(\n  packages = \"timaR\",\n  memory = \"transient\",\n  garbage_collection = TRUE,\n  resources = tar_resources(\n    qs = tar_resources_qs(preset = \"fast\")\n  )\n)\n\n# tar_make_clustermq() configuration (okay to leave alone):\n\n# tar_make_future() configuration (okay to leave alone):\n# Install packages {{future}}, {{future.callr}}, and {{future.batchtools}}\n# to allow use_targets() to configure tar_make_future() options.\n\n# Run the R scripts in the R/ folder with your custom functions:\ntar_source()\n\n# Replace the target list below with your own:\nlist(\n  ## Architecture\n  list( ## Paths\n    list(\n      tar_target(\n        name = yaml_paths,\n        format = \"file\",\n        command = {\n          yaml_paths <- system.file(\"extdata\", \"paths.yaml\", package = \"timaR\")\n        }\n      ),\n      tar_target(\n        name = paths,\n        command = {\n          paths <- parse_yaml_paths(file = yaml_paths)\n        }\n      ),\n      # tar_target(\n      #   name = paths_gnps_example_id,\n      #   command = {\n      #     paths_gnps_example_id <- paths$gnps$example\n      #   }\n      # ),\n      tar_target(\n        name = paths_source,\n        command = {\n          paths_source <- paths$data$source$path\n        }\n      ),\n      tar_target(\n        name = paths_interim_a,\n        command = {\n          paths_interim_a <- paths$data$interim$annotations$path\n        }\n      ),\n      tar_target(\n        name = paths_interim_f,\n        command = {\n          paths_interim_f <- paths$data$interim$features$path\n        }\n      ),\n      tar_target(\n        name = paths_test_mode,\n        command = {\n          paths_test_mode <- paths$tests$mode\n        }\n      ),\n      tar_target(\n        name = paths_urls_massbank_file,\n        command = {\n          paths_urls_massbank_file <- paths$urls$massbank$file\n        }\n      ),\n      tar_target(\n        name = paths_urls_massbank_url,\n        command = {\n          paths_urls_massbank_url <- paths$urls$massbank$url\n        }\n      ),\n      tar_target(\n        name = paths_urls_massbank_version,\n        command = {\n          paths_urls_massbank_version <- paths$urls$massbank$version\n        }\n      ),\n      tar_target(\n        name = paths_urls_examples_spectra_mini,\n        command = {\n          paths_urls_examples_spectra_mini <- paths$urls$examples$spectra_mini\n        }\n      ),\n      tar_target(\n        name = paths_data_source_spectra,\n        command = {\n          paths_data_source_spectra <- paths$data$source$spectra\n        }\n      ),\n      tar_target(\n        name = paths_urls_ecmdb_metabolites,\n        command = {\n          paths_urls_ecmdb_metabolites <- paths$urls$ecmdb$metabolites\n        }\n      ),\n      tar_target(\n        name = paths_data_source_libraries_sop_ecmdb,\n        command = {\n          paths_data_source_libraries_sop_ecmdb <-\n            paths$data$source$libraries$sop$ecmdb\n        }\n      ),\n      tar_target(\n        name = paths_urls_hmdb_structures,\n        command = {\n          paths_urls_hmdb_structures <- paths$urls$hmdb$structures\n        }\n      ),\n      tar_target(\n        name = paths_data_source_libraries_sop_hmdb,\n        command = {\n          paths_data_source_libraries_sop_hmdb <-\n            paths$data$source$libraries$sop$hmdb\n        }\n      ),\n      tar_target(\n        name = paths_urls_lotus_doi,\n        command = {\n          paths_urls_lotus_doi <- paths$urls$lotus$doi\n        }\n      ),\n      tar_target(\n        name = paths_urls_lotus_pattern,\n        command = {\n          paths_urls_lotus_pattern <- paths$urls$lotus$pattern\n        }\n      ),\n      tar_target(\n        name = paths_data_source_libraries_sop_lotus,\n        command = {\n          paths_data_source_libraries_sop_lotus <-\n            paths$data$source$libraries$sop$lotus\n        }\n      ),\n      tar_target(\n        name = paths_urls_examples_spectral_lib_pos,\n        command = {\n          paths_urls_examples_spectral_lib_pos <-\n            paths$urls$examples$spectral_lib$pos\n        }\n      ),\n      tar_target(\n        name = paths_data_source_libraries_spectra_is_lotus_pos,\n        command = {\n          paths_data_source_libraries_spectra_is_lotus_pos <-\n            paths$data$source$libraries$spectra$is$lotus$pos\n        }\n      ),\n      tar_target(\n        name = paths_urls_examples_spectral_lib_neg,\n        command = {\n          paths_urls_examples_spectral_lib_neg <-\n            paths$urls$examples$spectral_lib$neg\n        }\n      ),\n      tar_target(\n        name = paths_data_source_libraries_spectra_is_lotus_neg,\n        command = {\n          paths_data_source_libraries_spectra_is_lotus_neg <-\n            paths$data$source$libraries$spectra$is$lotus$neg\n        }\n      ),\n      tar_target(\n        name = paths_data_interim_libraries_adducts_path,\n        command = {\n          paths_data_interim_libraries_adducts_path <-\n            paths$data$interim$libraries$adducts$path\n        }\n      ),\n      tar_target(\n        name = paths_urls_benchmarking_set,\n        command = {\n          paths_urls_benchmarking_set <-\n            paths$urls$benchmarking_set\n        }\n      ),\n      tar_target(\n        name = paths_data_source_benchmark_set,\n        command = {\n          paths_data_source_benchmark_set <-\n            paths$data$source$benchmark$set\n        }\n      ),\n      tar_target(\n        name = paths_data_source_benchmark_copy,\n        command = {\n          paths_data_source_benchmark_copy <-\n            paths$data$source$benchmark$copy\n        }\n      ),\n      tar_target(\n        name = paths_data_source_benchmark_mgf_neg,\n        command = {\n          paths_data_source_benchmark_mgf_neg <-\n            paths$data$source$benchmark$mgf$neg\n        }\n      ),\n      tar_target(\n        name = paths_data_source_benchmark_mgf_pos,\n        command = {\n          paths_data_source_benchmark_mgf_pos <-\n            paths$data$source$benchmark$mgf$pos\n        }\n      )\n    ),\n    ## Dictionaries\n    list(\n      tar_target(\n        name = dic_add,\n        format = \"file\",\n        command = {\n          dic_add <- system.file(\"extdata\", \"adducts.tsv\", package = \"timaR\")\n        }\n      ),\n      tar_target(\n        name = dic_clu,\n        format = \"file\",\n        command = {\n          dic_clu <- system.file(\"extdata\",\n            \"clusters.tsv\",\n            package = \"timaR\"\n          )\n        }\n      ),\n      tar_target(\n        name = dic_neu_los,\n        format = \"file\",\n        command = {\n          dic_neu_los <- system.file(\"extdata\",\n            \"neutral_losses.tsv\",\n            package = \"timaR\"\n          )\n        }\n      )\n    )\n  ),\n  ## Params\n  list(\n    ## Default\n    list(\n      tar_target(\n        name = par_def_ann_mas,\n        format = \"file\",\n        command = {\n          par_def_ann_mas <- paths$params$default$annotate$masses\n        }\n      ),\n      tar_target(\n        name = par_def_ann_spe,\n        format = \"file\",\n        command = {\n          par_def_ann_spe <- paths$params$default$annotate$spectra\n        }\n      ),\n      tar_target(\n        name = par_def_cre_com,\n        format = \"file\",\n        command = {\n          par_def_cre_com <- paths$params$default$create$components\n        }\n      ),\n      tar_target(\n        name = par_def_cre_edg_spe,\n        format = \"file\",\n        command = {\n          par_def_cre_edg_spe <- paths$params$default$create$edges$spectra\n        }\n      ),\n      tar_target(\n        name = par_def_fil_ann,\n        format = \"file\",\n        command = {\n          par_def_fil_ann <-\n            paths$params$default$filter$annotations\n        }\n      ),\n      tar_target(\n        name = par_def_pre_ann_gnp,\n        format = \"file\",\n        command = {\n          par_def_pre_ann_gnp <- paths$params$default$prepare$annotations$gnps\n        }\n      ),\n      tar_target(\n        name = par_def_pre_ann_sir,\n        format = \"file\",\n        command = {\n          par_def_pre_ann_sir <-\n            paths$params$default$prepare$annotations$sirius\n        }\n      ),\n      tar_target(\n        name = par_def_pre_ann_spe,\n        format = \"file\",\n        command = {\n          par_def_pre_ann_spe <-\n            paths$params$default$prepare$annotations$spectra\n        }\n      ),\n      tar_target(\n        name = par_def_pre_fea_com,\n        format = \"file\",\n        command = {\n          par_def_pre_fea_com <-\n            paths$params$default$prepare$features$components\n        }\n      ),\n      tar_target(\n        name = par_def_pre_fea_edg,\n        format = \"file\",\n        command = {\n          par_def_pre_fea_edg <- paths$params$default$prepare$features$edges\n        }\n      ),\n      tar_target(\n        name = par_def_pre_fea_tab,\n        format = \"file\",\n        command = {\n          par_def_pre_fea_tab <- paths$params$default$prepare$features$tables\n        }\n      ),\n      tar_target(\n        name = par_def_pre_lib_add,\n        format = \"file\",\n        command = {\n          par_def_pre_lib_add <-\n            paths$params$default$prepare$libraries$adducts\n        }\n      ),\n      tar_target(\n        name = par_def_pre_lib_rt,\n        format = \"file\",\n        command = {\n          par_def_pre_lib_rt <-\n            paths$params$default$prepare$libraries$rt\n        }\n      ),\n      tar_target(\n        name = par_def_pre_lib_sop_clo,\n        format = \"file\",\n        command = {\n          par_def_pre_lib_sop_clo <-\n            paths$params$default$prepare$libraries$sop$closed\n        }\n      ),\n      tar_target(\n        name = par_def_pre_lib_sop_ecm,\n        format = \"file\",\n        command = {\n          par_def_pre_lib_sop_ecm <-\n            paths$params$default$prepare$libraries$sop$ecmdb\n        }\n      ),\n      tar_target(\n        name = par_def_pre_lib_sop_hmd,\n        format = \"file\",\n        command = {\n          par_def_pre_lib_sop_hmd <-\n            paths$params$default$prepare$libraries$sop$hmdb\n        }\n      ),\n      tar_target(\n        name = par_def_pre_lib_sop_lot,\n        format = \"file\",\n        command = {\n          par_def_pre_lib_sop_lot <-\n            paths$params$default$prepare$libraries$sop$lotus\n        }\n      ),\n      tar_target(\n        name = par_def_pre_lib_sop_mer,\n        format = \"file\",\n        command = {\n          par_def_pre_lib_sop_mer <-\n            paths$params$default$prepare$libraries$sop$merged\n        }\n      ),\n      tar_target(\n        name = par_def_pre_lib_spe,\n        format = \"file\",\n        command = {\n          par_def_pre_lib_spe <-\n            paths$params$default$prepare$libraries$spectra\n        }\n      ),\n      tar_target(\n        name = par_def_pre_tax,\n        format = \"file\",\n        command = {\n          par_def_pre_tax <- paths$params$default$prepare$taxa\n        }\n      ),\n      tar_target(\n        name = par_def_wei_ann,\n        format = \"file\",\n        command = {\n          par_def_wei_ann <- paths$params$default$weight$annotations\n        }\n      )\n    ),\n    list(\n      ## Prepare params\n      list(\n        tar_target(\n          name = par_pre_par,\n          format = \"file\",\n          command = {\n            par_pre_par <- paths$params$prepare_params\n          }\n        ),\n        tar_target(\n          name = par_pre_par2,\n          format = \"file\",\n          command = {\n            par_pre_par2 <- paths$params$prepare_params_advanced\n          }\n        ),\n        tar_target(\n          name = par_fin_par,\n          command = {\n            par_fin_par <- parse_yaml_params(\n              def = par_pre_par,\n              usr = par_pre_par\n            )\n          }\n        ),\n        tar_target(\n          name = par_fin_par2,\n          command = {\n            par_fin_par2 <- parse_yaml_params(\n              def = par_pre_par2,\n              usr = par_pre_par2\n            )\n          }\n        )\n      ),\n      ## User\n      list(\n        tar_target(\n          name = par_usr_ann_mas,\n          format = \"file\",\n          command = {\n            par_usr_ann_mas <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"annotate_masses\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_ann_spe,\n          format = \"file\",\n          command = {\n            par_usr_ann_spe <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"annotate_spectra\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_cre_com,\n          format = \"file\",\n          command = {\n            par_usr_cre_com <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"create_components\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_fil_ann,\n          format = \"file\",\n          command = {\n            par_usr_fil_ann <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"filter_annotations\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_cre_edg_spe,\n          format = \"file\",\n          command = {\n            par_usr_cre_edg_spe <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"create_edges_spectra\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_ann_gnp,\n          format = \"file\",\n          command = {\n            par_usr_pre_ann_gnp <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_annotations_gnps\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_ann_sir,\n          format = \"file\",\n          command = {\n            par_usr_pre_ann_sir <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_annotations_sirius\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_ann_spe,\n          format = \"file\",\n          command = {\n            par_usr_pre_ann_spe <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_annotations_spectra\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_fea_com,\n          format = \"file\",\n          command = {\n            par_usr_pre_fea_com <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_features_components\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_fea_edg,\n          format = \"file\",\n          command = {\n            par_usr_pre_fea_edg <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_features_edges\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_fea_tab,\n          format = \"file\",\n          command = {\n            par_usr_pre_fea_tab <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_features_tables\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_lib_add,\n          format = \"file\",\n          command = {\n            par_usr_pre_lib_add <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_libraries_adducts\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_lib_rt,\n          format = \"file\",\n          command = {\n            par_usr_pre_lib_rt <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_libraries_rt\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_lib_sop_clo,\n          format = \"file\",\n          command = {\n            par_usr_pre_lib_sop_clo <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_libraries_sop_closed\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_lib_sop_ecm,\n          format = \"file\",\n          command = {\n            par_usr_pre_lib_sop_ecm <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_libraries_sop_ecmdb\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_lib_sop_hmd,\n          format = \"file\",\n          command = {\n            par_usr_pre_lib_sop_hmd <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_libraries_sop_hmdb\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_lib_sop_lot,\n          format = \"file\",\n          command = {\n            par_usr_pre_lib_sop_lot <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_libraries_sop_lotus\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_lib_sop_mer,\n          format = \"file\",\n          command = {\n            par_usr_pre_lib_sop_mer <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_libraries_sop_merged\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_lib_spe,\n          format = \"file\",\n          command = {\n            par_usr_pre_lib_spe <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_libraries_spectra\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_pre_tax,\n          format = \"file\",\n          command = {\n            par_usr_pre_tax <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"prepare_taxa\"\n              )\n          }\n        ),\n        tar_target(\n          name = par_usr_wei_ann,\n          format = \"file\",\n          command = {\n            par_usr_wei_ann <-\n              prepare_params(\n                params_small = par_fin_par,\n                params_advanced = par_fin_par2,\n                step = \"weight_annotations\"\n              )\n          }\n        )\n      )\n    ),\n    ## Final\n    list(\n      tar_target(\n        name = par_ann_mas,\n        command = {\n          par_ann_mas <-\n            parse_yaml_params(\n              def = par_def_ann_mas,\n              usr = par_usr_ann_mas[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_ann_spe,\n        command = {\n          par_ann_spe <-\n            parse_yaml_params(\n              def = par_def_ann_spe,\n              usr = par_usr_ann_spe[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_cre_com,\n        command = {\n          par_cre_com <-\n            parse_yaml_params(\n              def = par_def_cre_com,\n              usr = par_usr_cre_com[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_cre_edg_spe,\n        command = {\n          par_cre_edg_spe <-\n            parse_yaml_params(\n              def = par_def_cre_edg_spe,\n              usr = par_usr_cre_edg_spe[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_fil_ann,\n        command = {\n          par_fil_ann <-\n            parse_yaml_params(\n              def = par_def_fil_ann,\n              usr = par_usr_fil_ann[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_ann_gnp,\n        command = {\n          par_pre_ann_gnp <-\n            parse_yaml_params(\n              def = par_def_pre_ann_gnp,\n              usr = par_usr_pre_ann_gnp[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_ann_sir,\n        command = {\n          par_pre_ann_sir <-\n            parse_yaml_params(\n              def = par_def_pre_ann_sir,\n              usr = par_usr_pre_ann_sir[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_ann_spe,\n        command = {\n          par_pre_ann_spe <-\n            parse_yaml_params(\n              def = par_def_pre_ann_spe,\n              usr = par_usr_pre_ann_spe[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_fea_com,\n        command = {\n          par_pre_fea_com <-\n            parse_yaml_params(\n              def = par_def_pre_fea_com,\n              usr = par_usr_pre_fea_com[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_fea_edg,\n        command = {\n          par_pre_fea_edg <-\n            parse_yaml_params(\n              def = par_def_pre_fea_edg,\n              usr = par_usr_pre_fea_edg[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_fea_tab,\n        command = {\n          par_pre_fea_tab <-\n            parse_yaml_params(\n              def = par_def_pre_fea_tab,\n              usr = par_usr_pre_fea_tab[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_lib_add,\n        command = {\n          par_pre_lib_add <-\n            parse_yaml_params(\n              def = par_def_pre_lib_add,\n              usr = par_usr_pre_lib_add[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_lib_rt,\n        command = {\n          par_pre_lib_rt <-\n            parse_yaml_params(\n              def = par_def_pre_lib_rt,\n              usr = par_usr_pre_lib_rt[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_lib_sop_clo,\n        command = {\n          par_pre_lib_sop_clo <-\n            parse_yaml_params(\n              def = par_def_pre_lib_sop_clo,\n              usr = par_usr_pre_lib_sop_clo[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_lib_sop_ecm,\n        command = {\n          par_pre_lib_sop_ecm <-\n            parse_yaml_params(\n              def = par_def_pre_lib_sop_ecm,\n              usr = par_usr_pre_lib_sop_ecm[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_lib_sop_hmd,\n        command = {\n          par_pre_lib_sop_hmd <-\n            parse_yaml_params(\n              def = par_def_pre_lib_sop_hmd,\n              usr = par_usr_pre_lib_sop_hmd[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_lib_sop_lot,\n        command = {\n          par_pre_lib_sop_lot <-\n            parse_yaml_params(\n              def = par_def_pre_lib_sop_lot,\n              usr = par_usr_pre_lib_sop_lot[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_lib_sop_mer,\n        command = {\n          par_pre_lib_sop_mer <-\n            parse_yaml_params(\n              def = par_def_pre_lib_sop_mer,\n              usr = par_usr_pre_lib_sop_mer[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_lib_spe,\n        command = {\n          par_pre_lib_spe <-\n            parse_yaml_params(\n              def = par_def_pre_lib_spe,\n              usr = par_usr_pre_lib_spe[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_pre_tax,\n        command = {\n          par_pre_tax <-\n            parse_yaml_params(\n              def = par_def_pre_tax,\n              usr = par_usr_pre_tax[1]\n            )\n        }\n      ),\n      tar_target(\n        name = par_wei_ann,\n        command = {\n          par_wei_ann <-\n            parse_yaml_params(\n              def = par_def_wei_ann,\n              usr = par_usr_wei_ann[1]\n            )\n        }\n      )\n    )\n  ),\n  # ## GNPS\n  # list(\n  #   tar_target(\n  #     name = gnps_tables,\n  #     format = \"file\",\n  #     command = {\n  #       gnps_tables <- get_gnps_tables(\n  #         gnps_job_id = par_fin_par$gnps$id,\n  #         gnps_job_example = paths_gnps_example_id,\n  #         filename = par_fin_par$files$pattern,\n  #         workflow = par_fin_par$gnps$workflow,\n  #         path_features = par_pre_fea_tab$files$features$raw,\n  #         path_metadata = par_pre_tax$files$metadata$raw,\n  #         path_spectra = par_ann_spe$files$spectral$raw,\n  #         path_source = paths_source,\n  #         path_interim_a = paths_interim_a,\n  #         path_interim_f = paths_interim_f\n  #       )\n  #     }\n  #   ),\n  #   list(\n  #     tar_target(\n  #       name = gnps_features,\n  #       format = \"file\",\n  #       command = {\n  #         gnps_features <- gnps_tables[[1]]\n  #       }\n  #     ),\n  #     tar_target(\n  #       name = gnps_metadata,\n  #       format = \"file\",\n  #       command = {\n  #         gnps_metadata <- gnps_tables[[2]]\n  #       }\n  #     ),\n  #     tar_target(\n  #       name = gnps_spectra,\n  #       format = \"file\",\n  #       command = {\n  #         gnps_spectra <- gnps_tables[[3]]\n  #       }\n  #     ),\n  #     # TODO think to change this also if uncommenting\n  #     tar_target(\n  #       name = gnps_annotations,\n  #       format = \"file\",\n  #       command = {\n  #         gnps_annotations <- gnps_tables[[4]]\n  #       }\n  #     ),\n  #     tar_target(\n  #       name = gnps_components,\n  #       format = \"file\",\n  #       command = {\n  #         gnps_components <- gnps_tables[[5]]\n  #       }\n  #     ),\n  #     tar_target(\n  #       name = gnps_edges,\n  #       format = \"file\",\n  #       command = {\n  #         gnps_edges <- gnps_tables[[6]]\n  #       }\n  #     )\n  #   )\n  # ),\n  ## Inputs\n  list(\n    tar_target(\n      name = input_features,\n      format = \"file\",\n      command = {\n        input_features <- par_pre_tax$files$features$raw\n        # input_features <-\n        #   ifelse(\n        #     test = !is.null(gnps_features),\n        #     yes = ifelse(test = file.exists(gnps_features),\n        #       yes = gnps_features,\n        #       no = par_pre_tax$files$features$raw\n        #     ),\n        #     no = par_pre_tax$files$features$raw\n        #   )\n      }\n    ),\n    tar_target(\n      name = input_spectra,\n      format = \"file\",\n      command = {\n        input_spectra <-\n          ifelse(\n            test = paths_test_mode == FALSE,\n            yes = par_ann_spe$files$spectral$raw,\n            # yes = ifelse(\n            #   test = !is.null(gnps_spectra),\n            #   yes =\n            #     ifelse(\n            #       test = file.exists(gnps_spectra),\n            #       yes = gnps_spectra,\n            #       no = par_ann_spe$files$spectral$raw\n            #     ),\n            #   no = par_ann_spe$files$spectral$raw\n            # ),\n            no = {\n              get_file(\n                url = paths_urls_examples_spectra_mini,\n                export = paths_data_source_spectra\n              )\n            }\n          )\n      }\n    ),\n    tar_target(\n      name = input_metadata,\n      format = \"file\",\n      command = {\n        input_metadata <- par_pre_tax$files$metadata$raw\n        # input_metadata <-\n        #   ifelse(\n        #     test = !is.null(gnps_metadata),\n        #     yes = ifelse(test = file.exists(gnps_metadata),\n        #       yes = gnps_metadata,\n        #       no = par_pre_tax$files$metadata$raw\n        #     ),\n        #     no = par_pre_tax$files$metadata$raw\n        #   )\n      }\n    )\n  ),\n  ## libraries\n  list(\n    ## Spectra\n    list( ## In silico\n      list( ## Raw\n        list(\n          ## TODO ADD ISDB HMDB,\n          tar_target(\n            name = lib_spe_is_lot_pos,\n            format = \"file\",\n            command = {\n              lib_spe_is_lot_pos <-\n                # if (paths_test_mode == FALSE) {\n                get_file(\n                  url = paths_urls_examples_spectral_lib_pos,\n                  export = paths_data_source_libraries_spectra_is_lotus_pos |>\n                    gsub(\n                      pattern = \"isdb_pos.mgf\",\n                      replacement = \"lotus_pos.rds\",\n                      fixed = TRUE\n                    )\n                )\n              # get_last_version_from_zenodo(\n              #   doi = paths_urls_lotus_isdb_doi,\n              #   pattern = paths_urls_lotus_isdb_pattern_pos,\n              #   path = paths_data_source_libraries_spectra_is_lotus_pos\n              # )\n              # } else {\n              #   get_file(\n              #     url = paths_urls_examples_spectral_lib_pos,\n              #     export = paths_data_source_libraries_spectra_is_lotus_pos\n              #   )\n              # }\n            }\n            ## To always check if a newest version is available\n            ,\n            cue = tar_cue(mode = \"always\")\n            # cue = tar_cue(mode = \"thorough\")\n          ),\n          tar_target(\n            name = lib_spe_is_lot_neg,\n            format = \"file\",\n            command = {\n              lib_spe_is_lot_neg <-\n                # if (paths_test_mode == FALSE) {\n                get_file(\n                  url = paths_urls_examples_spectral_lib_neg,\n                  export = paths_data_source_libraries_spectra_is_lotus_neg |>\n                    gsub(\n                      pattern = \"isdb_neg.mgf\",\n                      replacement = \"lotus_neg.rds\",\n                      fixed = TRUE\n                    )\n                )\n              # get_last_version_from_zenodo(\n              #   doi = paths_urls_lotus_isdb_doi,\n              #   pattern = paths_urls_lotus_isdb_pattern_neg,\n              #   path = paths_data_source_libraries_spectra_is_lotus_neg\n              # )\n              # } else {\n              #   get_file(\n              #     url = paths_urls_examples_spectral_lib_neg,\n              #     export = paths_data_source_libraries_spectra_is_lotus_neg\n              #   )\n              # }\n            }\n            ## To always check if a newest version is available\n            ,\n            cue = tar_cue(mode = \"always\")\n            # cue = tar_cue(mode = \"thorough\")\n          )\n        )\n      ),\n      ## Prepared\n      list(\n        ## TODO ADD IS HMDB PREPARED,\n        tar_target(\n          name = lib_spe_is_lot_pre_pos,\n          format = \"file\",\n          command = {\n            lib_spe_is_lot_pre_pos <-\n              lib_spe_is_lot_pos\n          }\n        ),\n        tar_target(\n          name = lib_spe_is_lot_pre_neg,\n          format = \"file\",\n          command = {\n            lib_spe_is_lot_pre_neg <-\n              lib_spe_is_lot_neg\n          }\n        )\n      ),\n      ## Experimental\n      list(\n        ## RAW\n        list(\n          ### Internal\n          ## This does not work as it forces the file to exist.\n          ## So targets will not check if the input file changed automatically.\n          # tar_target(\n          #   name = lib_spe_exp_int_raw,\n          # .  format = \"file\",\n          #   command = {\n          #     lib_spe_exp_int_raw <-\n          #       par_pre_lib_spe$files$libraries$spectral$exp$raw\n          #   }\n          # ),\n          ### MassBank\n          tar_target(\n            name = lib_spe_exp_mb_raw,\n            format = \"file\",\n            command = {\n              lib_spe_exp_mb_raw <- get_massbank_spectra(\n                mb_file = paths_urls_massbank_file,\n                mb_url = paths_urls_massbank_url,\n                mb_version = paths_urls_massbank_version\n              )\n            }\n          )\n        ),\n        ## Prepared\n        list(\n          tar_target(\n            name = lib_spe_exp_int_pre,\n            format = \"file\",\n            command = {\n              lib_spe_exp_int_pre <-\n                prepare_libraries_spectra(\n                  input = par_pre_lib_spe$files$libraries$spectral$exp$raw,\n                  output_pos = \"data/interim/libraries/spectra/exp/internal_pos.rds\",\n                  output_neg = \"data/interim/libraries/spectra/exp/internal_neg.rds\",\n                  output_sop = \"data/interim/libraries/sop/spectral_int_prepared.tsv.gz\",\n                  metad = \"InternalLib\",\n                  col_ce = NULL,\n                  col_ci = \"FILENAME\",\n                  col_em = \"EXACTMASS\",\n                  col_in = \"INCHI\",\n                  col_io = NULL,\n                  col_ik = NULL,\n                  col_il = NULL,\n                  col_mf = NULL,\n                  col_na = \"NAME\",\n                  col_po = \"IONMODE\",\n                  col_sm = \"SMILES\",\n                  col_sn = NULL,\n                  col_si = \"SPECTRUMID\",\n                  col_sp = NULL,\n                  col_sy = NULL,\n                  col_xl = NULL\n                )\n            }\n          ),\n          tar_target(\n            name = lib_spe_exp_int_pre_pos,\n            format = \"file\",\n            command = {\n              lib_spe_exp_int_pre_pos <- lib_spe_exp_int_pre[[1]]\n            }\n          ),\n          tar_target(\n            name = lib_spe_exp_int_pre_neg,\n            format = \"file\",\n            command = {\n              lib_spe_exp_int_pre_neg <- lib_spe_exp_int_pre[[2]]\n            }\n          ),\n          tar_target(\n            name = lib_spe_exp_int_pre_sop,\n            format = \"file\",\n            command = {\n              lib_spe_exp_int_pre_sop <- lib_spe_exp_int_pre[[3]]\n            }\n          ),\n          tar_target(\n            name = lib_spe_exp_mb_pre,\n            format = \"file\",\n            command = {\n              lib_spe_exp_mb_pre <-\n                prepare_libraries_spectra(\n                  input = lib_spe_exp_mb_raw,\n                  output_pos = \"data/interim/libraries/spectra/exp/massbank_pos.rds\",\n                  output_neg = \"data/interim/libraries/spectra/exp/massbank_neg.rds\",\n                  output_sop = \"data/interim/libraries/sop/spectral_mb_prepared.tsv.gz\",\n                  metad = paste(\"MassBank\",\n                    paths_urls_massbank_version,\n                    sep = \" - \"\n                  ),\n                  col_ce = \"Collision_energy\",\n                  col_ci = NULL,\n                  col_em = \"ExactMass\",\n                  col_in = \"InChI\",\n                  col_io = NULL,\n                  col_ik = \"InChIKey\",\n                  col_il = NULL,\n                  col_mf = \"Formula\",\n                  col_na = \"Name\",\n                  col_po = \"Ion_mode\",\n                  col_sm = \"smiles\",\n                  col_sn = NULL,\n                  col_si = \"accession\",\n                  col_sp = \"Splash\",\n                  col_sy = \"Synon\",\n                  col_xl = NULL\n                )\n            }\n          ),\n          tar_target(\n            name = lib_spe_exp_mb_pre_pos,\n            format = \"file\",\n            command = {\n              lib_spe_exp_mb_pre_pos <- lib_spe_exp_mb_pre[[1]]\n            }\n          ),\n          tar_target(\n            name = lib_spe_exp_mb_pre_neg,\n            format = \"file\",\n            command = {\n              lib_spe_exp_mb_pre_neg <- lib_spe_exp_mb_pre[[2]]\n            }\n          ),\n          tar_target(\n            name = lib_spe_exp_mb_pre_sop,\n            format = \"file\",\n            command = {\n              lib_spe_exp_mb_pre_sop <- lib_spe_exp_mb_pre[[3]]\n            }\n          )\n        )\n      )\n    ),\n    ## Retention times\n    list(tar_target(\n      name = lib_rt,\n      format = \"file\",\n      command = {\n        lib_rt <- prepare_libraries_rt(\n          mgf_exp = list(\n            lib_spe_exp_int_pre_neg,\n            lib_spe_exp_int_pre_pos\n          ),\n          mgf_is = list(\n            lib_spe_is_lot_pre_neg,\n            lib_spe_is_lot_pre_pos\n          ),\n          temp_exp = par_pre_lib_rt$files$libraries$temporal$exp$csv,\n          temp_is = par_pre_lib_rt$files$libraries$temporal$is$csv,\n          output_rt = par_pre_lib_rt$files$libraries$temporal$prepared,\n          output_sop = par_pre_lib_rt$files$libraries$sop$prepared$rt,\n          col_ik = par_pre_lib_rt$names$mgf$inchikey,\n          col_rt = par_pre_lib_rt$names$mgf$retention_time,\n          col_sm = par_pre_lib_rt$names$mgf$smiles,\n          name_inchikey = par_pre_lib_rt$names$inchikey,\n          name_rt = par_pre_lib_rt$names$rt$library,\n          name_smiles = par_pre_lib_rt$names$smiles,\n          unit_rt = par_pre_lib_rt$units$rt\n        )\n      }\n    )),\n    tar_target(\n      name = lib_rt_rts,\n      format = \"file\",\n      command = {\n        lib_rt_rts <- lib_rt[[1]]\n      }\n    ),\n    tar_target(\n      name = lib_rt_sop,\n      format = \"file\",\n      command = {\n        lib_rt_sop <- lib_rt[[2]]\n      }\n    ),\n    ## Structure organism pairs\n    list(\n      ## Raw\n      list(\n        ## This does not work as it forces the file to exist.\n        ## So targets will not check if the input file changed automatically.\n        # tar_target(\n        #   name = lib_sop_clo,\n        #   format = \"file\",\n        #   command = {\n        #     lib_sop_clo <- paths$data$source$libraries$sop$closed\n        #   }\n        # ),\n        tar_target(\n          name = lib_sop_ecm,\n          format = \"file\",\n          command = {\n            ## Because ECMDB certificate is expired\n            lib_sop_ecm <- tryCatch(\n              expr = {\n                get_file(\n                  url = paths_urls_ecmdb_metabolites,\n                  export = paths_data_source_libraries_sop_ecmdb\n                )\n              },\n              error = function(e) {\n                return(fake_ecmdb(export = paths_data_source_libraries_sop_ecmdb))\n              }, finally = {\n                return(paths_data_source_libraries_sop_ecmdb)\n              }\n            )\n          }\n        ),\n        tar_target(\n          name = lib_sop_hmd,\n          format = \"file\",\n          command = {\n            lib_sop_hmd <- tryCatch(\n              expr = {\n                get_file(\n                  url = paths_urls_hmdb_structures,\n                  export = paths_data_source_libraries_sop_hmdb\n                )\n              },\n              warning = function(w) {\n                ## See #118\n                log_debug(\"HMDB download failed partially, returning empty file instead\")\n                unlink(paths_data_source_libraries_sop_hmdb)\n                return(fake_hmdb(export = paths_data_source_libraries_sop_hmdb))\n              },\n              error = function(e) {\n                return(fake_hmdb(export = paths_data_source_libraries_sop_hmdb))\n              }, finally = {\n                return(paths_data_source_libraries_sop_hmdb)\n              }\n            )\n          }\n        ),\n        ## TODO ADD  GET HMDB\n        tar_target(\n          name = lib_sop_lot,\n          format = \"file\",\n          command = {\n            lib_sop_lot <- tryCatch(\n              expr = {\n                get_last_version_from_zenodo(\n                  doi = paths_urls_lotus_doi,\n                  pattern = paths_urls_lotus_pattern,\n                  path = paths_data_source_libraries_sop_lotus\n                )\n              },\n              error = function(e) {\n                return(fake_lotus(export = paths_data_source_libraries_sop_lotus))\n              }, finally = {\n                return(paths_data_source_libraries_sop_lotus)\n              }\n            )\n          },\n          ## To always check if a newest version is available\n          cue = tar_cue(mode = \"always\")\n          # cue = tar_cue(mode = \"thorough\")\n        )\n      ),\n      ## Prepared\n      list(\n        tar_target(\n          name = lib_sop_clo_pre,\n          format = \"file\",\n          command = {\n            lib_sop_clo_pre <-\n              prepare_libraries_sop_closed(\n                input = par_pre_lib_sop_clo$files$libraries$sop$raw$closed,\n                output = par_pre_lib_sop_clo$files$libraries$sop$prepared$closed\n              )\n          }\n        ),\n        tar_target(\n          name = lib_sop_ecm_pre,\n          format = \"file\",\n          command = {\n            lib_sop_ecm_pre <-\n              prepare_libraries_sop_ecmdb(\n                input = lib_sop_ecm,\n                output = par_pre_lib_sop_ecm$files$libraries$sop$prepared$ecmdb\n              )\n          }\n        ),\n        tar_target(\n          name = lib_sop_hmd_pre,\n          format = \"file\",\n          command = {\n            lib_sop_hmd_pre <-\n              prepare_libraries_sop_hmdb(\n                input = lib_sop_hmd,\n                output = par_pre_lib_sop_hmd$files$libraries$sop$prepared$hmdb\n              )\n          }\n        ),\n        tar_target(\n          name = lib_sop_lot_pre,\n          format = \"file\",\n          command = {\n            lib_sop_lot_pre <-\n              prepare_libraries_sop_lotus(\n                input = if (paths_test_mode == FALSE) {\n                  lib_sop_lot\n                } else {\n                  paths_data_source_libraries_sop_lotus\n                },\n                output = par_pre_lib_sop_lot$files$libraries$sop$prepared$lotus\n              )\n          }\n        )\n      ),\n      ## Merged\n      list(\n        tar_target(\n          name = lib_sop_mer,\n          format = \"file\",\n          command = {\n            lib_sop_mer <- prepare_libraries_sop_merged(\n              files = c(\n                lib_sop_clo_pre,\n                lib_sop_ecm_pre,\n                lib_sop_hmd_pre,\n                lib_sop_lot_pre,\n                lib_rt_sop,\n                lib_spe_exp_int_pre_sop,\n                lib_spe_exp_mb_pre_sop\n              ),\n              filter = par_pre_lib_sop_mer$organisms$filter$mode,\n              level = par_pre_lib_sop_mer$organisms$filter$level,\n              value = par_pre_lib_sop_mer$organisms$filter$value,\n              output_key = par_pre_lib_sop_mer$files$libraries$sop$merged$keys,\n              output_org_tax_ott = par_pre_lib_sop_mer$files$libraries$sop$merged$organisms$taxonomies$ott,\n              output_str_stereo = par_pre_lib_sop_mer$files$libraries$sop$merged$structures$stereo,\n              output_str_met = par_pre_lib_sop_mer$files$libraries$sop$merged$structures$metadata,\n              output_str_nam = par_pre_lib_sop_mer$files$libraries$sop$merged$structures$names,\n              output_str_tax_cla = par_pre_lib_sop_mer$files$libraries$sop$merged$structures$taxonomies$cla,\n              output_str_tax_npc = par_pre_lib_sop_mer$files$libraries$sop$merged$structures$taxonomies$npc\n            )\n          }\n        ),\n        tar_target(\n          name = lib_mer_key,\n          format = \"file\", command = {\n            lib_mer_key <- lib_sop_mer[[1]]\n          }\n        ),\n        tar_target(\n          name = lib_mer_org_tax_ott,\n          format = \"file\", command = {\n            lib_mer_org_tax_ott <- lib_sop_mer[[2]]\n          }\n        ),\n        tar_target(\n          name = lib_mer_str_stereo,\n          format = \"file\", command = {\n            lib_mer_str_stereo <- lib_sop_mer[[3]]\n          }\n        ),\n        tar_target(\n          name = lib_mer_str_met,\n          format = \"file\", command = {\n            lib_mer_str_met <- lib_sop_mer[[4]]\n          }\n        ),\n        tar_target(\n          name = lib_mer_str_nam,\n          format = \"file\", command = {\n            lib_mer_str_nam <- lib_sop_mer[[5]]\n          }\n        ),\n        tar_target(\n          name = lib_mer_str_tax_cla,\n          format = \"file\", command = {\n            lib_mer_str_tax_cla <- lib_sop_mer[[6]]\n          }\n        ),\n        tar_target(\n          name = lib_mer_str_tax_npc,\n          format = \"file\", command = {\n            lib_mer_str_tax_npc <- lib_sop_mer[[7]]\n          }\n        )\n      )\n    ),\n    ## Adducts\n    list(tar_target(\n      name = lib_add,\n      format = \"file\",\n      command = {\n        lib_add <- prepare_libraries_adducts(\n          str_met = lib_mer_str_met,\n          adducts_masses_list = dic_add,\n          adducts_output_path = paths_data_interim_libraries_adducts_path,\n          clusters_list = dic_clu,\n          output_name = par_pre_lib_add$files$libraries$adducts$prepared,\n          masses_pos_output_path = par_pre_lib_add$files$libraries$adducts$pos,\n          masses_neg_output_path = par_pre_lib_add$files$libraries$adducts$neg\n        )\n      }\n    ))\n  ),\n  ## Annotations\n  list(\n    ## MS1\n    list(\n      tar_target(\n        name = ann_ms1_pre,\n        format = \"file\",\n        command = {\n          ann_ms1_pre <-\n            annotate_masses(\n              features = fea_pre,\n              filter_nitro = par_ann_mas$options$nitrogen_rule,\n              library = lib_mer_key,\n              output_annotations = par_ann_mas$files$annotations$prepared$structural$ms1,\n              output_edges = par_ann_mas$files$networks$spectral$edges$raw,\n              name_source = par_ann_mas$names$source,\n              name_target = par_ann_mas$names$target,\n              str_stereo = lib_mer_str_stereo,\n              str_met = lib_mer_str_met,\n              str_nam = lib_mer_str_nam,\n              str_tax_cla = lib_mer_str_tax_cla,\n              str_tax_npc = lib_mer_str_tax_npc,\n              name = lib_add[par_ann_mas$ms$polarity],\n              adducts_list = par_ann_mas$ms$adducts,\n              adducts_neg = par_ann_mas$files$libraries$adducts$neg,\n              adducts_pos = par_ann_mas$files$libraries$adducts$pos,\n              adducts_masses_list = dic_add,\n              clusters_neg = par_ann_mas$ms$clusters$neg,\n              clusters_pos = par_ann_mas$ms$clusters$pos,\n              clusters_list = dic_clu,\n              neutral_losses_list = dic_neu_los,\n              ms_mode = par_ann_mas$ms$polarity,\n              tolerance_ppm = par_ann_mas$ms$tolerances$mass$ppm$ms1,\n              tolerance_rt = par_ann_mas$ms$tolerances$rt$minutes\n            )\n        }\n      ),\n      tar_target(\n        name = ann_ms1_pre_ann,\n        format = \"file\",\n        command = {\n          ann_ms1_pre_ann <-\n            ann_ms1_pre[[1]]\n        }\n      ),\n      tar_target(\n        name = ann_ms1_pre_edg,\n        format = \"file\",\n        command = {\n          ann_ms1_pre_edg <- ann_ms1_pre[[2]]\n        }\n      )\n    ),\n    ## Spectral\n    list(\n      # ## GNPS\n      list(\n        tar_target(\n          name = ann_spe_exp_gnp_pre,\n          format = \"file\",\n          command = {\n            ann_spe_exp_gnp_pre <-\n              prepare_annotations_gnps(\n                # input = gnps_annotations,\n                input = par_pre_ann_gnp$files$annotations$raw$spectral$gnps,\n                output = par_pre_ann_gnp$files$annotations$prepared$structural$gnps,\n                str_stereo = lib_mer_str_stereo,\n                str_met = lib_mer_str_met,\n                str_nam = lib_mer_str_nam,\n                str_tax_cla = lib_mer_str_tax_cla,\n                str_tax_npc = lib_mer_str_tax_npc\n              )\n          }\n        )\n      ),\n      ## Classic\n      list(\n        ## TODO improve polarity handling, suboptimal\n        tar_target(\n          name = ann_spe_pos,\n          format = \"file\",\n          command = {\n            ann_spe_pos <- annotate_spectra(\n              input = input_spectra,\n              library = c(\n                lib_spe_is_lot_pre_pos,\n                ## TODO add is hmdb\n                lib_spe_exp_int_pre_pos,\n                lib_spe_exp_mb_pre_pos\n              ),\n              polarity = \"pos\",\n              output = gsub(\n                pattern = \".tsv.gz\",\n                replacement = \"_pos.tsv.gz\",\n                x = par_ann_spe$files$annotations$raw$spectral$spectral,\n                fixed = TRUE\n              ),\n              threshold = par_ann_spe$annotations$thresholds$ms2$similarity$annotation,\n              ppm = par_ann_spe$ms$tolerances$mass$ppm$ms2,\n              dalton = par_ann_spe$ms$tolerances$mass$dalton$ms2,\n              qutoff = par_ann_spe$ms$thresholds$ms2$intensity,\n              approx = par_ann_spe$annotations$ms2approx\n            )\n          }\n        ),\n        tar_target(\n          name = ann_spe_neg,\n          format = \"file\",\n          command = {\n            ann_spe_neg <- annotate_spectra(\n              input = input_spectra,\n              library = c(\n                lib_spe_is_lot_pre_neg,\n                ## TODO add is hmdb\n                lib_spe_exp_int_pre_neg,\n                lib_spe_exp_mb_pre_neg\n              ),\n              polarity = \"neg\",\n              output = gsub(\n                pattern = \".tsv.gz\",\n                replacement = \"_neg.tsv.gz\",\n                x = par_ann_spe$files$annotations$raw$spectral$spectral,\n                fixed = TRUE\n              ),\n              threshold = par_ann_spe$annotations$thresholds$ms2$similarity$annotation,\n              ppm = par_ann_spe$ms$tolerances$mass$ppm$ms2,\n              dalton = par_ann_spe$ms$tolerances$mass$dalton$ms2,\n              qutoff = par_ann_spe$ms$thresholds$ms2$intensity,\n              approx = par_ann_spe$annotations$ms2approx\n            )\n          }\n        ),\n        tar_target(\n          name = ann_spe_pre,\n          format = \"file\",\n          command = {\n            ann_spe_pre <- prepare_annotations_spectra(\n              input = c(\n                ann_spe_neg,\n                ann_spe_pos\n              ),\n              output = par_pre_ann_spe$files$annotations$prepared$structural$spectral,\n              str_stereo = lib_mer_str_stereo,\n              str_met = lib_mer_str_met,\n              str_nam = lib_mer_str_nam,\n              str_tax_cla = lib_mer_str_tax_cla,\n              str_tax_npc = lib_mer_str_tax_npc\n            )\n          }\n        )\n      )\n    ),\n    # SIRIUS\n    tar_target(\n      name = ann_sir_pre,\n      format = \"file\",\n      command = {\n        ann_sir_pre <-\n          prepare_annotations_sirius(\n            input_directory = par_pre_ann_sir$files$annotations$raw$sirius,\n            output_ann = par_pre_ann_sir$files$annotations$prepared$structural$sirius,\n            output_can = par_pre_ann_sir$files$annotations$prepared$canopus,\n            output_for = par_pre_ann_sir$files$annotations$prepared$formula,\n            sirius_version = par_pre_ann_sir$tools$sirius$version,\n            str_stereo = lib_mer_str_stereo,\n            str_met = lib_mer_str_met,\n            str_nam = lib_mer_str_nam,\n            str_tax_cla = lib_mer_str_tax_cla,\n            str_tax_npc = lib_mer_str_tax_npc\n          )\n      }\n    ),\n    tar_target(\n      name = ann_sir_pre_can,\n      format = \"file\", command = {\n        ann_sir_pre_can <- ann_sir_pre[[1]]\n      }\n    ),\n    tar_target(\n      name = ann_sir_pre_for,\n      format = \"file\", command = {\n        ann_sir_pre_for <- ann_sir_pre[[2]]\n      }\n    ),\n    tar_target(\n      name = ann_sir_pre_str,\n      format = \"file\", command = {\n        ann_sir_pre_str <- ann_sir_pre[[3]]\n      }\n    ),\n    list()\n  ),\n  ## Features\n  list(\n    tar_target(\n      name = fea_edg_spe,\n      format = \"file\",\n      command = {\n        fea_edg_spe <- create_edges_spectra(\n          input = input_spectra,\n          output = par_cre_edg_spe$files$networks$spectral$edges$raw,\n          name_source = par_cre_edg_spe$names$source,\n          name_target = par_cre_edg_spe$names$target,\n          threshold = par_cre_edg_spe$annotations$thresholds$ms2$similarity$edges,\n          ppm = par_cre_edg_spe$ms$tolerances$mass$ppm$ms2,\n          dalton = par_cre_edg_spe$ms$tolerances$mass$dalton$ms2,\n          qutoff = par_cre_edg_spe$ms$thresholds$ms2$intensity\n        )\n      }\n    ),\n    tar_target(\n      name = fea_com,\n      format = \"file\",\n      command = {\n        fea_com <- create_components(\n          input = fea_edg_pre,\n          output = par_cre_com$files$networks$spectral$components$raw\n        )\n      }\n    ),\n    ## Interim\n    list(\n      tar_target(\n        name = int_com,\n        format = \"file\",\n        command = {\n          int_com <- fea_com\n          # int_com <-\n          #   if (file.exists(fea_com)) {\n          #     fea_com\n          #   } else {\n          #     gnps_components\n          #   }\n        }\n      ),\n      tar_target(\n        name = edg_spe,\n        format = \"file\",\n        command = {\n          edg_spe <- fea_edg_spe\n          # edg_spe <-\n          #   ifelse(test = file.exists(fea_edg_spe),\n          #     yes = fea_edg_spe,\n          #     no = gnps_edges\n          #   )\n        }\n      )\n    ),\n    tar_target(\n      name = fea_edg_pre,\n      format = \"file\",\n      command = {\n        fea_edg_pre <- prepare_features_edges(\n          input = c(\"ms1\" = ann_ms1_pre_edg, \"spectral\" = edg_spe),\n          output = par_pre_fea_edg$files$networks$spectral$edges$prepared,\n          name_source = par_pre_fea_edg$names$source,\n          name_target = par_pre_fea_edg$names$target\n        )\n      }\n    ),\n    tar_target(\n      name = fea_com_pre,\n      format = \"file\",\n      command = {\n        fea_com_pre <- prepare_features_components(\n          input = int_com,\n          output = par_pre_fea_com$files$networks$spectral$components$prepared\n        )\n      }\n    ),\n    tar_target(\n      name = fea_pre,\n      format = \"file\",\n      command = {\n        fea_pre <- prepare_features_tables(\n          features = input_features,\n          output = par_pre_fea_tab$files$features$prepared,\n          name_features = par_pre_fea_tab$names$features,\n          name_rt = par_pre_fea_tab$names$rt$features,\n          name_mz = par_pre_fea_tab$names$precursor\n        )\n      }\n    )\n  ),\n  tar_target(\n    name = tax_pre,\n    format = \"file\",\n    command = {\n      tax_pre <- prepare_taxa(\n        input = input_features,\n        name_features = par_pre_tax$names$features,\n        name_filename = par_pre_tax$names$filename,\n        extension = par_pre_tax$names$extension,\n        colname = par_pre_tax$names$taxon,\n        metadata = input_metadata,\n        top_k = par_pre_tax$organisms$candidates,\n        org_tax_ott = lib_mer_org_tax_ott,\n        output = par_pre_tax$files$metadata$prepared,\n        taxon = par_pre_tax$organisms$taxon\n      )\n    }\n  ),\n  tar_target(\n    name = ann_fil,\n    format = \"file\",\n    command = {\n      ann_fil <- filter_annotations(\n        annotations = c(\n          ann_spe_exp_gnp_pre,\n          ann_spe_pre,\n          ann_sir_pre_str,\n          ann_ms1_pre_ann\n        ),\n        features = fea_pre,\n        filter_nitro = par_fil_ann$options$nitrogen_rule,\n        rts = lib_rt_rts,\n        output = par_fil_ann$files$annotations$filtered,\n        tolerance_rt = par_fil_ann$ms$tolerances$rt$minutes\n      )\n    }\n  ),\n  tar_target(\n    name = ann_pre,\n    format = \"file\",\n    command = {\n      ann_pre <- weight_annotations(\n        library = lib_mer_key,\n        org_tax_ott = lib_mer_org_tax_ott,\n        str_stereo = lib_mer_str_stereo,\n        annotations = ann_fil,\n        canopus = ann_sir_pre_can,\n        formula = ann_sir_pre_for,\n        components = fea_com_pre,\n        edges = fea_edg_pre,\n        taxa = tax_pre,\n        output = par_wei_ann$files$annotations$processed,\n        candidates_final = par_wei_ann$annotations$candidates$final,\n        weight_spectral = par_wei_ann$weights$global$spectral,\n        weight_chemical = par_wei_ann$weights$global$chemical,\n        weight_biological = par_wei_ann$weights$global$biological,\n        score_biological_domain = par_wei_ann$weights$biological$domain,\n        score_biological_kingdom = par_wei_ann$weights$biological$kingdom,\n        score_biological_phylum = par_wei_ann$weights$biological$phylum,\n        score_biological_class = par_wei_ann$weights$biological$class,\n        score_biological_order = par_wei_ann$weights$biological$order,\n        score_biological_infraorder = par_wei_ann$weights$biological$infraorder,\n        score_biological_family = par_wei_ann$weights$biological$family,\n        score_biological_subfamily = par_wei_ann$weights$biological$subfamily,\n        score_biological_tribe = par_wei_ann$weights$biological$tribe,\n        score_biological_subtribe = par_wei_ann$weights$biological$subtribe,\n        score_biological_genus = par_wei_ann$weights$biological$genus,\n        score_biological_subgenus = par_wei_ann$weights$biological$subgenus,\n        score_biological_species = par_wei_ann$weights$biological$species,\n        score_biological_subspecies = par_wei_ann$weights$biological$subspecies,\n        score_biological_variety = par_wei_ann$weights$biological$variety,\n        score_chemical_cla_kingdom = par_wei_ann$weights$chemical$cla$kingdom,\n        score_chemical_cla_superclass =\n          par_wei_ann$weights$chemical$cla$superclass,\n        score_chemical_cla_class = par_wei_ann$weights$chemical$cla$class,\n        score_chemical_cla_parent = par_wei_ann$weights$chemical$cla$parent,\n        score_chemical_npc_pathway = par_wei_ann$weights$chemical$npc$pathway,\n        score_chemical_npc_superclass =\n          par_wei_ann$weights$chemical$npc$superclass,\n        score_chemical_npc_class = par_wei_ann$weights$chemical$npc$class,\n        minimal_consistency = par_wei_ann$annotations$thresholds$consistency,\n        minimal_ms1_bio = par_wei_ann$annotations$thresholds$ms1$biological,\n        minimal_ms1_chemo = par_wei_ann$annotations$thresholds$ms1$chemical,\n        minimal_ms1_condition =\n          par_wei_ann$annotations$thresholds$ms1$condition,\n        ms1_only = par_wei_ann$annotations$ms1only,\n        compounds_names = par_wei_ann$options$compounds_names,\n        remove_ties = par_wei_ann$options$remove_ties,\n        summarise = par_wei_ann$options$summarise,\n        pattern = par_wei_ann$files$pattern,\n        force = par_wei_ann$options$force\n      )\n    }\n  ),\n  list(\n    ## Benchmark\n    tar_target(\n      name = benchmark_path_url,\n      command = {\n        benchmark_path_url <- paths_urls_benchmarking_set\n      }\n    ),\n    tar_target(\n      name = benchmark_path_export,\n      command = {\n        benchmark_path_export <- paths_data_source_benchmark_set\n      }\n    ),\n    tar_target(\n      name = benchmark_path_copy,\n      command = {\n        benchmark_path_copy <- paths_data_source_benchmark_copy\n      }\n    ),\n    tar_target(\n      name = benchmark_path_mgf_neg,\n      command = {\n        benchmark_path_mgf_neg <- paths_data_source_benchmark_mgf_neg\n      }\n    ),\n    tar_target(\n      name = benchmark_path_mgf_pos,\n      command = {\n        benchmark_path_mgf_pos <- paths_data_source_benchmark_mgf_pos\n      }\n    ),\n    tar_target(\n      name = benchmark_file,\n      format = \"file\",\n      command = {\n        benchmark_file <- get_file(\n          url = benchmark_path_url,\n          export = benchmark_path_export\n        )\n        return(benchmark_path_export)\n      }\n    ),\n    tar_target(\n      name = benchmark_copy,\n      format = \"file\",\n      command = {\n        con <- file(benchmark_file, \"r\")\n        text <- readLines(con)\n        close(con)\n        ## reduce size\n        text_corrected <- text |>\n          gsub(\n            pattern =\n              \"(\\\\()([0-9]{1,9}.[0-9]{1,9})(, None\\\\))\",\n            replacement = \"\\\\2\"\n          )\n\n        patterns_to_remove <- c(\n          \"FILENAME:\",\n          \"SEQ:\",\n          \"IONMODE:\",\n          \"ORGANISM:\",\n          \"PI:\",\n          \"DATACOLLECTOR:\",\n          \"INCHIAUX:\",\n          \"PUBMED:\",\n          \"SUBMITUSER:\",\n          \"LIBRARYQUALITY:\",\n          \"PARENT_MASS:\"\n        )\n\n        text_corrected_2 <- text_corrected[!grepl(\n          pattern = paste(patterns_to_remove, collapse = \"|\"),\n          x = text_corrected\n        )]\n\n        text_corrected_2 |>\n          writeLines(con = benchmark_path_copy)\n        return(benchmark_path_copy)\n      }\n    ),\n    tar_target(\n      name = benchmark_converted,\n      format = \"file\",\n      command = {\n        sp <- benchmark_copy |>\n          Spectra::Spectra(source = MsBackendMsp::MsBackendMsp()) |>\n          Spectra::setBackend(Spectra::MsBackendMemory())\n        sp |>\n          saveRDS(file = \"data/interim/benchmark/benchmark_spectra.rds\")\n        return(\"data/interim/benchmark/benchmark_spectra.rds\")\n      }\n    ),\n    tar_target(\n      name = benchmark_prepared,\n      format = \"file\",\n      command = {\n        sp <- benchmark_converted |>\n          readRDS() |>\n          sanitize_spectra(\n            cutoff = 0,\n            ratio = 10000,\n            fragments = 5\n          )\n\n        sp@backend@spectraData$precursorMz <-\n          sp@backend@spectraData$PRECURSOR_MZ |>\n          as.numeric()\n\n        log_debug(\"Imported\")\n        sp_clean <- sp |>\n          Spectra::addProcessing(remove_above_precursor(),\n            spectraVariables = c(\"precursorMz\")\n          ) |>\n          Spectra::addProcessing(normalize_peaks()) |>\n          Spectra::applyProcessing()\n\n        log_debug(\"Cleaned\")\n        df_meta <- tidytable::tidytable(\n          adduct = sp_clean$ADDUCT,\n          inchikey = sp_clean$inchikey,\n          instrument = sp_clean$SOURCE_INSTRUMENT,\n          fragments = lapply(sp_clean@backend@peaksData, length) |>\n            as.character() |>\n            as.numeric() / 2,\n          precursorMz = sp_clean$precursorMz,\n          pepmass = sp_clean$PEPMASS,\n          smiles = sp_clean$smiles,\n          ccmslib = sp_clean$SPECTRUMID,\n          charge = sp_clean$precursorCharge,\n          name = sp_clean$name\n        ) |>\n          tidytable::mutate(\n            tidytable::across(\n              .cols = tidytable::everything(),\n              .fns = function(x) {\n                tidytable::na_if(x, \"\")\n              }\n            )\n          )\n\n        log_debug(\"Framed\")\n        df_clean <- df_meta |>\n          tidytable::filter(!is.na(inchikey)) |>\n          tidytable::filter(fragments >= 5) |>\n          tidytable::filter(fragments <= 250) |>\n          tidytable::filter(!grepl(\n            pattern = \"QQQ\",\n            x = instrument,\n            fixed = TRUE\n          )) |>\n          ## fragments are nominal mass\n          tidytable::filter(!grepl(\n            pattern = \"ReSpect\",\n            x = name,\n            fixed = TRUE\n          )) |>\n          ## remove spectral matches\n          tidytable::filter(!grepl(\n            pattern = \"Spectral Match to\",\n            x = name,\n            fixed = TRUE\n          )) |>\n          ## remove putatives\n          tidytable::filter(!grepl(\n            pattern = \"putative\",\n            x = name,\n            fixed = TRUE\n          )) |>\n          tidytable::select(-name) |>\n          tidytable::mutate(mass = precursorMz) |>\n          tidytable::separate(\n            col = mass,\n            sep = \"\\\\.\",\n            into = c(\"a\", \"b\")\n          ) |>\n          tidytable::filter(!is.na(b)) |>\n          tidytable::filter(stringr::str_length(as.numeric(b)) > 1) |>\n          tidytable::select(-a, -b) |>\n          tidytable::mutate(inchikey_no_stereo = gsub(\n            pattern = \"-.*\",\n            replacement = \"\",\n            x = inchikey,\n            perl = TRUE\n          )) |>\n          tidytable::distinct(inchikey_no_stereo, adduct, .keep_all = TRUE) |>\n          tidytable::mutate(mz = precursorMz) |>\n          ## Weird way to have some kind of retention time\n          tidytable::mutate(\n            rt = tidytable::cur_group_id(),\n            .by = \"inchikey_no_stereo\"\n          )\n\n        df_clean_neg <- df_clean |>\n          tidytable::filter(grepl(\n            pattern = \"]-\",\n            x = adduct,\n            fixed = TRUE\n          ))\n\n        df_clean_pos <- df_clean |>\n          tidytable::filter(grepl(\n            pattern = \"]+\",\n            x = adduct,\n            fixed = TRUE\n          ))\n\n        sp_pos <-\n          sp_clean[sp_clean$SPECTRUMID %in% df_clean_pos$ccmslib]\n        sp_neg <-\n          sp_clean[sp_clean$SPECTRUMID %in% df_clean_neg$ccmslib]\n\n        extract_benchmark_spectra <- function(x, mode) {\n          df <- x |>\n            extract_spectra() |>\n            tidytable::mutate(acquisitionNum = tidytable::row_number()) |>\n            tidytable::mutate(spectrum_id = acquisitionNum) |>\n            tidytable::mutate(short_ik = gsub(\n              pattern = \"-.*\",\n              replacement = \"\",\n              inchikey,\n              perl = TRUE\n            )) |>\n            tidytable::mutate(\n              rtime = tidytable::cur_group_id(),\n              .by = \"short_ik\"\n            ) |>\n            tidytable::mutate(precursorCharge = ifelse(\n              test = mode == \"pos\",\n              yes = as.integer(1),\n              no = as.integer(-1)\n            )) |>\n            tidytable::select(\n              SCANS,\n              acquisitionNum,\n              precursorCharge,\n              precursorMz,\n              MSLEVEL,\n              rtime,\n              name,\n              smiles,\n              inchi,\n              inchikey,\n              adduct = ADDUCT,\n              instrument = SOURCE_INSTRUMENT,\n              ccmslib = SPECTRUMID,\n              spectrum_id = acquisitionNum,\n              mz,\n              intensity\n            ) |>\n            data.frame()\n          return(df)\n        }\n\n        spectra_harmonized_pos <- sp_pos |>\n          extract_benchmark_spectra(mode = \"pos\")\n\n        spectra_harmonized_neg <- sp_neg |>\n          extract_benchmark_spectra(mode = \"neg\")\n\n        select_benchmark_columns <- function(x) {\n          df <- x |>\n            tidytable::select(\n              adduct,\n              inchikey,\n              instrument,\n              smiles,\n              ccmslib,\n              charge = precursorCharge,\n              mz = precursorMz,\n              rt = rtime,\n              feature_id = spectrum_id\n            ) |>\n            tidytable::mutate(inchikey_no_stereo = gsub(\n              pattern = \"-.*\",\n              replacement = \"\",\n              x = inchikey,\n              perl = TRUE\n            )) |>\n            data.frame()\n          return(df)\n        }\n\n        df_clean_pos <- spectra_harmonized_pos |>\n          select_benchmark_columns()\n\n        df_clean_neg <- spectra_harmonized_neg |>\n          select_benchmark_columns()\n\n        log_debug(\"Exporting\")\n        spectra_harmonized_pos |>\n          Spectra::Spectra() |>\n          Spectra::export(\n            backend = MsBackendMgf::MsBackendMgf(),\n            file = benchmark_path_mgf_pos\n          )\n        spectra_harmonized_neg |>\n          Spectra::Spectra() |>\n          Spectra::export(\n            backend = MsBackendMgf::MsBackendMgf(),\n            file = benchmark_path_mgf_neg\n          )\n        df_clean_pos |>\n          export_output(\"data/interim/benchmark/benchmark_meta_pos.tsv\")\n        df_clean_neg |>\n          export_output(\"data/interim/benchmark/benchmark_meta_neg.tsv\")\n\n        return(\n          c(\n            \"spectra_pos\" = benchmark_path_mgf_pos,\n            \"spectra_neg\" = benchmark_path_mgf_neg,\n            \"meta_pos\" = \"data/interim/benchmark/benchmark_meta_pos.tsv\",\n            \"meta_neg\" = \"data/interim/benchmark/benchmark_meta_neg.tsv\"\n          )\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_pre_mgf_pos,\n      format = \"file\",\n      command = {\n        benchmark_pre_mgf_pos <- benchmark_prepared[[1]]\n      }\n    ),\n    tar_target(\n      name = benchmark_pre_mgf_neg,\n      format = \"file\",\n      command = {\n        benchmark_pre_mgf_neg <- benchmark_prepared[[2]]\n      }\n    ),\n    tar_target(\n      name = benchmark_pre_meta_pos,\n      format = \"file\",\n      command = {\n        benchmark_pre_meta_pos <- benchmark_prepared[[3]]\n      }\n    ),\n    tar_target(\n      name = benchmark_pre_meta_neg,\n      format = \"file\",\n      command = {\n        benchmark_pre_meta_neg <- benchmark_prepared[[4]]\n      }\n    ),\n    tar_target(\n      name = benchmark_taxed_pos,\n      format = \"file\",\n      command = {\n        benchmark_taxed_pos <- benchmark_pre_meta_pos |>\n          taxize_spectra_benchmark(\n            keys = lib_mer_key,\n            org_tax_ott = lib_mer_org_tax_ott,\n            output = \"data/interim/benchmark/benchmark_taxed_pos.tsv.gz\"\n          )\n      }\n    ),\n    tar_target(\n      name = benchmark_taxed_neg,\n      format = \"file\",\n      command = {\n        benchmark_taxed_neg <- benchmark_pre_meta_neg |>\n          taxize_spectra_benchmark(\n            keys = lib_mer_key,\n            org_tax_ott = lib_mer_org_tax_ott,\n            output = \"data/interim/benchmark/benchmark_taxed_neg.tsv.gz\"\n          )\n      }\n    ),\n    tar_target(\n      name = benchmark_def_ann_mas,\n      command = {\n        benchmark_def_ann_mas <- parse_yaml_params(\n          def = par_def_ann_mas,\n          usr = par_def_ann_mas\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_ms1_pre_pos,\n      format = \"file\",\n      command = {\n        benchmark_ann_ms1_pre_pos <-\n          annotate_masses(\n            features = benchmark_pre_meta_pos,\n            library = lib_mer_key,\n            output_annotations = \"data/interim/benchmark/benchmark_ann_ms1_pos.tsv.gz\",\n            output_edges = \"data/interim/benchmark/benchmark_edges_ms1_pos.tsv.gz\",\n            name_source = benchmark_def_ann_mas$names$source,\n            name_target = benchmark_def_ann_mas$names$target,\n            str_stereo = lib_mer_str_stereo,\n            str_met = lib_mer_str_met,\n            str_nam = lib_mer_str_nam,\n            str_tax_cla = lib_mer_str_tax_cla,\n            str_tax_npc = lib_mer_str_tax_npc,\n            name = lib_add[\"pos\"],\n            adducts_list = benchmark_def_ann_mas$ms$adducts,\n            adducts_neg = benchmark_def_ann_mas$files$libraries$adducts$neg,\n            adducts_pos = benchmark_def_ann_mas$files$libraries$adducts$pos,\n            adducts_masses_list = dic_add,\n            clusters_neg = benchmark_def_ann_mas$ms$clusters$neg,\n            clusters_pos = benchmark_def_ann_mas$ms$clusters$pos,\n            clusters_list = dic_clu,\n            neutral_losses_list = dic_neu_los,\n            ms_mode = \"pos\",\n            tolerance_ppm = benchmark_def_ann_mas$ms$tolerances$mass$ppm$ms1,\n            tolerance_rt = benchmark_def_ann_mas$ms$tolerances$rt$minutes\n          )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_ms1_pre_neg,\n      format = \"file\",\n      command = {\n        benchmark_ann_ms1_pre_neg <-\n          annotate_masses(\n            features = benchmark_pre_meta_neg,\n            library = lib_mer_key,\n            output_annotations = \"data/interim/benchmark/benchmark_ann_ms1_neg.tsv.gz\",\n            output_edges = \"data/interim/benchmark/benchmark_edges_ms1_neg.tsv.gz\",\n            name_source = benchmark_def_ann_mas$names$source,\n            name_target = benchmark_def_ann_mas$names$target,\n            str_stereo = lib_mer_str_stereo,\n            str_met = lib_mer_str_met,\n            str_nam = lib_mer_str_nam,\n            str_tax_cla = lib_mer_str_tax_cla,\n            str_tax_npc = lib_mer_str_tax_npc,\n            name = lib_add[\"neg\"],\n            adducts_list = benchmark_def_ann_mas$ms$adducts,\n            adducts_neg = benchmark_def_ann_mas$files$libraries$adducts$neg,\n            adducts_pos = benchmark_def_ann_mas$files$libraries$adducts$pos,\n            adducts_masses_list = dic_add,\n            clusters_neg = benchmark_def_ann_mas$ms$clusters$neg,\n            clusters_pos = benchmark_def_ann_mas$ms$clusters$pos,\n            clusters_list = dic_clu,\n            neutral_losses_list = dic_neu_los,\n            ms_mode = \"neg\",\n            tolerance_ppm = benchmark_def_ann_mas$ms$tolerances$mass$ppm$ms1,\n            tolerance_rt = benchmark_def_ann_mas$ms$tolerances$rt$minutes\n          )\n      }\n    ),\n    tar_target(\n      name = benchmark_def_cre_edg_spe,\n      command = {\n        benchmark_def_cre_edg_spe <- parse_yaml_params(\n          def = par_def_cre_edg_spe,\n          usr = par_def_cre_edg_spe\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_edg_spe_pos,\n      format = \"file\",\n      command = {\n        benchmark_edg_spe_pos <- create_edges_spectra(\n          input = benchmark_pre_mgf_pos,\n          output = \"data/interim/benchmark/benchmark_edges_spe_pos.tsv.gz\",\n          name_source = benchmark_def_cre_edg_spe$names$source,\n          name_target = benchmark_def_cre_edg_spe$names$target,\n          threshold = benchmark_def_cre_edg_spe$annotations$thresholds$ms2$similarity$edges,\n          ppm = benchmark_def_cre_edg_spe$ms$tolerances$mass$ppm$ms2,\n          dalton = benchmark_def_cre_edg_spe$ms$tolerances$mass$dalton$ms2,\n          qutoff = 0\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_edg_spe_neg,\n      format = \"file\",\n      command = {\n        benchmark_edg_spe_neg <- create_edges_spectra(\n          input = benchmark_pre_mgf_neg,\n          output = \"data/interim/benchmark/benchmark_edges_spe_neg.tsv.gz\",\n          name_source = benchmark_def_cre_edg_spe$names$source,\n          name_target = benchmark_def_cre_edg_spe$names$target,\n          threshold = benchmark_def_cre_edg_spe$annotations$thresholds$ms2$similarity$edges,\n          ppm = benchmark_def_cre_edg_spe$ms$tolerances$mass$ppm$ms2,\n          dalton = benchmark_def_cre_edg_spe$ms$tolerances$mass$dalton$ms2,\n          qutoff = 0\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_def_pre_fea_edg,\n      command = {\n        benchmark_def_pre_fea_edg <- parse_yaml_params(\n          def = par_def_pre_fea_edg,\n          usr = par_def_pre_fea_edg\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_edg_pre_pos,\n      format = \"file\",\n      command = {\n        benchmark_edg_pre_pos <- prepare_features_edges(\n          input = c(benchmark_edg_spe_pos, benchmark_ann_ms1_pre_pos[[2]]),\n          output = \"data/interim/benchmark/benchmark_edges_pos.tsv.gz\",\n          name_source = benchmark_def_pre_fea_edg$names$source,\n          name_target = benchmark_def_pre_fea_edg$names$target\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_edg_pre_neg,\n      format = \"file\",\n      command = {\n        benchmark_edg_pre_neg <- prepare_features_edges(\n          input = c(benchmark_edg_spe_neg, benchmark_ann_ms1_pre_neg[[2]]),\n          output = \"data/interim/benchmark/benchmark_edges_neg.tsv.gz\",\n          name_source = benchmark_def_pre_fea_edg$names$source,\n          name_target = benchmark_def_pre_fea_edg$names$target\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_def_cre_edg_com,\n      command = {\n        benchmark_def_cre_edg_com <- parse_yaml_params(\n          def = par_def_cre_com,\n          usr = par_def_cre_com\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_com_pos,\n      format = \"file\",\n      command = {\n        benchmark_com_pos <- create_components(\n          input = benchmark_edg_pre_pos,\n          output = \"data/interim/benchmark/benchmark_components_pos.tsv.gz\"\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_com_neg,\n      format = \"file\",\n      command = {\n        benchmark_com_neg <- create_components(\n          input = benchmark_edg_pre_neg,\n          output = \"data/interim/benchmark/benchmark_components_neg.tsv.gz\"\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_def_pre_fea_com,\n      command = {\n        benchmark_def_pre_fea_com <- parse_yaml_params(\n          def = par_def_pre_fea_com,\n          usr = par_def_pre_fea_com\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_com_pre_pos,\n      format = \"file\",\n      command = {\n        benchmark_com_pre_pos <- prepare_features_components(\n          input = benchmark_com_pos,\n          output = \"data/interim/benchmark/benchmark_com_pre_pos.tsv.gz\"\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_com_pre_neg,\n      format = \"file\",\n      command = {\n        benchmark_com_pre_neg <- prepare_features_components(\n          input = benchmark_com_neg,\n          output = \"data/interim/benchmark/benchmark_com_pre_neg.tsv.gz\"\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_def_ann_spe,\n      command = {\n        benchmark_def_ann_spe <- parse_yaml_params(\n          def = par_def_ann_spe,\n          usr = par_def_ann_spe\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_spe_pos,\n      format = \"file\",\n      command = {\n        benchmark_ann_spe_pos <- annotate_spectra(\n          input = benchmark_pre_mgf_pos,\n          library = c(\n            lib_spe_is_lot_pre_pos,\n            lib_spe_exp_mb_pre_pos\n          ),\n          polarity = \"pos\",\n          output = \"data/interim/benchmark/benchmark_ann_spe_pos.tsv.gz\",\n          threshold =\n            benchmark_def_ann_spe$annotations$thresholds$ms2$similarity$annotation,\n          ppm = benchmark_def_ann_spe$ms$tolerances$mass$ppm$ms2,\n          dalton = benchmark_def_ann_spe$ms$tolerances$mass$dalton$ms2,\n          qutoff = 0,\n          approx = benchmark_def_ann_spe$annotations$ms2approx\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_spe_neg,\n      format = \"file\",\n      command = {\n        benchmark_ann_spe_neg <- annotate_spectra(\n          input = benchmark_pre_mgf_neg,\n          library = c(\n            lib_spe_is_lot_pre_neg,\n            lib_spe_exp_mb_pre_neg\n          ),\n          polarity = \"neg\",\n          output = \"data/interim/benchmark/benchmark_ann_spe_neg.tsv.gz\",\n          threshold =\n            benchmark_def_ann_spe$annotations$thresholds$ms2$similarity$annotation,\n          ppm = benchmark_def_ann_spe$ms$tolerances$mass$ppm$ms2,\n          dalton = benchmark_def_ann_spe$ms$tolerances$mass$dalton$ms2,\n          qutoff = 0,\n          approx = benchmark_def_ann_spe$annotations$ms2approx\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_def_pre_ann_spe,\n      command = {\n        benchmark_def_pre_ann_spe <- parse_yaml_params(\n          def = par_def_pre_ann_spe,\n          usr = par_def_pre_ann_spe\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_spe_pre_pos,\n      format = \"file\",\n      command = {\n        benchmark_ann_spe_pre_pos <- prepare_annotations_spectra(\n          input = c(benchmark_ann_spe_pos),\n          output = \"data/interim/benchmark/benchmark_ann_spe_pre_pos.tsv.gz\",\n          str_stereo = lib_mer_str_stereo,\n          str_met = lib_mer_str_met,\n          str_nam = lib_mer_str_nam,\n          str_tax_cla = lib_mer_str_tax_cla,\n          str_tax_npc = lib_mer_str_tax_npc\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_spe_pre_neg,\n      format = \"file\",\n      command = {\n        benchmark_ann_spe_pre_neg <- prepare_annotations_spectra(\n          input = c(benchmark_ann_spe_neg),\n          output = \"data/interim/benchmark/benchmark_ann_spe_pre_neg.tsv.gz\",\n          str_stereo = lib_mer_str_stereo,\n          str_met = lib_mer_str_met,\n          str_nam = lib_mer_str_nam,\n          str_tax_cla = lib_mer_str_tax_cla,\n          str_tax_npc = lib_mer_str_tax_npc\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_def_pre_ann_sir,\n      command = {\n        benchmark_def_pre_ann_sir <- parse_yaml_params(\n          def = par_def_pre_ann_sir,\n          usr = par_def_pre_ann_sir\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_sir_pre,\n      format = \"file\",\n      command = {\n        benchmark_ann_sir_pre <-\n          prepare_annotations_sirius(\n            input_directory = \"doesNotExist4Now\",\n            output_ann = \"data/interim/benchmark/benchmark_ann_sir_pre.tsv.gz\",\n            output_can = \"data/interim/benchmark/benchmark_ann_sir_pre_can.tsv.gz\",\n            output_for = \"data/interim/benchmark/benchmark_ann_sir_pre_for.tsv.gz\",\n            str_stereo = lib_mer_str_stereo,\n            str_met = lib_mer_str_met,\n            str_nam = lib_mer_str_nam,\n            str_tax_cla = lib_mer_str_tax_cla,\n            str_tax_npc = lib_mer_str_tax_npc\n          )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_sir_pre_can,\n      format = \"file\", command = {\n        benchmark_ann_sir_pre_can <- benchmark_ann_sir_pre[[1]]\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_sir_pre_for,\n      format = \"file\", command = {\n        benchmark_ann_sir_pre_for <- benchmark_ann_sir_pre[[2]]\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_sir_pre_str,\n      format = \"file\", command = {\n        benchmark_ann_sir_pre_str <- benchmark_ann_sir_pre[[3]]\n      }\n    ),\n    tar_target(\n      name = benchmark_def_fil_ann,\n      command = {\n        benchmark_def_fil_ann <- parse_yaml_params(\n          def = par_def_fil_ann,\n          usr = par_def_fil_ann\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_fil_spe_neg,\n      format = \"file\",\n      command = {\n        benchmark_ann_fil_spe_neg <- filter_annotations(\n          annotations = c(\n            benchmark_ann_spe_pre_neg,\n            benchmark_ann_sir_pre_str\n          ),\n          features = benchmark_pre_meta_neg,\n          rts = list(),\n          output = \"data/interim/benchmark/benchmark_ann_spe_fil_neg.tsv.gz\",\n          tolerance_rt = benchmark_def_fil_ann$ms$tolerances$rt$minutes\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_fil_spe_ms1_neg,\n      format = \"file\",\n      command = {\n        benchmark_ann_fil_spe_ms1_neg <- filter_annotations(\n          annotations = c(\n            benchmark_ann_spe_pre_neg,\n            benchmark_ann_ms1_pre_neg[[1]],\n            benchmark_ann_sir_pre_str\n          ),\n          features = benchmark_pre_meta_neg,\n          rts = list(),\n          output =\n            \"data/interim/benchmark/benchmark_ann_spe_ms1_fil_neg.tsv.gz\",\n          tolerance_rt = benchmark_def_fil_ann$ms$tolerances$rt$minutes\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_fil_ms1_neg,\n      format = \"file\",\n      command = {\n        benchmark_ann_fil_ms1_neg <- filter_annotations(\n          annotations = c(\n            benchmark_ann_ms1_pre_neg[[1]],\n            benchmark_ann_sir_pre_str\n          ),\n          features = benchmark_pre_meta_neg,\n          rts = list(),\n          output = \"data/interim/benchmark/benchmark_ann_ms1_fil_neg.tsv.gz\",\n          tolerance_rt = benchmark_def_fil_ann$ms$tolerances$rt$minutes\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_fil_spe_pos,\n      format = \"file\",\n      command = {\n        benchmark_ann_fil_spe_pos <- filter_annotations(\n          annotations = c(\n            benchmark_ann_spe_pre_pos,\n            benchmark_ann_sir_pre_str\n          ),\n          features = benchmark_pre_meta_pos,\n          rts = list(),\n          output = \"data/interim/benchmark/benchmark_ann_spe_fil_pos.tsv.gz\",\n          tolerance_rt = benchmark_def_fil_ann$ms$tolerances$rt$minutes\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_fil_spe_ms1_pos,\n      format = \"file\",\n      command = {\n        benchmark_ann_fil_spe_ms1_pos <- filter_annotations(\n          annotations = c(\n            benchmark_ann_spe_pre_pos,\n            benchmark_ann_ms1_pre_pos[[1]],\n            benchmark_ann_sir_pre_str\n          ),\n          features = benchmark_pre_meta_pos,\n          rts = list(),\n          output =\n            \"data/interim/benchmark/benchmark_ann_spe_ms1_fil_pos.tsv.gz\",\n          tolerance_rt = benchmark_def_fil_ann$ms$tolerances$rt$minutes\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_fil_ms1_pos,\n      format = \"file\",\n      command = {\n        benchmark_ann_fil_ms1_pos <- filter_annotations(\n          annotations = c(\n            benchmark_ann_ms1_pre_pos[[1]],\n            benchmark_ann_sir_pre_str\n          ),\n          features = benchmark_pre_meta_pos,\n          rts = list(),\n          output = \"data/interim/benchmark/benchmark_ann_ms1_fil_pos.tsv.gz\",\n          tolerance_rt = benchmark_def_fil_ann$ms$tolerances$rt$minutes\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_def_wei_ann,\n      command = {\n        benchmark_def_wei_ann <- parse_yaml_params(\n          def = par_def_wei_ann,\n          usr = par_def_wei_ann\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_wei_par,\n      command = {\n        benchmark_wei_par <- list(\n          canopus = benchmark_ann_sir_pre_can,\n          formula = benchmark_ann_sir_pre_for,\n          library = lib_mer_key,\n          org_tax_ott = lib_mer_org_tax_ott,\n          str_stereo = lib_mer_str_stereo,\n          candidates_final = 500,\n          score_biological_domain =\n            benchmark_def_wei_ann$weights$biological$domain,\n          score_biological_kingdom =\n            benchmark_def_wei_ann$weights$biological$kingdom,\n          score_biological_phylum =\n            benchmark_def_wei_ann$weights$biological$phylum,\n          score_biological_class =\n            benchmark_def_wei_ann$weights$biological$class,\n          score_biological_order =\n            benchmark_def_wei_ann$weights$biological$order,\n          score_biological_infraorder =\n            benchmark_def_wei_ann$weights$biological$infraorder,\n          score_biological_family =\n            benchmark_def_wei_ann$weights$biological$family,\n          score_biological_subfamily =\n            benchmark_def_wei_ann$weights$biological$subfamily,\n          score_biological_tribe =\n            benchmark_def_wei_ann$weights$biological$tribe,\n          score_biological_subtribe =\n            benchmark_def_wei_ann$weights$biological$subtribe,\n          score_biological_genus =\n            benchmark_def_wei_ann$weights$biological$genus,\n          score_biological_subgenus =\n            benchmark_def_wei_ann$weights$biological$subgenus,\n          score_biological_species =\n            benchmark_def_wei_ann$weights$biological$species,\n          score_biological_subspecies =\n            benchmark_def_wei_ann$weights$biological$subspecies,\n          score_biological_variety =\n            benchmark_def_wei_ann$weights$biological$variety,\n          score_chemical_cla_kingdom =\n            benchmark_def_wei_ann$weights$chemical$cla$kingdom,\n          score_chemical_cla_superclass =\n            benchmark_def_wei_ann$weights$chemical$cla$superclass,\n          score_chemical_cla_class =\n            benchmark_def_wei_ann$weights$chemical$cla$class,\n          score_chemical_cla_parent =\n            benchmark_def_wei_ann$weights$chemical$cla$parent,\n          score_chemical_npc_pathway =\n            benchmark_def_wei_ann$weights$chemical$npc$pathway,\n          score_chemical_npc_superclass =\n            benchmark_def_wei_ann$weights$chemical$npc$superclass,\n          score_chemical_npc_class =\n            benchmark_def_wei_ann$weights$chemical$npc$class,\n          minimal_consistency =\n            benchmark_def_wei_ann$annotations$thresholds$consistency,\n          minimal_ms1_bio =\n            benchmark_def_wei_ann$annotations$thresholds$ms1$biological,\n          minimal_ms1_chemo =\n            benchmark_def_wei_ann$annotations$thresholds$ms1$chemical,\n          minimal_ms1_condition =\n            benchmark_def_wei_ann$annotations$thresholds$ms1$condition,\n          compounds_names = benchmark_def_wei_ann$options$compounds_names,\n          remove_ties = benchmark_def_wei_ann$options$remove_ties,\n          summarise = benchmark_def_wei_ann$options$summarise,\n          pattern = benchmark_def_wei_ann$files$pattern,\n          force = benchmark_def_wei_ann$options$force\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_files_pos,\n      command = {\n        benchmark_files_pos <- list(\n          components = benchmark_com_pre_pos,\n          edges = benchmark_edg_pre_pos,\n          taxa = benchmark_taxed_pos\n        )\n      }\n    ),\n    tar_target(\n      name = benchmark_files_neg,\n      command = {\n        benchmark_files_pos <- list(\n          components = benchmark_com_pre_neg,\n          edges = benchmark_edg_pre_neg,\n          taxa = benchmark_taxed_neg\n        )\n      }\n    ),\n    # tar_target(\n    #   name = benchmark_ann_pre_ms1_pos,\n    # .  format = \"file\",\n    #   command = {\n    #     benchmark_ann_pre_ms1_pos <-\n    #       do.call(\n    #         what = weight_annotations,\n    #         args = c(benchmark_wei_par,\n    #           benchmark_files_pos,\n    #           annotations = benchmark_ann_fil_ms1_pos,\n    #           weight_spectral = benchmark_def_wei_ann$weights$global$spectral,\n    #           weight_chemical = benchmark_def_wei_ann$weights$global$chemical,\n    #           weight_biological =\n    # benchmark_def_wei_ann$weights$global$biological,\n    #           ms1_only = TRUE,\n    #           output = \"benchmark_lotus_ms1_pos.tsv.gz\"\n    #         )\n    #       )\n    #   }\n    # ),\n    tar_target(\n      name = benchmark_ann_pre_ms2_b_pos,\n      format = \"file\",\n      command = {\n        benchmark_ann_pre_ms2_b_pos <-\n          do.call(\n            what = weight_annotations,\n            args = c(\n              benchmark_wei_par,\n              benchmark_files_pos,\n              annotations = benchmark_ann_fil_spe_pos,\n              weight_spectral = 0.333,\n              weight_chemical = 0,\n              weight_biological = 0.666,\n              ms1_only = FALSE,\n              output = \"benchmark_lotus_ms2_bio_pos.tsv.gz\"\n            )\n          )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_pre_ms1_ms2_b_pos,\n      format = \"file\",\n      command = {\n        benchmark_ann_pre_ms1_ms2_b_pos <-\n          do.call(\n            what = weight_annotations,\n            args = c(\n              benchmark_wei_par,\n              benchmark_files_pos,\n              annotations = benchmark_ann_fil_spe_ms1_pos,\n              ms1_only = FALSE,\n              weight_spectral = 0.333,\n              weight_chemical = 0,\n              weight_biological = 0.666,\n              output = \"benchmark_lotus_ms1_ms2_bio_pos.tsv.gz\"\n            )\n          )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_pre_ms2_b_c_pos,\n      format = \"file\",\n      command = {\n        benchmark_ann_pre_ms2_b_c_pos <-\n          do.call(\n            what = weight_annotations,\n            args = c(\n              benchmark_wei_par,\n              benchmark_files_pos,\n              annotations = benchmark_ann_fil_spe_pos,\n              ms1_only = FALSE,\n              weight_spectral = 0.333,\n              weight_chemical = 0.166,\n              weight_biological = 0.500,\n              output = \"benchmark_lotus_ms2_bio_chemo_pos.tsv.gz\"\n            )\n          )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_pre_ms1_ms2_b_c_pos,\n      format = \"file\",\n      command = {\n        benchmark_ann_pre_ms1_ms2_b_c_pos <-\n          do.call(\n            what = weight_annotations,\n            args = c(\n              benchmark_wei_par,\n              benchmark_files_pos,\n              annotations = benchmark_ann_fil_spe_ms1_pos,\n              ms1_only = FALSE,\n              weight_spectral = 0.333,\n              weight_chemical = 0.166,\n              weight_biological = 0.500,\n              output = \"benchmark_lotus_ms1_ms2_bio_chemo_pos.tsv.gz\"\n            )\n          )\n      }\n    ),\n    # tar_target(\n    #   name = benchmark_ann_pre_ms1_neg,\n    # .  format = \"file\",\n    #   command = {\n    #     benchmark_ann_pre_ms1_neg <-\n    #       do.call(\n    #         what = weight_annotations,\n    #         args = c(benchmark_wei_par,\n    #           benchmark_files_neg,\n    #           annotations = benchmark_ann_fil_ms1_neg,\n    #           ms1_only = TRUE,\n    #           weight_spectral = benchmark_def_wei_ann$weights$global$spectral,\n    #           weight_chemical = benchmark_def_wei_ann$weights$global$chemical,\n    #           weight_biological =\n    # benchmark_def_wei_ann$weights$global$biological,\n    #           output = \"benchmark_lotus_ms1_neg.tsv.gz\"\n    #         )\n    #       )\n    #   }\n    # ),\n    tar_target(\n      name = benchmark_ann_pre_ms2_b_neg,\n      format = \"file\",\n      command = {\n        benchmark_ann_pre_ms2_b_neg <-\n          do.call(\n            what = weight_annotations,\n            args = c(\n              benchmark_wei_par,\n              benchmark_files_neg,\n              annotations = benchmark_ann_fil_spe_neg,\n              ms1_only = FALSE,\n              weight_spectral = 0.333,\n              weight_chemical = 0,\n              weight_biological = 0.666,\n              output = \"benchmark_lotus_ms2_bio_neg.tsv.gz\"\n            )\n          )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_pre_ms1_ms2_b_neg,\n      format = \"file\",\n      command = {\n        benchmark_ann_pre_ms1_ms2_b_neg <-\n          do.call(\n            what = weight_annotations,\n            args = c(\n              benchmark_wei_par,\n              benchmark_files_neg,\n              annotations = benchmark_ann_fil_spe_ms1_neg,\n              ms1_only = FALSE,\n              weight_spectral = 0.333,\n              weight_chemical = 0,\n              weight_biological = 0.666,\n              output = \"benchmark_lotus_ms1_ms2_bio_neg.tsv.gz\"\n            )\n          )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_pre_ms2_b_c_neg,\n      format = \"file\",\n      command = {\n        benchmark_ann_pre_ms2_b_c_neg <-\n          do.call(\n            what = weight_annotations,\n            args = c(\n              benchmark_wei_par,\n              benchmark_files_neg,\n              annotations = benchmark_ann_fil_spe_neg,\n              ms1_only = FALSE,\n              weight_spectral = 0.333,\n              weight_chemical = 0.166,\n              weight_biological = 0.500,\n              output = \"benchmark_lotus_ms2_bio_chemo_neg.tsv.gz\"\n            )\n          )\n      }\n    ),\n    tar_target(\n      name = benchmark_ann_pre_ms1_ms2_b_c_neg,\n      format = \"file\",\n      command = {\n        benchmark_ann_pre_ms1_ms2_b_c_neg <-\n          do.call(\n            what = weight_annotations,\n            args = c(\n              benchmark_wei_par,\n              benchmark_files_neg,\n              annotations = benchmark_ann_fil_spe_ms1_neg,\n              ms1_only = FALSE,\n              weight_spectral = 0.333,\n              weight_chemical = 0.166,\n              weight_biological = 0.500,\n              output = \"benchmark_lotus_ms1_ms2_bio_chemo_neg.tsv.gz\"\n            )\n          )\n      }\n    )\n  )\n)\n","type":"text"},{"name":"scripts/annotate_masses.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"annotates based on exact mass (MS1)\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: \", crayon::blue(\"CH\"), crayon::cyan(\"MS\"), \"\\n\")\n\ntargets::tar_make(names = matches(\"^ann_ms1_pre\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/annotate_spectra.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\n    \"performs spectral similarity calculation\",\n    \"to annotate against a spectral library. \\n\"\n  )\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"^ann_spe_pre\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/change_tests.R","content":"paths <- yaml::read_yaml(file = system.file(\"extdata\", \"paths.yaml\", package = \"timaR\"))\n\npaths$tests$mode <- \"yes\"\npaths$urls$examples$spectra <- paths$urls$examples$spectra_mini\n\nyaml::write_yaml(\n  x = paths,\n  file = system.file(\"extdata\", \"paths.yaml\", package = \"timaR\")\n)\n","type":"text"},{"name":"scripts/create_components.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"creates components from edges. \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"fea_com\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/create_edges_spectra.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"performs spectral similarity calculation to create edges. \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: \", crayon::blue(\"CH\"), crayon::cyan(\"MS\"), \"\\n\")\n\ntargets::tar_make(names = matches(\"fea_edg_spe\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/docopt/annotate_masses.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/annotate_masses.R\n\nUsage:\n  annotate_masses.R [--fil-ann-pre-str=<fil-ann-pre-str>] [--fil-lib-sop-mer=<fil-lib-sop-mer>] [--fil-lib-add-neg=<fil-lib-add-neg>] [--fil-lib-add-pos=<fil-lib-add-pos>] [--fil-lib-add-pro=<fil-lib-add-pro>] [--ms-add-neg=<ms-add-neg>] [--ms-add-pos=<ms-add-pos>] [--ms-clu-neg=<ms-clu-neg>] [--ms-clu-pos=<ms-clu-pos>] [--ms-pol=<ms-pol>] [--ms-thr-ms1-int=<ms-thr-ms1-int>] [--ms-tol-mas-ppm-ms1=<ms-tol-mas-ppm-ms1>] [--ms-tol-mas-dal-ms1=<ms-tol-mas-dal-ms1>] [--ms-tol-rt-min=<ms-tol-rt-min>] [--force=<force>] [--nit-rul=<nit-rul>]\n\nArguments:\n  fil-ann-pre-str            List of prepared structural annotations. STRING\n  fil-fea-pre                Prepared features file. STRING\n  fil-lib-add-neg            Negative adducts. STRING\n  fil-lib-add-pos            Positive adducts. STRING\n  fil-lib-add-pro            Prepared adducts library. STRING\n  fil-lib-sop-mer            Merged structure organism pairs library. STRING\n\n  ms-add-neg                 List of adducts to be used in negative. STRING\n  ms-add-pos                 List of adducts to be used in positive. STRING\n  ms-clu-neg                 List of clusters to be used in negative. STRING\n  ms-clu-pos                 List of clusters to be used in positive. STRING\n  ms-pol                     Polarity used. Must be \"pos\" or \"neg\". STRING\n  ms-thr-ms1-int             Intensity threshold for MS1. INTEGER\n  ms-tol-mas-ppm-ms1         Relative mass tolerance for MS1 in ppm. FLOAT\n  ms-tol-mas-dal-ms1         Absolute mass tolerance for MS1 in Dalton. FLOAT\n  ms-tol-rt-min              Retention time tolerance in minutes. FLOAT\n\n  force                      Do not use it. BOOLEAN\n  nit-rul                    Use Nitrogen rule. BOOLEAN\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/annotate_spectra.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/annotate_spectra.R --fil-spe-raw data/source/examples/spectra.mgf --fil-lib-spe-pos data/interim/libraries/spectra/is/lotus_pos.rds --fil-ann-raw-spe-spe data/interim/annotations/example_spectralMatches.tsv.gz --ms-tol-mas-dal-ms2 0.01 --ms-tol-mas-ppm-ms2 10 --ann-thr-ms2-sim-ann 0.0 --ms-thr-ms2-int 5 --ann-ms2-app false\n\nUsage:\n  annotate_spectra.R [--ann-ms2-app=<ann-ms2-app>] [--ann-thr-ms2-sim-ann=<ann-thr-ms2-sim-ann>] [--fil-ann-raw-spe=<fil-ann-raw-spe>] [--fil-lib-spe-neg=<fil-lib-spe-neg>] [--fil-lib-spe-pos=<fil-lib-spe-pos>] [--fil-spe-raw=<fil-spe-raw>] [--ms-thr-ms2-int=<ms-thr-ms2-int>] [--ms-pol=<ms-pol>] [--ms-tol-mas-ppm-ms2=<ms-tol-mas-ppm-ms2>] [--ms-tol-mas-dal-ms2=<ms-tol-mas-dal-ms2>] [--ms-tol-rt-min=<ms-tol-rt-min>]\n\nArguments:\n  ann-ms2-app                Perform approximative matching without precursor matching? BOOLEAN\n  ann-thr-ms2-sim-ann        Similarity threhsold for annotation. FLOAT\n\n  fil-ann-raw-spe-spe        List of spectral matching results. STRING\n  fil-lib-spe-neg            List of negative spectral libraries. STRING\n  fil-lib-spe-pos            List of positive spectral libraries. STRING\n  fil-spe-raw                Raw spectral file. STRING\n\n  ms-pol                     Polarity used. Must be \"pos\" or \"neg\". STRING\n  ms-thr-ms2-int             Intensity threshold for MS2. INTEGER\n  ms-tol-mas-ppm-ms2         Relative mass tolerance for MS2 in ppm. FLOAT\n  ms-tol-mas-dal-ms2         Absolute mass tolerance for MS2 in Dalton. FLOAT\n  ms-tol-rt-min              Retention time tolerance in minutes. FLOAT\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/create_components.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/create_components.R --fil-net-spe-edg-pre data/interim/features/example_edges.tsv.gz --fil-net-spe-com-raw data/interim/features/example_components.tsv.gz\n\nUsage:\n  create_components.R [--fil-net-spe-edg-pre=<fil-net-spe-edg-pre>] [--fil-net-spe-com-raw=<fil-net-spe-com-raw>]\n\nArguments:\n  fil-net-spe-edg-pre        Prepared edges file. STRING\n  fil-net-spe-com-raw        Raw components file. STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/create_edges_spectra.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/create_edges_spectra.R --fil-spe-raw data/source/examples/spectra.mgf --fil-net-spe-edg-raw data/interim/features/example_edgesSpectra.tsv.gz --ms-tol-mas-dal-ms2 0.01 --ms-tol-mas-ppm-ms2 10 --ann-thr-ms2-sim-edg 0.7 --ms-thr-ms2-int 5\n\nUsage:\n  create_edges_spectra.R [--ann-thr-ms2-sim-edg=<ann-thr-ms2-sim-edg>] [--fil-net-spe-edg-raw=<fil-net-spe-edg-raw>] [--fil-spe-raw=<fil-spe-raw>] [--ms-thr-ms2-int=<ms-thr-ms2-int>] [--ms-tol-mas-ppm-ms2=<ms-tol-mas-ppm-ms2>] [--ms-tol-mas-dal-ms2=<ms-tol-mas-dal-ms2>] [--ms-tol-rt-min=<ms-tol-rt-min>]\n\nArguments:\n  ann-thr-ms2-sim-edg        Similarity threhsold for edges. FLOAT\n\n  fil-net-spe-edg-raw        Raw edges file. STRING\n  fil-spe-raw                Raw spectral file. STRING\n\n  ms-thr-ms2-int             Intensity threshold for MS2. INTEGER\n  ms-tol-mas-ppm-ms2         Relative mass tolerance for MS2 in ppm. FLOAT\n  ms-tol-mas-dal-ms2         Absolute mass tolerance for MS2 in Dalton. FLOAT\n  ms-tol-rt-min              Retention time tolerance in minutes. FLOAT\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/filter_annotations.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/filter_annotations.R\n\nUsage:\n  filter_annotations.R [--fil-ann-fil=<fil-ann-fil>] [--fil-ann-pre-str=<fil-ann-pre-str>] [--fil-fea-pre=<fil-fea-prer>] [--fil-lib-tem-pre=<fil-lib-tem-pre>] [--ms-tol-rt-min=<ms-tol-rt-min>] [--nit-rul=<nit-rul>]\n\nArguments:  \n  fil-ann-fil                Filtered annotation file. STRING\n  fil-ann-pre-str            List of prepared structural annotations. STRING\n  fil-fea-pre                Prepared features file. STRING\n  fil-lib-tem-pre            List of prepared temporal libraries. STRING\n  \n  ms-tol-rt-min              Retention time tolerance in minutes. FLOAT\n\n  nit-rul                    Use Nitrogen rule. BOOLEAN\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_annotations_gnps.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/prepare_annotations_gnps.R --fil-ann-raw-spe-gnp data/interim/annotations/example_gnps.tsv --fil-ann-pre-str data/interim/annotations/example_gnpsPrepared.tsv.gz\n\nUsage:\n  prepare_annotations_gnps.R [--=fil-ann-pre-str<fil-ann-pre-str>] [--gnps-id=<gnps-id>] [--gnps-workflow=<gnps-workflow>]\n\nArguments:\n  fil-ann-raw-spe-gnp        List of GNPS spectral matching results. STRING\n  fil-ann-pre-str            List of prepared structural annotations. STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_annotations_sirius.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/prepare_annotations_sirius.R --fil-ann-raw-sir data/interim/annotations/example_sirius/ --fil-ann-pre-can data/interim/annotations/example_canopusPrepared.tsv.gz --fil-ann-pre-for data/interim/annotations/example_formulaPrepared.tsv.gz --fil-ann-pre-str data/interim/annotations/example_siriusPrepared.tsv.gz\n\nUsage:\n  prepare_annotations_sirius.R [--fil-ann-raw-sir=<fil-ann-raw-sir>] [--fil-ann-pre-can=<fil-ann-pre-can>] [--fil-ann-pre-for=<fil-ann-pre-for>] [--fil-ann-pre-str=<fil-ann-pre-str>]\n\nArguments:\n  fil-ann-raw-sir            Directory containing the sirius results. STRING\n  fil-ann-pre-can            List of prepared canopus annotations. STRING\n  fil-ann-pre-for            List of prepared formula annotations. STRING\n  fil-ann-pre-str            List of prepared structural annotations. STRING\n  \nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_annotations_spectra.txt","content":"You can use this script with the following example:\nRscript inst/scripts/prepare_annotations_spectra.R --fil-ann-raw-spe-spe data/interim/annotations/example_isdb.tsv.gz --fil-ann-pre-str data/interim/annotations/example_isdbPrepared.tsv.gz\n\nUsage:\n  prepare_annotations_spectra.R [--fil-ann-raw-spe=<fil-ann-raw-spe>] [--fil-ann-pre-str=<fil-ann-pre-str>]\n\nArguments:\n  fil-ann-raw-spe-spe        List of spectral matching results. STRING\n  fil-ann-pre-str            List of prepared structural annotations. STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_features_components.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/prepare_features_components.R\nUsage:\n  prepare_features_components.R [--fil-net-spe-com-raw=<fil-net-spe-com-raw>] [--fil-net-spe-com-pre=<fil-net-spe-com-pre>]\n\nArguments:\n  fil-net-spe-com-raw        Raw components file. STRING\n  fil-net-spe-com-pre        Prepared components file. STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_features_edges.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/prepare_features_edges.R --fil-net-spe-edg-pre data/interim/features/example_edges.tsv.gz\n\nUsage:\n  prepare_features_edges.R [--fil-net-spe-edg-raw=<fil-net-spe-edg-raw>] [--fil-net-spe-edg-pre=<fil-net-spe-edg-pre>] [--names-source=<names-source>] [--names-target=<names-target>]\n\nArguments:\n  fil-net-spe-edg-raw        Raw edges file. STRING\n  fil-net-spe-edg-pre        Prepared edges file. STRING\n\n  names-source               Name of \"source IDs\" variable in the input. STRING\n  names-target               Name of \"target IDs\" variable in the input. STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_features_tables.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/prepare_features_tables.R --fil-fea-raw data/source/example_features.csv --fil-fea-pre data/interim/features/example_features.tsv.gz --names-features 'row ID' --names-precursor 'row m/z' --names-rt 'row retention time'\n\nUsage:\n  prepare_features_tables.R [--fil-fea-raw=<fil-fea-raw>] [--fil-fea-pre=<fil-fea-pre>] [--names-features=<names-features>] [--names-precursor=<names-precursor>] [--names-rt-fea=<names-rt-fea>]\n\nArguments:\n  fil-fea-raw                Raw features file. STRING\n  fil-fea-pre                Prepared features file. STRING\n\n  names-features             Name of \"feature IDs\" variable in the input. STRING\n  names-precursor            Name of \"precursor m/z\" variable in the input. STRING\n  names-rt-fea               Name of \"retention time\" variable (fea) in the input. STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_libraries_adducts.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/prepare_libraries_adducts.R --fil-lib-add-neg data/interim/libraries/adducts/neg.tsv.gz --fil-lib-add-pos data/interim/libraries/adducts/pos.tsv.gz --fil-lib-add-pre library\n\nUsage:\n  prepare_libraries_adducts.R [--fil-lib-add-neg=<fil-lib-add-neg>] [--fil-lib-add-pos=<fil-lib-add-pos>] [--fil-lib-add-pre=<fil-lib-add-pre>]\n\nArguments:\n  fil-lib-add-neg            Negative adducts. STRING\n  fil-lib-add-pos            Positive adducts. STRING\n  fil-lib-add-pre            Prepared adducts library. STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_libraries_rt.txt","content":"You can use this script with the following example:\nRscript inst/scripts/prepare_libraries_rt.R --fil-lib-tem-exp-csv data/source/libraries/rt/internal.tsv --fil-lib-tem-is-csv data/source/libraries/rt/predicted.tsv --fil-lib-tem-pre data/interim/libraries/rt/prepared.tsv.gz\n\nUsage:\n  prepare_libraries_rt.R [--fil-lib-tem-exp-csv=<fil-lib-tem-exp-csv>] [--fil-lib-tem-exp-mgf-neg=<fil-lib-tem-exp-mgf-neg>] [--fil-lib-tem-exp-mgf-pos=<fil-lib-tem-exp-mgf-pos>] [--fil-lib-tem-is-csv=<fil-lib-tem-is-csv>] [--fil-lib-tem-is-mgf-neg=<fil-lib-tem-is-mgf-neg>] [--fil-lib-tem-is-mgf-pos=<fil-lib-tem-is-mgf-pos>] [--fil-lib-tem-pre=<fil-lib-tem-pre>] [--names-inchikey=<names-inchikey>] [--names-mgf-ik=<names-mgf-ik>] [--names-mgf-rt=<names-mgf-rt>] [--names-mgf-sm=<names-mgf-sm>] [--names-rt-lib=<names-rt-lib>] [--names-smiles=<names-smiles>] [--units-rt=<units-rt>]\n\nArguments:\n  fil-lib-tem-exp-csv        List of experimental temporal libraries (CSV). STRING\n  fil-lib-tem-exp-mgf-neg    List of negative experimental temporal libraries (MGF). STRING\n  fil-lib-tem-exp-mgf-pos    List of positive experimental temporal libraries (MGF). STRING\n  fil-lib-tem-is-csv         List of in silico temporal libraries (CSV). STRING\n  fil-lib-tem-is-mgf-neg     List of negative in silico temporal libraries. (MGF) STRING\n  fil-lib-tem-is-mgf-pos     List of positive in silico temporal libraries (MGF). STRING\n  fil-lib-tem-pre            List of prepared temporal libraries. STRING\n\n  names-inchikey             Name of \"InChIKey\" variable in the input. STRING\n  names-mgf-ik               Name of \"InChIKey\" in MGF. STRING\n  names-mgf-rt               Name of \"retention time\" in MGF. STRING\n  names-mgf-sm               Name of \"SMILES\" in MGF. STRING\n  names-rt-lib               Name of \"retention time\" variable (lib) in the input. STRING\n  names-smiles               Name of \"SMILES\" variable in the input. STRING\n\n  units-rt                   Unit of the \"retention time\" variable in the input. Must be \"seconds\" or \"minutes\". STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_libraries_sop_closed.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/prepare_libraries_sop_closed.R --fil-lib-sop-raw-clo ../lotus-processor/data/processed/220226_closed_metadata.csv.gz --fil-lib-sop-pre data/interim/libraries/sop/closed_prepared.tsv.gz\n\nUsage:\n  prepare_libraries_sop_closed.R [--fil-lib-sop-raw-clo=<fil-lib-sop-raw-clo>] [--fil-lib-sop-pre=<fil-lib-sop-pre>]\n\nArguments:\n  fil-lib-sop-raw-clo        Closed raw structure organism pairs library. STRING\n  fil-lib-sop-pre            List of prepared structure organism pairs libraries. STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_libraries_sop_ecmdb.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/prepare_libraries_sop_ecmdb.R --fil-lib-sop-raw-ecm data/source/libraries/sop/ecmdb.json.zip --fil-lib-sop-pre data/interim/libraries/sop/ecmdb_prepared.tsv.gz\n\nUsage:\n  prepare_libraries_sop_ecmdb.R [--fil-lib-sop-raw-ecm=<fil-lib-sop-raw-ecm>] [--fil-lib-sop-pre=<fil-lib-sop-pre>]\n\nArguments:\n  fil-lib-sop-raw-ecm        ECMDB raw structure organism pairs library. STRING\n  fil-lib-sop-pre            List of prepared structure organism pairs libraries. STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_libraries_sop_hmdb.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/prepare_libraries_sop_hmdb.R --fil-lib-sop-raw-hmd data/source/libraries/sop/hmdb/structures.zip --fil-lib-sop-pre data/interim/libraries/sop/hmdb_prepared.tsv.gz\n\nUsage:\n  prepare_libraries_sop_hmdb.R [--fil-lib-sop-raw-hmd=<fil-lib-sop-raw-hmd>] [--fil-lib-sop-pre=<fil-lib-sop-pre>]\n\nArguments:\n  fil-lib-sop-raw-hmd        HMDB raw structure organism pairs library. STRING\n  fil-lib-sop-pre            List of prepared structure organism pairs libraries. STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_libraries_sop_lotus.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/prepare_libraries_sop_lotus.R --fil-lib-sop-raw-ecm data/source/libraries/sop/lotus.csv.gz --fil-lib-sop-pre data/interim/libraries/sop/lotus_prepared.tsv.gz\n\nUsage:\n  prepare_libraries_sop_ecmdb.R [--fil-lib-sop-raw-ecm=<fil-lib-sop-raw-ecm>] [--fil-lib-sop-pre=<fil-lib-sop-pre>]\n\nArguments:\n  fil-lib-sop-raw-lot        LOTUS raw structure organism pairs library. STRING\n  fil-lib-sop-pre            List of prepared structure organism pairs libraries. STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_libraries_sop_merged.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/prepare_libraries_sop_merged.R --fil-lib-sop-pre data/interim/libraries/sop/lotus_prepared.tsv.gz --fil-lib-sop-mer bitter_db.tsv.gz --org-fil-mod TRUE --org-fil-lev family --org-fil-val 'Simaroubaceae|Gentianaceae'\n\nUsage:\n  prepare_libraries_sop_merged.R [--fil-lib-sop-pre=<fil-lib-sop-pre>] [--fil-lib-sop-mer=<fil-lib-sop-mer>] [--org-fil-mod=<org-fil-mod>] [--org-fil-lev=<org-fil-lev>] [--org-fil-val=<org-fil-val>]\n\nArguments:\n  fil-lib-sop-pre            List of prepared structure organism pairs libraries. STRING\n  fil-lib-sop-mer            Merged structure organism pairs library. STRING\n  \n  org-fil-mod                Filter library to restrict it to a portion of organisms only. BOOLEAN\n  org-fil-lev                Level at which the library will be filtered. Must be one of \"domain\", \"phylum\", \"class\", \"order\", \"family\", \"tribe\", \"genus\", \"species\", \"varietas\" . STRING\n  org-fil-val                Value to be applied for filtering. \"OR\" can be used as \"|\". Example: \"Simaroubaceae|Gentianaceae\". STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_libraries_spectra.txt","content":"You can use this script with the following example:\nRscript inst/scripts/prepare_libraries_spectra.R --fil-lib-spe-exp-raw data/source/libraries/spectra/exp/spectral_lib_mini_with_rt.mgf --fil-lib-spe-exp-pos data/interim/libraries/spectra/exp/massbank_pos.rds --ms-pol pos\n\nUsage:\n  prepare_libraries_spectra.R [--fil-lib-spe-exp-neg=<fil-lib-spe-exp-neg>] [--fil-lib-spe-exp-pos=<fil-lib-spe-exp-pos>] [--fil-lib-spe-exp-raw=<fil-lib-spe-exp-raw>] [--fil-lib-spe-is-neg=<fil-lib-spe-is-neg>] [--fil-lib-spe-is-pos=<fil-lib-spe-is-pos>] [--fil-lib-spe-is-raw=<fil-lib-spe-is-raw>] [--ms-pol=<ms-pol>] [--names-mgf-ce=<names-mgf-ce>] [--names-mgf-ci=<names-mgf-ci>] [--names-mgf-em=<names-mgf-em>] [--names-mgf-in=<names-mgf-in>] [--names-mgf-io=<names-mgf-io>] [--names-mgf-ik=<names-mgf-ik>] [--names-mgf-il=<names-mgf-il>] [--names-mgf-mf=<names-mgf-mf>] [--names-mgf-na=<names-mgf-na>] [--names-mgf-po=<names-mgf-po>] [--names-mgf-sm=<names-mgf-sm>] [--names-mgf-sn=<names-mgf-sn>] [--names-mgf-si=<names-mgf-si>] [--names-mgf-sp=<names-mgf-sp>] [--names-mgf-sy=<names-mgf-sy>] [--names-mgf-xl=<names-mgf-xl>] [--names-precursor=<names-precursor>] [--names-rt-lib=<names-rt-lib>] [--names-source=<names-source>] [--names-target=<names-target>] [--names-taxon=<names-taxon>]\n\nArguments:\n  fil-lib-spe-exp-neg        List of experimental negative spectral libraries. STRING\n  fil-lib-spe-exp-pos        List of experimental positive spectral libraries. STRING\n  fil-lib-spe-exp-raw        List of experimental raw spectral libraries. STRING\n  fil-lib-spe-is-neg         List of in silico negative spectral libraries. STRING\n  fil-lib-spe-is-pos         List of in silico positive spectral libraries. STRING\n  fil-lib-spe-is-raw         List of in silico raw spectral libraries. STRING\n\n  ms-pol                     Polarity used. Must be \"pos\" or \"neg\". STRING\n\n  names-mgf-ce               Name of \"collision energy\" in MGF. STRING\n  names-mgf-ci               Name of \"compound ID\" in MGF. STRING\n  names-mgf-em               Name of \"exact mass\" in MGF. STRING\n  names-mgf-in               Name of \"InChI\" in MGF. STRING\n  names-mgf-io               Name of \"InChI without stereo\" in MGF. STRING\n  names-mgf-ik               Name of \"InChIKey\" in MGF. STRING\n  names-mgf-il               Name of \"InChIKey without stereo\" in MGF. STRING\n  names-mgf-mf               Name of \"molecular formula\" in MGF. STRING\n  names-mgf-na               Name of \"name\" in MGF. STRING\n  names-mgf-po               Name of \"polarity\" in MGF. STRING\n  names-mgf-sm               Name of \"SMILES\" in MGF. STRING\n  names-mgf-sn               Name of \"SMILES without stereo\" in MGF. STRING\n  names-mgf-si               Name of \"spectrum ID\" in MGF. STRING\n  names-mgf-sp               Name of \"SPLASH\" in MGF. STRING\n  names-mgf-sy               Name of \"synonyms\" in MGF. STRING\n  names-mgf-xl               Name of \"xlogp\" in MGF. STRING\n  names-precursor            Name of \"precursor m/z\" variable in the input. STRING\n  names-rt-lib               Name of \"retention time\" variable (lib) in the input. STRING\n  names-source               Name of \"source IDs\" variable in the input. STRING\n  names-target               Name of \"target IDs\" variable in the input. STRING\n  names-taxon                Name of the \"taxon name\" variable in the input. STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_params.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/prepare_params.R\n\nUsage:\n  prepare_params.R  [--fil-pat=<fil-pat>] [--gnps-id=<gnps-id>] [--gnps-workflow=<gnps-workflow>] [--ms-pol=<ms-pol>] [--org-tax=<org-tax>]\n\nArguments:\n  fil-pat                    Pattern to identify the files. STRING\n  gnps-id                    GNPS job ID. STRING\n  gnps-workflow              Workflow used within GNPS. Currently \"fbmn\" or \"classical\" supported. STRING\n  ms-pol                     Polarity used. Must be \"pos\" or \"neg\". STRING\n  org-tax                    OPTIONAL. Force all features to be attributed to given taxon. Example: \"Homo sapiens\". STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/prepare_taxa.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/prepare_taxa.R --fil-met-pre data/interim/taxa/example_taxed.tsv.gz --org-can 1 --names-extension TRUE --names-features \"row ID\" --names-filename filename --names-taxon ATTRIBUTE_species\n\nUsage:\n  prepare_taxa.R [--fil-fea-raw=<fil-fea-raw>] [--fil-met-raw=<fil-met-raw>] [--fil-met-pre=<fil-met-pre>] [--gnps-id=<gnps-id>] [--names-extension=<names-extension>] [--names-features=<names-features>] [--names-filename=<names-filename>] [--names-taxon=<names-taxon>] [--org-can=<org-can>] [--org-tax=<org-tax>] [--too-met=<too-met>]\n\nArguments:\n  fil-fea-raw                Raw features file. STRING\n  fil-met-raw                OPTIONAL. If tool is \"manual\". Biological origin metadata file. STRING\n  fil-met-pre                Taxonomically informed features file. STRING\n\n  names-extension            The file(s) extension is present in the sample name. BOOLEAN\n  names-features             Name of \"feature IDs\" variable in the input. STRING\n  names-filename             Name of \"filename\" variable in the input. STRING\n  names-taxon                Name of the \"taxon name\" variable in the input. STRING\n\n  org-can                    Number of organisms to keep per feature. INTEGER\n  org-tax                    OPTIONAL. Force all features to be attributed to given taxon. Example: \"Homo sapiens\". STRING\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt/weight_annotations.txt","content":"You can use this script with the following example:\n  Rscript inst/scripts/weight_annotations.R\n\nUsage:\n  weight_annotations.R [--ann-can-fin=<ann-can-fin>] [--ann-ms1only=<ann-ms1only>] [--ann-thr-ms1-bio=<ann-thr-ms1-bio>] [--ann-thr-ms1-che=<ann-thr-ms1-che>] [--ann-thr-ms1-con=<ann-thr-ms1-con>] [--ann-thr-con=<ann-thr-con>] [--fil-ann-fil=<fil-ann-fil>] [--fil-ann-pre-can=<fil-ann-pre-can>] [--fil-ann-pre-for=<fil-ann-pre-for>] [--fil-ann-pro=<fil-ann-pro>] [--fil-lib-sop-mer=<fil-lib-sop-mer>] [--fil-net-spe-edg-pre=<fil-net-spe-edg-pre>] [--fil-met-pre=<fil-met-pre>] [--wei-glo-bio=<wei-glo-bio>] [--wei-glo-che=<wei-glo-che>] [--wei-glo-spe=<wei-glo-spe>] [--wei-bio-01=<wei-bio-01>] [--wei-bio-02=<wei-bio-02>] [--wei-bio-03=<wei-bio-03>] [--wei-bio-04=<wei-bio-04>] [--wei-bio-05=<wei-bio-05>] [--wei-bio-06=<wei-bio-06>] [--wei-bio-07=<wei-bio-07>] [--wei-bio-08=<wei-bio-08>] [--wei-bio-09=<wei-bio-09>] [--wei-bio-10=<wei-bio-10>] [--wei-bio-11=<wei-bio-11>] [--wei-bio-12=<wei-bio-12>] [--wei-bio-13=<wei-bio-13>] [--wei-bio-14=<wei-bio-14>] [--wei-bio-15=<wei-bio-15>] [--wei-che-11=<wei-che-11>] [--wei-che-12=<wei-che-12>] [--wei-che-13=<wei-che-13>]  [--wei-che-14=<wei-che-14>] [--wei-che-21=<wei-che-21>] [--wei-che-22=<wei-che-22>] [--wei-che-23=<wei-che-23>] [--compounds-names=<compounds-names>] [--remove-ties=<remove-ties>] [--summarise=<summarise>] [--force=<force>]\n\nArguments:\n  ann-can-fin                Number of final candidates. INTEGER\n  ann-ms1only                Erase MS2 results and keep MS1 only. BOOLEAN\n  ann-thr-ms1-bio            Minimal biological score to keep MS1 only annotation. FLOAT\n  ann-thr-ms1-che            Minimal chemical score to keep MS1 only annotation. FLOAT\n  ann-thr-ms1-con            Condition to be used to retain candidates. Must be \"OR\" or \"AND\". Example: Minimum 0.5 biological AND 0.5 chemical. STRING\n  ann-thr-con                Minimal consistency score (chemical) to consider a class. FLOAT\n  \n  fil-ann-fil                Filtered annotation file. STRING\n  fil-ann-pre-can            List of prepared canopus annotations. STRING\n  fil-ann-pre-for            List of prepared formula annotations. STRING\n  fil-ann-pro                Final results file. STRING\n  fil-lib-sop-mer            Merged structure organism pairs library. STRING\n  fil-net-spe-edg-pre        Prepared edges file. STRING\n  fil-met-pre                Taxonomically informed features file. STRING\n\n  wei-glo-bio                Weight for the biological part. FLOAT\n  wei-glo-che                Weight for the chemical part. FLOAT\n  wei-glo-spe                Weight for the spectral part. FLOAT\n\n  wei-bio-01                 Score for a biological domain match. FLOAT\n  wei-bio-02                 Score for a biological kingdom match. FLOAT\n  wei-bio-03                 Score for a biological phylum match. FLOAT\n  wei-bio-04                 Score for a biological class match. FLOAT\n  wei-bio-05                 Score for a biological order match. FLOAT\n  wei-bio-06                 Score for a biological infraorder match. FLOAT\n  wei-bio-07                 Score for a biological family match. FLOAT\n  wei-bio-08                 Score for a biological subfamily match. FLOAT\n  wei-bio-09                 Score for a biological tribe match. FLOAT\n  wei-bio-10                 Score for a biological subtribe match. FLOAT\n  wei-bio-11                 Score for a biological genus match. FLOAT\n  wei-bio-12                 Score for a biological subgenus match. FLOAT\n  wei-bio-13                 Score for a biological species match. FLOAT\n  wei-bio-14                 Score for a biological subspecies match. FLOAT\n  wei-bio-15                 Score for a biological variety match. FLOAT\n\n  wei-che-11                 Score for a chemical classyfire kingdom match. FLOAT\n  wei-che-12                 Score for a chemical classyfire superclass match. FLOAT\n  wei-che-13                 Score for a chemical classyfire class match. FLOAT\n  wei-che-14                 Score for a chemical classyfire parent match. FLOAT\n  wei-che-21                 Score for a chemical NPC pathway match. FLOAT\n  wei-che-22                 Score for a chemical NPC superclass match. FLOAT\n  wei-che-23                 Score for a chemical NPC class match. FLOAT\n\n  compounds-names            Report compounds names. Can be very large. BOOLEAN\n  force                      Do not use it. BOOLEAN\n  remove-ties                Remove ties. BOOLEAN\n  summarise                  Summarize results (1 row per feature). BOOLEAN\n\nOptions:\n  -h --help                  Shows this screen.\n  -v --version               Shows version.","type":"text"},{"name":"scripts/docopt.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nstep <- \"params\"\npaths <- parse_yaml_paths()\nparams <- get_params(step = step)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"is a test script\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/filter_annotations.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script performs\",\n  crayon::green(\"filters annotations\"),\n  \"based on\",\n  crayon::blue(\"retention time matching\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"^ann_fil\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/get_benchmark.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\npaths <- parse_yaml_paths()\n\nlog_debug(\n  \"This script\",\n  crayon::green(\n    \"downloads benchmarking set\",\n    \"from matchms work on GNPS dataset. \\n\"\n  )\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\nget_file(\n  url = paths$urls$benchmarking_set,\n  export = paths$data$source$benchmark$set\n)\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/get_ecmdb.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\npaths <- parse_yaml_paths()\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"downloads E. coli metabolome database structures. \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\nlog_debug(\"Downloading E. coli structures (should not take long)\")\nget_file(\n  url = paths$urls$ecmdb$metabolites,\n  export = paths$data$source$libraries$sop$ecmdb\n)\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/get_example_features.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\npaths <- parse_yaml_paths()\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"downloads an example of minimal feature table \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\nget_file(\n  url = paths$urls$examples$features,\n  export = paths$data$source$features\n)\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/get_example_metadata.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\npaths <- parse_yaml_paths()\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"downloads an example of metadata table. \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\nget_file(\n  url = paths$urls$examples$metadata,\n  export = paths$data$source$metadata\n)\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/get_example_sirius.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\npaths <- parse_yaml_paths()\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"downloads an example of SIRIUS output. \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\nget_example_sirius()\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/get_example_spectra.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\npaths <- parse_yaml_paths()\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"downloads an example of prepared MGF file. \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\nget_file(\n  url = paths$urls$examples$spectra,\n  export = paths$data$source$spectra\n)\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/get_gnps_tables.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"gets gnps tables\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"gnps_tables\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/get_hmdb.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\npaths <- parse_yaml_paths()\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"downloads HMDB structures. \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\n## TODO check md5 if possible\n## (see https://twitter.com/Adafede/status/1592543895094788096)\nlog_debug(\"Downloading HMDB (might be long)\")\nget_file(\n  url = paths$urls$hmdb$structures,\n  export = paths$data$source$libraries$sop$hmdb\n)\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/get_isdb_hmdb.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\npaths <- parse_yaml_paths()\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"downloads HMDB structures in silico fragmented. \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\n## TODO check md5 if possible\n## (see https://twitter.com/Adafede/status/1592543895094788096)\nlog_debug(\"Downloading HMDB (might be long)\")\nget_file(\n  url = paths$urls$hmdb$spectra$predicted,\n  export = paths$data$source$libraries$spectra$is$hmdb\n)\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/get_isdb_lotus.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"downloads the In Silico DataBase (ISDB) \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"lib_spe_is_lot\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/get_lotus.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"downloads LOTUS referenced structure-organism pairs. \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"lib_sop_lot$\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/get_massbank_spectra.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"downloads MassBank spectra \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"lib_spe_exp_mb_raw\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/install.R","content":"## Simple install helper\nsource(\"R/install_latest_version.R\")\ninstall_latest_version()\n","type":"text"},{"name":"scripts/prepare_annotations_gnps.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"formats GNPS results\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"^ann_spe_exp_gnp_pre\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_annotations_sirius.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"formats SIRIUS results\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"^ann_sir_pre\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_annotations_spectra.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"formats spectral annotations results\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\n## Not ann_spe because of `ann_spe_int` (see #69)\ntargets::tar_make(names = c(matches(\"^ann_spe_is\")))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_features_components.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"prepares features metadata (mz, rt and component id)\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"fea_com_pre\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_features_edges.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"prepares edges\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"fea_edg_pre\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_features_tables.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"prepares features\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"fea_pre\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_libraries_adducts.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"prepares adducts\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"lib_add\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_libraries_rt.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\n    \"prepares a library of retention times\",\n    \"from MGF or tabular data. \\n\"\n  )\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"lib_rt\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_libraries_sop_closed.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"prepares closed referenced structure-organism pairs \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"lib_sop_clo_pre\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_libraries_sop_ecmdb.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"prepares ecmdb structure-organism pairs \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"lib_sop_ecm_pre\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_libraries_sop_hmdb.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"prepares hmdb structure-organism pairs \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"lib_sop_hmd_pre\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_libraries_sop_lotus.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"prepares LOTUS referenced structure-organism pairs \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"lib_sop_lot_pre\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_libraries_sop_merged.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"prepares a library from prepared sub-libraries. \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"lib_sop_mer\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_libraries_spectra.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"Prepares the internal library spectra \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"lib_spe_exp_int_pre\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_libraries_spectra_exp_mona.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\npaths <- parse_yaml_paths()\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"Prepares spectra from MONA (MassBank of North America) \\n\"),\n  crayon::red(\"They have to be previously downloaded manually. \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\n#' @title Prepare MONA\n#'\n#' @param input Input file\n#' @param output_pos Output for positive spectra\n#' @param output_neg Output for negative spectra\n#' @param export_sqlite Boolean. Save as sqlite instead of mgf\n#'\n#' @return NULL\n#'\n#' @export\n#'\n#' @examples NULL\nprepare_mona <-\n  function(input = paths$data$source$libraries$spectra$exp$mona_lcmsms,\n           output_pos = paths$data$interim$libraries$spectra$exp$mona$pos,\n           output_neg = paths$data$interim$libraries$spectra$exp$mona$neg) {\n    log_debug(\"Loading standardization function (temp)\")\n    source(file = \"inst/scripts/standardize.R\")\n\n    ## SDF import from zip not working\n    log_debug(\"Loading spectra (might take long)\")\n    mona_data <-\n      CompoundDb::import_mona_sdf(x = input, nonStop = TRUE)\n\n    cpd <- mona_data$compound\n\n    spctra <- mona_data$msms_spectrum\n\n    log_debug(\"Adding metadata\")\n    spctra_enhanced <- spctra |>\n      tidytable::left_join(cpd) |>\n      tidytable::filter(spectrum_type == \"MS2\") |>\n      ## COMMENT (AR): CURATING NON-STANDARD InChIs\n      tidytable::mutate(inchi = gsub(\n        pattern = \"InChI=1/\",\n        replacement = \"InChI=1S/\",\n        x = inchi,\n        fixed = TRUE\n      )) |>\n      ## COMMENT (AR): Dropped the idea\n      ## too many things to do (mainly replace u by ?)\n      ## COMMENT (AR): No way\n      tidytable::mutate(inchi = gsub(\n        pattern = \" \",\n        replacement = \"\",\n        x = inchi,\n        fixed = TRUE\n      )) |>\n      tidytable::filter(!is.na(smiles) | !is.na(inchi)) |>\n      ## COMMENT (AR): FILTERING INVALID InChIs\n      tidytable::filter(grepl(\n        pattern = \"InChI=1S/\",\n        x = inchi,\n        fixed = TRUE\n      )) |>\n      tidytable::filter(!grepl(\n        pattern = \".\",\n        x = inchi,\n        fixed = TRUE\n      )) |>\n      tidytable::mutate(ionmode = ifelse(\n        test = polarity == 1,\n        yes = \"POSITIVE\",\n        no = \"NEGATIVE\"\n      )) |>\n      ## COMMENT (AR): FILTERING MISSING PRECURSOR MZS\n      tidytable::filter(!is.na(precursor_mz))\n\n    log_debug(\"Standardizing chemical structures without stereo\")\n    inchis <- unique(spctra_enhanced$inchi)\n\n    df_clean <- lapply(X = inchis, FUN = standardize_inchi) |>\n      tidytable::bind_rows()\n\n    spctra_enhanced <- spctra_enhanced |>\n      tidytable::left_join(df_clean)\n\n    log_debug(\"Cleaning charges\")\n    spctra_enhanced_1 <- spctra_enhanced |>\n      tidytable::filter(\n        grepl(pattern = \"]\\\\+\\\\+\", x = precursor_type, perl = TRUE) |\n          grepl(pattern = \"]2\\\\+\", x = precursor_type, perl = TRUE)\n      ) |>\n      tidytable::mutate(precursorCharge = 2L)\n    spctra_enhanced_2 <- spctra_enhanced |>\n      tidytable::filter(\n        grepl(pattern = \"]\\\\+$\", x = precursor_type, perl = TRUE) |\n          grepl(pattern = \"]1\\\\+\", x = precursor_type, perl = TRUE) |\n          grepl(pattern = \"M\\\\+H$\", x = precursor_type, perl = TRUE) |\n          grepl(pattern = \"M\\\\+K$\", x = precursor_type, perl = TRUE) |\n          grepl(pattern = \"M\\\\+Na$\", x = precursor_type, perl = TRUE) |\n          grepl(pattern = \"M\\\\+NH4$\", x = precursor_type, perl = TRUE) |\n          grepl(pattern = \"M\\\\+$\", x = precursor_type, perl = TRUE)\n      ) |>\n      tidytable::mutate(precursorCharge = 1L)\n    spctra_enhanced_3 <- spctra_enhanced |>\n      tidytable::filter(\n        grepl(pattern = \"]\\\\-\\\\-\", x = precursor_type, perl = TRUE) |\n          grepl(pattern = \"]2\\\\-\", x = precursor_type, perl = TRUE)\n      ) |>\n      tidytable::mutate(precursorCharge = -2L)\n    spctra_enhanced_4 <- spctra_enhanced |>\n      tidytable::filter(\n        grepl(pattern = \"]\\\\-$\", x = precursor_type, perl = TRUE) |\n          grepl(pattern = \"]1\\\\-\", x = precursor_type, perl = TRUE) |\n          grepl(pattern = \"M\\\\-H$\", x = precursor_type, perl = TRUE) |\n          grepl(pattern = \"M\\\\+Cl$\", x = precursor_type, perl = TRUE)\n      ) |>\n      tidytable::mutate(precursorCharge = -1L)\n\n    spctra_enhanced_5 <- spctra_enhanced |>\n      tidytable::anti_join(spctra_enhanced_1) |>\n      tidytable::anti_join(spctra_enhanced_2) |>\n      tidytable::anti_join(spctra_enhanced_3) |>\n      tidytable::anti_join(spctra_enhanced_4) |>\n      tidytable::mutate(diff = exactmass - precursor_mz) |>\n      tidytable::mutate(precursorCharge = ifelse(\n        test = ionmode == \"POSITIVE\",\n        yes = 1L,\n        no = -1L\n      ))\n\n    log_debug(\n      nrow(spctra_enhanced_5),\n      \"spectra were not unambiguously attributed,\",\n      \"trying the same by default base on ion type,\",\n      \"might induce some errors\"\n    )\n\n    spctra_enhanced_final <- tidytable::bind_rows(\n      spctra_enhanced_1,\n      spctra_enhanced_2,\n      spctra_enhanced_3,\n      spctra_enhanced_4,\n      spctra_enhanced_5\n    ) |>\n      tidytable::filter(!is.na(inchikey_no_stereo))\n\n    log_debug(\"Formatting\")\n    colnames_mona <- c(\n      colname_collision_energy = \"collision_energy\",\n      colname_compound_id = NA,\n      colname_exact_mass = \"exactmass\",\n      colname_formula = \"formula\",\n      colname_inchi = \"inchi_no_stereo\",\n      colname_inchikey = \"inchikey_no_stereo\",\n      colname_mode = \"ionmode\",\n      colname_name = \"inchikey_no_stereo\",\n      colname_precursorMz = \"precursor_mz\",\n      colname_precursorCharge = \"precursorCharge\",\n      colname_smiles = \"smiles_no_stereo\",\n      colname_spectrum_id = NA,\n      colname_splash = NA,\n      colname_synonyms = NA\n    )\n\n    log_debug(\"Positive\")\n    spectra_harmonized_pos <- spctra_enhanced_final |>\n      harmonize_spectra(\n        colnames = colnames_mona,\n        mode = \"pos\"\n      )\n\n    log_debug(\"Negative\")\n    spectra_harmonized_neg <- spctra_enhanced_final |>\n      harmonize_spectra(\n        colnames = colnames_mona,\n        mode = \"neg\"\n      )\n\n    log_debug(\"Exporting\")\n    export_spectra_2(\n      file = output_pos,\n      spectra = spectra_harmonized_pos,\n      meta = NULL\n    )\n    export_spectra_2(\n      file = output_neg,\n      spectra = spectra_harmonized_neg,\n      meta = NULL\n    )\n  }\n\nprepare_mona()\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_libraries_spectra_is_hmdb.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\npaths <- parse_yaml_paths()\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"Converts the predicted spectra from HMDB \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\n#' @title Prepare HMDB In Silico DataBase\n#'\n#' @param input Input file\n#' @param metadata Metadata\n#' @param output_pos Output for positive spectra\n#' @param output_neg Output for negative spectra\n#' @param export_sqlite Boolean. Save as sqlite instead of mgf\n#'\n#' @return NULL\n#'\n#' @export\n#'\n#' @examples NULL\nprepare_isdb_hmdb <-\n  function(input = paths$data$source$libraries$spectra$is$hmdb,\n           metadata = paths$data$interim$libraries$hmdb_minimal,\n           output_pos = paths$data$interim$libraries$spectra$is$hmdb$pos,\n           output_neg = paths$data$interim$libraries$spectra$is$hmdb$neg) {\n    log_debug(\"Loading standardization function (temp)\")\n    source(file = \"inst/scripts/standardize.R\")\n\n    log_debug(\"Loading proton mass\")\n    proton <-\n      readr::read_tsv(\n        file = system.file(\n          \"extdata\",\n          \"adducts.tsv\",\n          package = \"timaR\"\n        )\n      ) |>\n      tidytable::filter(adduct == \"H (proton)\") |>\n      tidytable::pull(\"mass\")\n\n    log_debug(\"Loading metadata\")\n    df_meta <- readr::read_tsv(file = metadata)\n\n    log_debug(\"Unzipping\")\n    newdir <-\n      gsub(\n        pattern = \".zip\",\n        replacement = \"\",\n        x = input,\n        fixed = TRUE\n      )\n    unzip(zipfile = input, exdir = newdir)\n\n    log_debug(\"Loading spectra (might take long)\")\n    spctra <- CompoundDb::msms_spectra_hmdb(x = newdir)\n\n    log_debug(\"Adding metadata\")\n    spctra_enhanced <- spctra |>\n      tidytable::left_join(\n        y = df_meta,\n        by = c(\"compound_id\" = \"accession\")\n      ) |>\n      tidytable::filter(!is.na(smiles)) |>\n      tidytable::select(-original_spectrum_id, -spectrum_id) |>\n      tidytable::distinct() |>\n      tidytable::mutate(\n        precursorMz = ifelse(\n          test = polarity == 1,\n          yes = monisotopic_molecular_weight + proton,\n          no = monisotopic_molecular_weight - proton\n        ),\n        ionmode = ifelse(\n          test = polarity == 1,\n          yes = \"POSITIVE\",\n          no = \"NEGATIVE\"\n        ),\n        precursorCharge = ifelse(\n          test = polarity == 1,\n          yes = 1L,\n          no = -1L\n        )\n      )\n\n    log_debug(\"Standardizing chemical structures without stereo\")\n    smiles <- unique(spctra_enhanced$smiles)\n    df_clean <- lapply(X = smiles, FUN = standardize_smiles) |>\n      tidytable::bind_rows()\n    spctra_enhanced <- spctra_enhanced |>\n      tidytable::left_join(df_clean)\n\n    col_args <- list(\n      co_ce = \"collision_energy\",\n      co_ci = \"compound_id\",\n      co_em = \"monisotopic_molecular_weight\",\n      co_mf = \"chemical_formula\",\n      co_in = \"inchi\",\n      co_io = \"inchi_no_stereo\",\n      co_ik = \"inchikey\",\n      co_il = \"inchikey_no_stereo\",\n      co_po = \"ionmode\",\n      co_na = \"name\",\n      co_sm = \"smiles\",\n      co_sn = \"smiles_no_stereo\",\n      co_si = NULL,\n      co_sp = \"splash\",\n      co_sy = \"iupac_name\",\n      co_xl = NULL\n    )\n    log_debug(\"Positive\")\n    spectra_harmonized_pos <-\n      do.call(\n        what = harmonize_spectra,\n        args = c(col_args,\n          spectra = spectra_enhanced,\n          mode = \"pos\"\n        )\n      )\n\n    log_debug(\"Negative\")\n    spectra_harmonized_neg <-\n      do.call(\n        what = harmonize_spectra,\n        args = c(col_args,\n          spectra = spectra_enhanced,\n          mode = \"neg\"\n        )\n      )\n\n    log_debug(\"Exporting\")\n    export_spectra_2(\n      file = output_pos,\n      spectra = spectra_harmonized_pos,\n      meta = NULL\n    )\n    export_spectra_2(\n      file = output_neg,\n      spectra = spectra_harmonized_neg,\n      meta = NULL\n    )\n\n    log_debug(\"Deleting unzipped directory\")\n    unlink(newdir, recursive = TRUE)\n  }\n\nprepare_isdb_hmdb()\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_libraries_spectra_is_lotus.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"Prepares the predicted spectra from LOTUS \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"lib_spe_is_lot_pre\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_params.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"prepares parameters\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"))\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"par_\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/prepare_taxa.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"informs taxonomically features\")\n)\nlog_debug(\n  \"Authors: \",\n  crayon::green(\"AR\"),\n  \",\",\n  crayon::blue(\"PMA\"),\n  \"\\n\"\n)\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"tax_pre\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/run_app.R","content":"# Check if runs in Docker environment or not\nif (file.exists(\"/.dockerenv\")) {\n  system('echo \"I\\'m inside the matrix ;(\"')\n  b <- FALSE\n  h <- \"0.0.0.0\"\n} else {\n  # Check if running latest version\n  tryCatch(\n    expr = {\n      install_latest_version()\n    },\n    error = function(e) {\n      source(\"R/install_latest_version.R\")\n      install_latest_version()\n    }\n  )\n  system('echo \"I\\'m living in the real world!\"')\n  b <- TRUE\n  h <- \"127.0.0.1\"\n}\n\nshiny::runApp(\n  appDir = \"inst\",\n  port = 3838,\n  host = h,\n  launch.browser = b\n)\n","type":"text"},{"name":"scripts/standardize.R","content":"## not putting this into R/ as more elaborated dependencies\n\n## replacing the original rinchi::parse.inchi\nparse.inchi <- function(inchis) {\n  ## Not working?\n  ## OKAY <- rJava::.jcall(\n  ## \"net/sf/jniinchi/INCHI_RET\",\n  ## \"Lnet/sf/jniinchi/INCHI_RET;\",\n  ## \"getValue\",\n  ## as.integer(0))\n  dcob <-\n    rJava::.jcall(\n      \"org/openscience/cdk/DefaultChemObjectBuilder\",\n      \"Lorg/openscience/cdk/interfaces/IChemObjectBuilder;\",\n      \"getInstance\"\n    )\n  igf <-\n    rJava::.jcall(\n      \"org/openscience/cdk/inchi/InChIGeneratorFactory\",\n      \"Lorg/openscience/cdk/inchi/InChIGeneratorFactory;\",\n      \"getInstance\"\n    )\n  mols <- lapply(inchis, function(inchi) {\n    i2s <-\n      rJava::.jcall(\n        igf,\n        \"Lorg/openscience/cdk/inchi/InChIToStructure;\",\n        \"getInChIToStructure\",\n        inchi,\n        dcob\n      )\n    status <- i2s$getReturnStatus()\n\n    # if (status == OKAY)\n    if (\"OKAY\" == \"OKAY\") {\n      rJava::.jcast(\n        i2s$getAtomContainer(),\n        \"org/openscience/cdk/interfaces/IAtomContainer\"\n      )\n    } else {\n      warning(paste0(\n        \"InChI parsing error for \",\n        inchi,\n        \": \",\n        status$toString()\n      ))\n      return(NULL)\n    }\n  })\n  return(mols)\n}\n\nstandardize_mol <- function(mol) {\n  if (mol$isEmpty()) {\n    list <-\n      list(\n        smiles_no_stereo = NA_character_,\n        inchi_no_stereo = NA_character_,\n        inchikey_no_stereo = NA_character_\n      )\n  } else {\n    mol <- mol |>\n      rcdk::remove.hydrogens()\n    smiles_no_stereo <- mol |>\n      rcdk::get.smiles(\n        flavor = rcdk::smiles.flavors(\n          c(\n            \"Canonical\",\n            \"UseAromaticSymbols\"\n          )\n        )\n      )\n    inchi_no_stereo <- mol |>\n      rinchi::get.inchi()\n    inchikey_no_stereo <- mol |>\n      rinchi::get.inchi.key() |>\n      gsub(pattern = \"-.*\", replacement = \"\", perl = TRUE)\n\n    return(list(\n      smiles_no_stereo = ifelse(\n        test = smiles_no_stereo == \"\",\n        yes = NA_character_,\n        no = smiles_no_stereo\n      ),\n      inchi_no_stereo = ifelse(\n        test = is.null(inchi_no_stereo),\n        yes = NA_character_,\n        no = inchi_no_stereo\n      ),\n      inchikey_no_stereo = ifelse(\n        test = identical(x = inchikey_no_stereo, y = character(0)),\n        yes = NA_character_,\n        no = inchikey_no_stereo\n      )\n    ))\n  }\n}\n\nstandardize_smiles <- function(smiles) {\n  list <- rcdk::parse.smiles(\n    smiles = smiles,\n    kekulise = TRUE\n  )[[1]]\n  if (length(list) > 0) {\n    list <- list |>\n      standardize_mol()\n  } else {\n    list <- list(\n      smiles_no_stereo = NA_character_,\n      inchi_no_stereo = NA_character_,\n      inchikey_no_stereo = NA_character_\n    )\n  }\n\n  return(data.frame(smiles, list))\n}\n\nstandardize_inchi <- function(inchi) {\n  list <- parse.inchi(inchi)[[1]]\n  if (length(list) > 0) {\n    list <- list |>\n      standardize_mol()\n  } else {\n    list <- list(\n      smiles_no_stereo = NA_character_,\n      inchi_no_stereo = NA_character_,\n      inchikey_no_stereo = NA_character_\n    )\n  }\n\n  return(data.frame(inchi, list))\n}\n","type":"text"},{"name":"scripts/tima_full.R","content":"start <- Sys.time()\n\nlibrary(\"timaR\")\n\nlog_debug(\n  \"This script\",\n  crayon::green(\"does everything you ever dreamt of. \\n\")\n)\nlog_debug(\"Authors: \", crayon::green(\"AR\"), \"\\n\")\nlog_debug(\"Contributors: \", crayon::blue(\"PMA\"), \"\\n\")\n\ntargets::tar_make(names = matches(\"^ann_pre$\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"},{"name":"scripts/weight_annotations.R","content":"start <- Sys.time()\n\nrequire(\n  package = \"timaR\",\n  quietly = TRUE\n)\n\nlog_debug(\n  \"This script performs\",\n  crayon::green(\"taxonomically informed scoring\"),\n  \"and followed by\",\n  crayon::blue(\"chemical consistency informed scoring\")\n)\nlog_debug(\n  \"Authors: \",\n  crayon::green(\"AR\"),\n  \",\",\n  crayon::blue(\"PMA\"),\n  \"\\n\"\n)\nlog_debug(\"Contributors: ...\")\n\ntargets::tar_make(names = matches(\"ann_pre$\"))\n\nend <- Sys.time()\n\nlog_debug(\"Script finished in\", crayon::green(format(end - start)))\n","type":"text"}]
